{
  "version": 3,
  "file": "datetimepicker.component.js",
  "sources": [
    "ng://angular2-json-schema-form/src/lib/src/widget-library/datetimepicker.component.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { dateToString, hasOwn, stringToDate } from '../shared';\n\n@Component({\n  selector: 'datetimepicker-widget',\n  // template: `\n  //   <mat-form-field [style.width]=\"'100%'\">\n  //     <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n  //       [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n  //     <input matInput *ngIf=\"boundControl\"\n  //       [formControl]=\"formControl\"\n  //       [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n  //       [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n  //       [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n  //       [id]=\"'control' + layoutNode?._id\"\n  //       [max]=\"options?.maximum\"\n  //       [matDatepicker]=\"picker\"\n  //       [min]=\"options?.minimum\"\n  //       [name]=\"controlName\"\n  //       [placeholder]=\"options?.title\"\n  //       [required]=\"options?.required\"\n  //       [style.width]=\"'100%'\"\n  //       (blur)=\"options.showErrors = true\">\n  //     <input matInput *ngIf=\"!boundControl\"\n  //       [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n  //       [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n  //       [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n  //       [disabled]=\"controlDisabled || options?.readonly\"\n  //       [id]=\"'control' + layoutNode?._id\"\n  //       [max]=\"options?.maximum\"\n  //       [matDatepicker]=\"picker\"\n  //       [min]=\"options?.minimum\"\n  //       [name]=\"controlName\"\n  //       [placeholder]=\"options?.title\"\n  //       [required]=\"options?.required\"\n  //       [style.width]=\"'100%'\"\n  //       [value]=\"dateValue\"\n  //       (blur)=\"options.showErrors = true\"\n  //       (change)=\"updateValue($event)\"\n  //       (input)=\"updateValue($event)\">\n  //     <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n  //       [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n  //     <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n  //       align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n  //     <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  //   </mat-form-field>\n  //   <mat-datepicker #picker></mat-datepicker>\n  //   <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n  //     [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  template: `<dp-date-picker [(ngModel)]=\"selectedDate\" [config]=\"datePickerConfig\"></dp-date-picker>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class DatetimepickerComponent implements OnInit, OnChanges {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  dateValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    this.setControlDate(this.controlValue);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  ngOnChanges() {\n    this.setControlDate(this.controlValue);\n  }\n\n  setControlDate(dateString: string) {\n    this.dateValue = stringToDate(dateString);\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, dateToString(event, this.options));\n  }\n}\n"
  ],
  "names": [],
  "mappings": "AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAqB,MAAM,eAAe,CAAC;AAGpE,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AACpE,OAAO,EAAE,YAAY,EAAU,YAAY,EAAE,MAAM,WAAW,CAAC;AAuD/D,MAAM;IAaJ,YACU,GAA0B;QAA1B,QAAG,GAAH,GAAG,CAAuB;+BATlB,KAAK;4BACR,KAAK;gCAES,EAAE;KAO1B;IAEL,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;SACrD;KACF;IAED,WAAW;QACT,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACxC;IAED,cAAc,CAAC,UAAkB;QAC/B,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;KAC3C;IAED,WAAW,CAAC,KAAK;QACf,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;KAC/D;;;YA1FF,SAAS,SAAC;gBACT,QAAQ,EAAE,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA6CjC,QAAQ,EAAE,0FAA0F;gBACpG,MAAM,EAAE,CAAC;;;;GAIR,CAAC;aACH;;;;YAvDQ,qBAAqB;;;2BAiE3B,KAAK;4BACL,KAAK;0BACL,KAAK"
}
