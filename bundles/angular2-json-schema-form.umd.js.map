{
  "version": 3,
  "file": "angular2-json-schema-form.umd.js",
  "sources": [
    "ng://angular2-json-schema-form/src/lib/src/framework-library/bootstrap-4-framework/bootstrap-4-framework.module.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/bootstrap-4-framework/bootstrap-4.framework.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/bootstrap-4-framework/bootstrap-4-framework.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/bootstrap-3-framework/bootstrap-3-framework.module.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/bootstrap-3-framework/bootstrap-3.framework.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/bootstrap-3-framework/bootstrap-3-framework.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-design-framework.module.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/index.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-design.framework.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-design-framework.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-textarea.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-tabs.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-stepper.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-slider.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-select-icon.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-select-color.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-select.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-radios.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-number.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-input.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-file.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-datetimepicker.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-datepicker.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-ckeditor.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-chip-list.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-checkboxes.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-checkbox.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-button-group.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-button.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-one-of.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/material-add-reference.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/flex-layout-section.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/material-design-framework/flex-layout-root.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/json-schema-form.module.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/no-framework/no-framework.module.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/no-framework/no.framework.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/no-framework/no-framework.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/widget-library.module.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/index.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/tab.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/hidden.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/json-schema-form.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/framework-library.service.ts",
    "ng://angular2-json-schema-form/src/lib/src/framework-library/framework.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/widget-library.service.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/datetimepicker.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/textarea.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/template.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/tabs.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/submit.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/select-widget.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/select-framework.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/select.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/ckeditor.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/section.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/root.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/radios.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/number.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/none.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/message.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/input.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/file.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/checkboxes.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/checkbox.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/button.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/one-of.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/widget-library/add-reference.component.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/orderable.directive.ts",
    "ng://angular2-json-schema-form/src/lib/src/json-schema-form.service.ts",
    "ng://angular2-json-schema-form/src/lib/src/locale/fr-validation-messages.ts",
    "ng://angular2-json-schema-form/src/lib/src/locale/en-validation-messages.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/date.functions.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/layout.functions.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/form-group.functions.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/convert-schema-to-draft6.function.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/json-schema.functions.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/merge-schemas.function.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/json.validators.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/format-regex.constants.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/jsonpointer.functions.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/utility.functions.ts",
    "ng://angular2-json-schema-form/src/lib/src/shared/validator.functions.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { WidgetLibraryModule } from '../../widget-library/widget-library.module';\nimport { Framework } from '../framework';\nimport { Bootstrap4FrameworkComponent } from './bootstrap-4-framework.component';\nimport { Bootstrap4Framework } from './bootstrap-4.framework';\n\n@NgModule({\n  imports:         [ CommonModule, WidgetLibraryModule ],\n  declarations:    [ Bootstrap4FrameworkComponent ],\n  exports:         [ Bootstrap4FrameworkComponent ],\n  entryComponents: [ Bootstrap4FrameworkComponent ]\n})\nexport class Bootstrap4FrameworkModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: Bootstrap4FrameworkModule,\n      providers: [\n        { provide: Framework, useClass: Bootstrap4Framework, multi: true }\n      ]\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { Framework } from '../framework';\n\n// Bootstrap 4 Framework\n// https://github.com/ng-bootstrap/ng-bootstrap\nimport { Bootstrap4FrameworkComponent } from './bootstrap-4-framework.component';\n\n\n@Injectable()\nexport class Bootstrap4Framework extends Framework {\n  name = 'bootstrap-4';\n\n  framework = Bootstrap4FrameworkComponent;\n\n  stylesheets = [\n    '//maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css'\n  ];\n\n  scripts = [\n    '//code.jquery.com/jquery-3.2.1.slim.min.js',\n    '//cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js',\n    '//maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js',\n  ];\n}\n",
    "import { ChangeDetectorRef, Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport * as _ from 'lodash';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport {\n  addClasses, hasOwn, inArray, isArray, JsonPointer, toTitleCase\n} from '../../shared';\n\n/**\n * Bootstrap 4 framework for Angular JSON Schema Form.\n *\n */\n@Component({\n  selector: 'bootstrap-4-framework',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\"\n      [class.has-feedback]=\"options?.feedback && options?.isInputWidget &&\n        (formControl?.dirty || options?.feedbackOnRender)\"\n      [class.has-error]=\"options?.enableErrorState && formControl?.errors &&\n        (formControl?.dirty || options?.feedbackOnRender)\"\n      [class.has-success]=\"options?.enableSuccessState && !formControl?.errors &&\n        (formControl?.dirty || options?.feedbackOnRender)\">\n\n      <button *ngIf=\"showRemoveButton\"\n        class=\"close pull-right\"\n        type=\"button\"\n        (click)=\"removeItem()\">\n        <span aria-hidden=\"true\">&times;</span>\n        <span class=\"sr-only\">Close</span>\n      </button>\n      <div *ngIf=\"options?.messageLocation === 'top'\">\n        <p *ngIf=\"options?.helpBlock\"\n          class=\"help-block\"\n          [innerHTML]=\"options?.helpBlock\"></p>\n      </div>\n\n      <label *ngIf=\"options?.title && layoutNode?.type !== 'tab'\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [class.sr-only]=\"options?.notitle\"\n        [innerHTML]=\"options?.title\"></label>\n      <p *ngIf=\"layoutNode?.type === 'submit' && jsf?.formOptions?.fieldsRequired\">\n        <strong class=\"text-danger\">*</strong> = required fields\n      </p>\n      <div [class.input-group]=\"options?.fieldAddonLeft || options?.fieldAddonRight\">\n        <span *ngIf=\"options?.fieldAddonLeft\"\n          class=\"input-group-addon\"\n          [innerHTML]=\"options?.fieldAddonLeft\"></span>\n\n        <select-widget-widget\n          [layoutNode]=\"widgetLayoutNode\"\n          [dataIndex]=\"dataIndex\"\n          [layoutIndex]=\"layoutIndex\"></select-widget-widget>\n\n        <span *ngIf=\"options?.fieldAddonRight\"\n          class=\"input-group-addon\"\n          [innerHTML]=\"options?.fieldAddonRight\"></span>\n      </div>\n\n      <span *ngIf=\"options?.feedback && options?.isInputWidget &&\n          !options?.fieldAddonRight && !layoutNode.arrayItem &&\n          (formControl?.dirty || options?.feedbackOnRender)\"\n        [class.glyphicon-ok]=\"options?.enableSuccessState && !formControl?.errors\"\n        [class.glyphicon-remove]=\"options?.enableErrorState && formControl?.errors\"\n        aria-hidden=\"true\"\n        class=\"form-control-feedback glyphicon\"></span>\n      <div *ngIf=\"options?.messageLocation !== 'top'\">\n        <p *ngIf=\"options?.helpBlock\"\n          class=\"help-block\"\n          [innerHTML]=\"options?.helpBlock\"></p>\n      </div>\n    </div>\n\n    <div *ngIf=\"debug && debugOutput\">debug: <pre>{{debugOutput}}</pre></div>\n  `,\n  styles: [`\n    :host /deep/ .list-group-item .form-control-feedback { top: 40px; }\n    :host /deep/ .checkbox,\n    :host /deep/ .radio { margin-top: 0; margin-bottom: 0; }\n    :host /deep/ .checkbox-inline,\n    :host /deep/ .checkbox-inline + .checkbox-inline,\n    :host /deep/ .checkbox-inline + .radio-inline,\n    :host /deep/ .radio-inline,\n    :host /deep/ .radio-inline + .radio-inline,\n    :host /deep/ .radio-inline + .checkbox-inline { margin-left: 0; margin-right: 10px; }\n    :host /deep/ .checkbox-inline:last-child,\n    :host /deep/ .radio-inline:last-child { margin-right: 0; }\n    :host /deep/ .ng-invalid.ng-touched { border: 1px solid #f44336; }\n  `],\n})\nexport class Bootstrap4FrameworkComponent implements OnInit, OnChanges {\n  frameworkInitialized = false;\n  widgetOptions: any; // Options passed to child widget\n  widgetLayoutNode: any; // layoutNode passed to child widget\n  options: any; // Options used in this framework\n  formControl: any = null;\n  debugOutput: any = '';\n  debug: any = '';\n  parentArray: any = null;\n  isOrderable = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    public changeDetector: ChangeDetectorRef,\n    public jsf: JsonSchemaFormService\n  ) { }\n\n  get showRemoveButton(): boolean {\n    if (!this.options.removable || this.options.readonly ||\n      this.layoutNode.type === '$ref'\n    ) { return false; }\n    if (this.layoutNode.recursiveReference) { return true; }\n    if (!this.layoutNode.arrayItem || !this.parentArray) { return false; }\n    // If array length <= minItems, don't allow removing any items\n    return this.parentArray.items.length - 1 <= this.parentArray.options.minItems ? false :\n      // For removable list items, allow removing any item\n      this.layoutNode.arrayItemType === 'list' ? true :\n        // For removable tuple items, only allow removing last item in list\n        this.layoutIndex[this.layoutIndex.length - 1] === this.parentArray.items.length - 2;\n  }\n\n  ngOnInit() {\n    this.initializeFramework();\n    if (this.layoutNode.arrayItem && this.layoutNode.type !== '$ref') {\n      this.parentArray = this.jsf.getParentNode(this);\n      if (this.parentArray) {\n        this.isOrderable = this.layoutNode.arrayItemType === 'list' &&\n          !this.options.readonly && this.parentArray.options.orderable;\n      }\n    }\n  }\n\n  ngOnChanges() {\n    if (!this.frameworkInitialized) { this.initializeFramework(); }\n  }\n\n  initializeFramework() {\n    if (this.layoutNode) {\n      this.options = _.cloneDeep(this.layoutNode.options);\n      this.widgetLayoutNode = {\n        ...this.layoutNode,\n        options: _.cloneDeep(this.layoutNode.options)\n      };\n      this.widgetOptions = this.widgetLayoutNode.options;\n      this.formControl = this.jsf.getFormControl(this);\n\n      this.options.isInputWidget = inArray(this.layoutNode.type, [\n        'button', 'checkbox', 'checkboxes-inline', 'checkboxes', 'color',\n        'date', 'datetime-local', 'datetime', 'email', 'file', 'hidden',\n        'image', 'integer', 'month', 'number', 'password', 'radio',\n        'radiobuttons', 'radios-inline', 'radios', 'range', 'reset', 'search',\n        'select', 'submit', 'tel', 'text', 'textarea', 'time', 'url', 'week'\n      ]);\n\n      this.options.title = this.setTitle();\n\n      this.options.htmlClass =\n        addClasses(this.options.htmlClass, 'schema-form-' + this.layoutNode.type);\n      this.options.htmlClass =\n        this.layoutNode.type === 'array' ?\n          addClasses(this.options.htmlClass, 'list-group') :\n          this.layoutNode.arrayItem && this.layoutNode.type !== '$ref' ?\n            addClasses(this.options.htmlClass, 'list-group-item') :\n            addClasses(this.options.htmlClass, 'form-group');\n      this.widgetOptions.htmlClass = '';\n      this.options.labelHtmlClass =\n        addClasses(this.options.labelHtmlClass, 'control-label');\n      this.widgetOptions.activeClass =\n        addClasses(this.widgetOptions.activeClass, 'active');\n      this.options.fieldAddonLeft =\n        this.options.fieldAddonLeft || this.options.prepend;\n      this.options.fieldAddonRight =\n        this.options.fieldAddonRight || this.options.append;\n\n      // Add asterisk to titles if required\n      if (this.options.title && this.layoutNode.type !== 'tab' &&\n        !this.options.notitle && this.options.required  &&\n        !this.options.title.includes('*')\n      ) {\n        this.options.title += ' <strong class=\"text-danger\">*</strong>';\n      }\n      // Set miscelaneous styles and settings for each control type\n      switch (this.layoutNode.type) {\n        // Checkbox controls\n        case 'checkbox': case 'checkboxes':\n        this.widgetOptions.htmlClass = addClasses(\n          this.widgetOptions.htmlClass, 'checkbox');\n        break;\n        case 'checkboxes-inline':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'checkbox');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, 'checkbox-inline');\n          break;\n        // Radio controls\n        case 'radio': case 'radios':\n        this.widgetOptions.htmlClass = addClasses(\n          this.widgetOptions.htmlClass, 'radio');\n        break;\n        case 'radios-inline':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'radio');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, 'radio-inline');\n          break;\n        // Button sets - checkboxbuttons and radiobuttons\n        case 'checkboxbuttons': case 'radiobuttons':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'btn-group');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, 'btn');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, this.options.style || 'btn-default');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'sr-only');\n        break;\n        // Single button controls\n        case 'button': case 'submit':\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'btn');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, this.options.style || 'btn-info');\n        break;\n        // Containers - arrays and fieldsets\n        case 'array': case 'fieldset': case 'section': case 'conditional':\n        case 'advancedfieldset': case 'authfieldset':\n        case 'selectfieldset': case 'optionfieldset':\n          this.options.messageLocation = 'top';\n        break;\n        case 'tabarray': case 'tabs':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'tab-content');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'tab-pane');\n          this.widgetOptions.labelHtmlClass = addClasses(\n            this.widgetOptions.labelHtmlClass, 'nav nav-tabs');\n        break;\n        // 'Add' buttons - references\n        case '$ref':\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'btn pull-right');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, this.options.style || 'btn-default');\n          this.options.icon = 'glyphicon glyphicon-plus';\n        break;\n        // Default - including regular inputs\n        default:\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'form-control');\n      }\n\n      if (this.formControl) {\n        this.updateHelpBlock(this.formControl.status);\n        this.formControl.statusChanges.subscribe(status => this.updateHelpBlock(status));\n\n        if (this.options.debug) {\n          const vars: any[] = [];\n          this.debugOutput = _.map(vars, thisVar => JSON.stringify(thisVar, null, 2)).join('\\n');\n        }\n      }\n      this.frameworkInitialized = true;\n    }\n\n  }\n\n  updateHelpBlock(status) {\n    this.options.helpBlock = status === 'INVALID' &&\n      this.options.enableErrorState && this.formControl.errors &&\n      (this.formControl.dirty || this.options.feedbackOnRender) ?\n        this.jsf.formatErrors(this.formControl.errors, this.options.validationMessages) :\n        this.options.description || this.options.help || null;\n  }\n\n  setTitle(): string {\n    switch (this.layoutNode.type) {\n      case 'button': case 'checkbox': case 'section': case 'help': case 'msg':\n      case 'submit': case 'message': case 'tabarray': case 'tabs': case '$ref':\n        return null;\n      case 'advancedfieldset':\n        this.widgetOptions.expandable = true;\n        this.widgetOptions.title = 'Advanced options';\n        return null;\n      case 'authfieldset':\n        this.widgetOptions.expandable = true;\n        this.widgetOptions.title = 'Authentication settings';\n        return null;\n      case 'fieldset':\n        this.widgetOptions.title = this.options.title;\n        return null;\n      default:\n        this.widgetOptions.title = null;\n        return this.jsf.setItemTitle(this);\n    }\n  }\n\n  removeItem() {\n    this.jsf.removeItem(this);\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { WidgetLibraryModule } from '../../widget-library/widget-library.module';\nimport { Framework } from '../framework';\nimport { Bootstrap3FrameworkComponent } from './bootstrap-3-framework.component';\nimport { Bootstrap3Framework } from './bootstrap-3.framework';\n\n@NgModule({\n  imports:         [ CommonModule, WidgetLibraryModule ],\n  declarations:    [ Bootstrap3FrameworkComponent ],\n  exports:         [ Bootstrap3FrameworkComponent ],\n  entryComponents: [ Bootstrap3FrameworkComponent ]\n})\nexport class Bootstrap3FrameworkModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: Bootstrap3FrameworkModule,\n      providers: [\n        { provide: Framework, useClass: Bootstrap3Framework, multi: true }\n      ]\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { Framework } from '../framework';\n\n// Bootstrap 3 Framework\n// https://github.com/valor-software/ng2-bootstrap\nimport { Bootstrap3FrameworkComponent } from './bootstrap-3-framework.component';\n\n@Injectable()\nexport class Bootstrap3Framework extends Framework {\n  name = 'bootstrap-3';\n\n  framework = Bootstrap3FrameworkComponent;\n\n  stylesheets = [\n    '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css',\n    '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css',\n  ];\n\n  scripts = [\n    '//ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js',\n    '//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js',\n    '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js',\n  ];\n}\n",
    "import { ChangeDetectorRef, Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport * as _ from 'lodash';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport {\n  addClasses, hasOwn, inArray, isArray, JsonPointer, toTitleCase\n} from '../../shared';\n\n/**\n * Bootstrap 3 framework for Angular JSON Schema Form.\n *\n */\n@Component({\n  selector: 'bootstrap-3-framework',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\"\n      [class.has-feedback]=\"options?.feedback && options?.isInputWidget &&\n        (formControl?.dirty || options?.feedbackOnRender)\"\n      [class.has-error]=\"options?.enableErrorState && formControl?.errors &&\n        (formControl?.dirty || options?.feedbackOnRender)\"\n      [class.has-success]=\"options?.enableSuccessState && !formControl?.errors &&\n        (formControl?.dirty || options?.feedbackOnRender)\">\n\n      <button *ngIf=\"showRemoveButton\"\n        class=\"close pull-right\"\n        type=\"button\"\n        (click)=\"removeItem()\">\n        <span aria-hidden=\"true\">&times;</span>\n        <span class=\"sr-only\">Close</span>\n      </button>\n      <div *ngIf=\"options?.messageLocation === 'top'\">\n          <p *ngIf=\"options?.helpBlock\"\n          class=\"help-block\"\n          [innerHTML]=\"options?.helpBlock\"></p>\n      </div>\n\n      <label *ngIf=\"options?.title && layoutNode?.type !== 'tab'\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [class.sr-only]=\"options?.notitle\"\n        [innerHTML]=\"options?.title\"></label>\n      <p *ngIf=\"layoutNode?.type === 'submit' && jsf?.formOptions?.fieldsRequired\">\n        <strong class=\"text-danger\">*</strong> = required fields\n      </p>\n      <div [class.input-group]=\"options?.fieldAddonLeft || options?.fieldAddonRight\">\n        <span *ngIf=\"options?.fieldAddonLeft\"\n          class=\"input-group-addon\"\n          [innerHTML]=\"options?.fieldAddonLeft\"></span>\n\n        <select-widget-widget\n          [layoutNode]=\"widgetLayoutNode\"\n          [dataIndex]=\"dataIndex\"\n          [layoutIndex]=\"layoutIndex\"></select-widget-widget>\n\n        <span *ngIf=\"options?.fieldAddonRight\"\n          class=\"input-group-addon\"\n          [innerHTML]=\"options?.fieldAddonRight\"></span>\n      </div>\n\n      <span *ngIf=\"options?.feedback && options?.isInputWidget &&\n          !options?.fieldAddonRight && !layoutNode.arrayItem &&\n          (formControl?.dirty || options?.feedbackOnRender)\"\n        [class.glyphicon-ok]=\"options?.enableSuccessState && !formControl?.errors\"\n        [class.glyphicon-remove]=\"options?.enableErrorState && formControl?.errors\"\n        aria-hidden=\"true\"\n        class=\"form-control-feedback glyphicon\"></span>\n      <div *ngIf=\"options?.messageLocation !== 'top'\">\n        <p *ngIf=\"options?.helpBlock\"\n          class=\"help-block\"\n          [innerHTML]=\"options?.helpBlock\"></p>\n      </div>\n    </div>\n\n    <div *ngIf=\"debug && debugOutput\">debug: <pre>{{debugOutput}}</pre></div>\n  `,\n  styles: [`\n    :host /deep/ .list-group-item .form-control-feedback { top: 40; }\n    :host /deep/ .checkbox,\n    :host /deep/ .radio { margin-top: 0; margin-bottom: 0; }\n    :host /deep/ .checkbox-inline,\n    :host /deep/ .checkbox-inline + .checkbox-inline,\n    :host /deep/ .checkbox-inline + .radio-inline,\n    :host /deep/ .radio-inline,\n    :host /deep/ .radio-inline + .radio-inline,\n    :host /deep/ .radio-inline + .checkbox-inline { margin-left: 0; margin-right: 10px; }\n    :host /deep/ .checkbox-inline:last-child,\n    :host /deep/ .radio-inline:last-child { margin-right: 0; }\n    :host /deep/ .ng-invalid.ng-touched { border: 1px solid #f44336; }\n  `],\n})\nexport class Bootstrap3FrameworkComponent implements OnInit, OnChanges {\n  frameworkInitialized = false;\n  widgetOptions: any; // Options passed to child widget\n  widgetLayoutNode: any; // layoutNode passed to child widget\n  options: any; // Options used in this framework\n  formControl: any = null;\n  debugOutput: any = '';\n  debug: any = '';\n  parentArray: any = null;\n  isOrderable = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    public changeDetector: ChangeDetectorRef,\n    public jsf: JsonSchemaFormService\n  ) { }\n\n  get showRemoveButton(): boolean {\n    if (!this.options.removable || this.options.readonly ||\n      this.layoutNode.type === '$ref'\n    ) { return false; }\n    if (this.layoutNode.recursiveReference) { return true; }\n    if (!this.layoutNode.arrayItem || !this.parentArray) { return false; }\n    // If array length <= minItems, don't allow removing any items\n    return this.parentArray.items.length - 1 <= this.parentArray.options.minItems ? false :\n      // For removable list items, allow removing any item\n      this.layoutNode.arrayItemType === 'list' ? true :\n      // For removable tuple items, only allow removing last item in list\n      this.layoutIndex[this.layoutIndex.length - 1] === this.parentArray.items.length - 2;\n  }\n\n  ngOnInit() {\n    this.initializeFramework();\n    if (this.layoutNode.arrayItem && this.layoutNode.type !== '$ref') {\n      this.parentArray = this.jsf.getParentNode(this);\n      if (this.parentArray) {\n        this.isOrderable = this.layoutNode.arrayItemType === 'list' &&\n          !this.options.readonly && this.parentArray.options.orderable;\n      }\n    }\n  }\n\n  ngOnChanges() {\n    if (!this.frameworkInitialized) { this.initializeFramework(); }\n  }\n\n  initializeFramework() {\n    if (this.layoutNode) {\n      this.options = _.cloneDeep(this.layoutNode.options);\n      this.widgetLayoutNode = {\n        ...this.layoutNode,\n        options: _.cloneDeep(this.layoutNode.options)\n      };\n      this.widgetOptions = this.widgetLayoutNode.options;\n      this.formControl = this.jsf.getFormControl(this);\n\n      this.options.isInputWidget = inArray(this.layoutNode.type, [\n        'button', 'checkbox', 'checkboxes-inline', 'checkboxes', 'color',\n        'date', 'datetime-local', 'datetime', 'email', 'file', 'hidden',\n        'image', 'integer', 'month', 'number', 'password', 'radio',\n        'radiobuttons', 'radios-inline', 'radios', 'range', 'reset', 'search',\n        'select', 'submit', 'tel', 'text', 'textarea', 'time', 'url', 'week'\n      ]);\n\n      this.options.title = this.setTitle();\n\n      this.options.htmlClass =\n        addClasses(this.options.htmlClass, 'schema-form-' + this.layoutNode.type);\n      if (this.layoutNode.type !== 'flex')  {\n          this.options.htmlClass =\n            this.layoutNode.type === 'array' ?\n              addClasses(this.options.htmlClass, 'list-group') :\n            this.layoutNode.arrayItem && this.layoutNode.type !== '$ref' ?\n              addClasses(this.options.htmlClass, 'list-group-item') :\n              addClasses(this.options.htmlClass, 'form-group');\n      }\n      this.widgetOptions.htmlClass = '';\n      this.options.labelHtmlClass =\n        addClasses(this.options.labelHtmlClass, 'control-label');\n      this.widgetOptions.activeClass =\n        addClasses(this.widgetOptions.activeClass, 'active');\n      this.options.fieldAddonLeft =\n        this.options.fieldAddonLeft || this.options.prepend;\n      this.options.fieldAddonRight =\n        this.options.fieldAddonRight || this.options.append;\n\n      // Add asterisk to titles if required\n      if (this.options.title && this.layoutNode.type !== 'tab' &&\n        !this.options.notitle && this.options.required  &&\n        !this.options.title.includes('*')\n      ) {\n        this.options.title += ' <strong class=\"text-danger\">*</strong>';\n      }\n      // Set miscelaneous styles and settings for each control type\n      switch (this.layoutNode.type) {\n        // Checkbox controls\n        case 'checkbox': case 'checkboxes':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'checkbox');\n        break;\n        case 'checkboxes-inline':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'checkbox');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, 'checkbox-inline');\n        break;\n        // Radio controls\n        case 'radio': case 'radios':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'radio');\n        break;\n        case 'radios-inline':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'radio');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, 'radio-inline');\n        break;\n        // Button sets - checkboxbuttons and radiobuttons\n        case 'checkboxbuttons': case 'radiobuttons':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'btn-group');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, 'btn');\n          this.widgetOptions.itemLabelHtmlClass = addClasses(\n            this.widgetOptions.itemLabelHtmlClass, this.options.style || 'btn-default');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'sr-only');\n        break;\n        // Single button controls\n        case 'button': case 'submit':\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'btn');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, this.options.style || 'btn-info');\n        break;\n        // Containers - arrays and fieldsets\n        case 'array': case 'fieldset': case 'section': case 'conditional':\n        case 'advancedfieldset': case 'authfieldset':\n        case 'selectfieldset': case 'optionfieldset':\n          this.options.messageLocation = 'top';\n        break;\n        case 'tabarray': case 'tabs':\n          this.widgetOptions.htmlClass = addClasses(\n            this.widgetOptions.htmlClass, 'tab-content');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'tab-pane');\n          this.widgetOptions.labelHtmlClass = addClasses(\n            this.widgetOptions.labelHtmlClass, 'nav nav-tabs');\n        break;\n        // 'Add' buttons - references\n        case '$ref':\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'btn pull-right');\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, this.options.style || 'btn-default');\n          this.options.icon = 'glyphicon glyphicon-plus';\n        break;\n        // Default - including regular inputs\n        default:\n          this.widgetOptions.fieldHtmlClass = addClasses(\n            this.widgetOptions.fieldHtmlClass, 'form-control');\n      }\n\n      if (this.formControl) {\n        this.updateHelpBlock(this.formControl.status);\n        this.formControl.statusChanges.subscribe(status => this.updateHelpBlock(status));\n\n        if (this.options.debug) {\n          const vars: any[] = [];\n          this.debugOutput = _.map(vars, thisVar => JSON.stringify(thisVar, null, 2)).join('\\n');\n        }\n      }\n      this.frameworkInitialized = true;\n    }\n\n  }\n\n  updateHelpBlock(status) {\n    this.options.helpBlock = status === 'INVALID' &&\n      this.options.enableErrorState && this.formControl.errors &&\n      (this.formControl.dirty || this.options.feedbackOnRender) ?\n        this.jsf.formatErrors(this.formControl.errors, this.options.validationMessages) :\n        this.options.description || this.options.help || null;\n  }\n\n  setTitle(): string {\n    switch (this.layoutNode.type) {\n      case 'button': case 'checkbox': case 'section': case 'help': case 'msg':\n      case 'submit': case 'message': case 'tabarray': case 'tabs': case '$ref':\n        return null;\n      case 'advancedfieldset':\n        this.widgetOptions.expandable = true;\n        this.widgetOptions.title = 'Advanced options';\n        return null;\n      case 'authfieldset':\n        this.widgetOptions.expandable = true;\n        this.widgetOptions.title = 'Authentication settings';\n        return null;\n      case 'fieldset':\n        this.widgetOptions.title = this.options.title;\n        return null;\n      default:\n        this.widgetOptions.title = null;\n        return this.jsf.setItemTitle(this);\n    }\n  }\n\n  removeItem() {\n    this.jsf.removeItem(this);\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { AngularFontAwesomeModule } from 'angular-font-awesome';\nimport {\n  MatAutocompleteModule, MatButtonModule, MatButtonToggleModule, MatCardModule,\n  MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatExpansionModule,\n  MatFormFieldModule, MatIconModule, MatInputModule, MatNativeDateModule,\n  MatRadioModule, MatSelectModule, MatSliderModule, MatSlideToggleModule,\n  MatStepperModule, MatTabsModule, MatTooltipModule,\n} from '@angular/material';\nexport const ANGULAR_MATERIAL_MODULES = [\n  MatAutocompleteModule, MatButtonModule, MatButtonToggleModule, MatCardModule,\n  MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatExpansionModule,\n  MatFormFieldModule, MatIconModule, MatInputModule, MatNativeDateModule,\n  MatRadioModule, MatSelectModule, MatSliderModule, MatSlideToggleModule,\n  MatStepperModule, MatTabsModule, MatTooltipModule,\n];\n/**\n * unused @angular/material modules:\n * MatDialogModule, MatGridListModule, MatListModule, MatMenuModule,\n * MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule,\n * MatSidenavModule, MatSnackBarModule, MatSortModule, MatTableModule,\n * MatToolbarModule,\n */\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { WidgetLibraryModule } from '../../widget-library/widget-library.module';\nimport { Framework } from '../framework';\nimport { MATERIAL_FRAMEWORK_COMPONENTS } from './index';\nimport { MaterialDesignFramework } from './material-design.framework';\nimport { CKEditorModule } from 'ngx-ckeditor';\nimport { DpDatePickerModule } from 'ng2-date-picker';\n\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule, FlexLayoutModule, AngularFontAwesomeModule,\n    ...ANGULAR_MATERIAL_MODULES, WidgetLibraryModule, CKEditorModule, DpDatePickerModule\n  ],\n  declarations:    [ ...MATERIAL_FRAMEWORK_COMPONENTS ],\n  exports:         [ ...MATERIAL_FRAMEWORK_COMPONENTS ],\n  entryComponents: [ ...MATERIAL_FRAMEWORK_COMPONENTS ]\n})\nexport class MaterialDesignFrameworkModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MaterialDesignFrameworkModule,\n      providers: [\n        { provide: Framework, useClass: MaterialDesignFramework, multi: true }\n      ]\n    };\n  }\n}\n",
    "import { FlexLayoutRootComponent } from './flex-layout-root.component';\nimport { FlexLayoutSectionComponent } from './flex-layout-section.component';\nimport { MaterialAddReferenceComponent } from './material-add-reference.component';\nimport { MaterialOneOfComponent } from './material-one-of.component';\nimport { MaterialButtonComponent } from './material-button.component';\nimport { MaterialButtonGroupComponent } from './material-button-group.component';\nimport { MaterialCheckboxComponent } from './material-checkbox.component';\nimport { MaterialCheckboxesComponent } from './material-checkboxes.component';\nimport { MaterialChipListComponent } from './material-chip-list.component';\nimport { MaterialCkeditorComponent } from './material-ckeditor.component';\nimport { MaterialDatepickerComponent } from './material-datepicker.component';\nimport { MaterialDatetimepickerComponent } from './material-datetimepicker.component';\nimport { MaterialFileComponent } from './material-file.component';\nimport { MaterialInputComponent } from './material-input.component';\nimport { MaterialNumberComponent } from './material-number.component';\nimport { MaterialRadiosComponent } from './material-radios.component';\nimport { MaterialSelectComponent } from './material-select.component';\nimport { MaterialSelectColorComponent } from './material-select-color.component';\nimport { MaterialSelectIconComponent } from './material-select-icon.component';\nimport { MaterialSliderComponent } from './material-slider.component';\nimport { MaterialStepperComponent } from './material-stepper.component';\nimport { MaterialTabsComponent } from './material-tabs.component';\nimport { MaterialTextareaComponent } from './material-textarea.component';\n\nimport { MaterialDesignFrameworkComponent } from './material-design-framework.component';\n\nexport const MATERIAL_FRAMEWORK_COMPONENTS = [\n  FlexLayoutRootComponent, FlexLayoutSectionComponent,\n  MaterialAddReferenceComponent, MaterialOneOfComponent,\n  MaterialButtonComponent, MaterialButtonGroupComponent,\n  MaterialCheckboxComponent, MaterialCheckboxesComponent,\n  MaterialChipListComponent, MaterialCkeditorComponent, MaterialDatepickerComponent,\n  MaterialDatetimepickerComponent, MaterialFileComponent, MaterialInputComponent, MaterialNumberComponent,\n  MaterialRadiosComponent, MaterialSelectComponent, MaterialSelectColorComponent, MaterialSelectIconComponent,\n  MaterialSliderComponent, MaterialStepperComponent, MaterialTabsComponent, MaterialTextareaComponent,\n  MaterialDesignFrameworkComponent\n];\n\nexport { FlexLayoutRootComponent } from './flex-layout-root.component';\nexport { FlexLayoutSectionComponent } from './flex-layout-section.component';\nexport { MaterialAddReferenceComponent } from './material-add-reference.component';\nexport { MaterialOneOfComponent } from './material-one-of.component';\nexport { MaterialButtonComponent } from './material-button.component';\nexport { MaterialButtonGroupComponent } from './material-button-group.component';\nexport { MaterialCheckboxComponent } from './material-checkbox.component';\nexport { MaterialCheckboxesComponent } from './material-checkboxes.component';\nexport { MaterialChipListComponent } from './material-chip-list.component';\nexport { MaterialCkeditorComponent } from './material-ckeditor.component';\nexport { MaterialDatepickerComponent } from './material-datepicker.component';\nexport { MaterialDatetimepickerComponent } from './material-datetimepicker.component';\nexport { MaterialFileComponent } from './material-file.component';\nexport { MaterialInputComponent } from './material-input.component';\nexport { MaterialNumberComponent } from './material-number.component';\nexport { MaterialRadiosComponent } from './material-radios.component';\nexport { MaterialSelectComponent } from './material-select.component';\nexport { MaterialSelectColorComponent } from './material-select-color.component';\nexport { MaterialSelectIconComponent } from './material-select-icon.component';\nexport { MaterialSliderComponent } from './material-slider.component';\nexport { MaterialStepperComponent } from './material-stepper.component';\nexport { MaterialTabsComponent } from './material-tabs.component';\nexport { MaterialTextareaComponent } from './material-textarea.component';\n\nexport { MaterialDesignFrameworkComponent } from './material-design-framework.component';\n",
    "import { Injectable } from '@angular/core';\n\nimport { Framework } from '../framework';\n\n// Material Design Framework\n// https://github.com/angular/material2\nimport { FlexLayoutRootComponent } from './flex-layout-root.component';\nimport { FlexLayoutSectionComponent } from './flex-layout-section.component';\nimport { MaterialAddReferenceComponent } from './material-add-reference.component';\nimport { MaterialOneOfComponent } from './material-one-of.component';\nimport { MaterialButtonComponent } from './material-button.component';\nimport { MaterialButtonGroupComponent } from './material-button-group.component';\nimport { MaterialCheckboxComponent } from './material-checkbox.component';\nimport { MaterialCheckboxesComponent } from './material-checkboxes.component';\nimport { MaterialChipListComponent } from './material-chip-list.component';\nimport { MaterialCkeditorComponent } from './material-ckeditor.component';\nimport { MaterialDatepickerComponent } from './material-datepicker.component';\nimport { MaterialDatetimepickerComponent } from './material-datetimepicker.component';\nimport { MaterialFileComponent } from './material-file.component';\nimport { MaterialInputComponent } from './material-input.component';\nimport { MaterialNumberComponent } from './material-number.component';\nimport { MaterialRadiosComponent } from './material-radios.component';\nimport { MaterialSelectComponent } from './material-select.component';\nimport { MaterialSelectColorComponent } from './material-select-color.component';\nimport { MaterialSelectIconComponent } from './material-select-icon.component';\nimport { MaterialSliderComponent } from './material-slider.component';\nimport { MaterialStepperComponent } from './material-stepper.component';\nimport { MaterialTabsComponent } from './material-tabs.component';\nimport { MaterialTextareaComponent } from './material-textarea.component';\nimport { MaterialDesignFrameworkComponent } from './material-design-framework.component';\n\n@Injectable()\nexport class MaterialDesignFramework extends Framework {\n  name = 'material-design';\n\n  framework = MaterialDesignFrameworkComponent;\n\n  stylesheets = [\n    '//fonts.googleapis.com/icon?family=Material+Icons',\n    '//fonts.googleapis.com/css?family=Roboto:300,500,700',\n  ];\n\n  widgets = {\n    'root':            FlexLayoutRootComponent,\n    'section':         FlexLayoutSectionComponent,\n    '$ref':            MaterialAddReferenceComponent,\n    'button':          MaterialButtonComponent,\n    'button-group':    MaterialButtonGroupComponent,\n    'checkbox':        MaterialCheckboxComponent,\n    'checkboxes':      MaterialCheckboxesComponent,\n    'chip-list':       MaterialChipListComponent,\n    'date':            MaterialDatepickerComponent,\n    'datetime':        MaterialDatetimepickerComponent,\n    'file':            MaterialFileComponent,\n    'number':          MaterialNumberComponent,\n    'one-of':          MaterialOneOfComponent,\n    'radios':          MaterialRadiosComponent,\n    'select':          MaterialSelectComponent,\n    'color':           MaterialSelectColorComponent,\n    'slider':          MaterialSliderComponent,\n    'stepper':         MaterialStepperComponent,\n    'tabs':            MaterialTabsComponent,\n    'text':            MaterialInputComponent,\n    'textarea':        MaterialTextareaComponent,\n    'ckeditor':        MaterialCkeditorComponent,\n    'icon':            MaterialSelectIconComponent,\n    'alt-date':        'date',\n    'any-of':          'one-of',\n    'card':            'section',\n    'expansion-panel': 'section',\n    'hidden':          'none',\n    'image':           'none',\n    'integer':         'number',\n    'radiobuttons':    'button-group',\n    'range':           'slider',\n    'submit':          'button',\n    'tagsinput':       'chip-list',\n    'wizard':          'stepper',\n  };\n}\n",
    "import { ChangeDetectorRef, Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport * as _ from 'lodash';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { hasOwn, isArray, isDefined, toTitleCase } from '../../shared';\n\n@Component({\n  selector: 'material-design-framework',\n  template: `\n    <div\n      [class.array-item]=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"\n      [orderable]=\"isOrderable\"\n      [dataIndex]=\"dataIndex\"\n      [layoutIndex]=\"layoutIndex\"\n      [layoutNode]=\"widgetLayoutNode\">\n      <svg *ngIf=\"showRemoveButton\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"18\" width=\"18\" viewBox=\"0 0 24 24\"\n        class=\"close-button\"\n        (click)=\"removeItem()\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"/>\n      </svg>\n      <select-widget-widget\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [layoutNode]=\"widgetLayoutNode\"></select-widget-widget>\n    </div>\n    <div class=\"spacer\" *ngIf=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"></div>`,\n  styles: [`\n    .array-item {\n      border-radius: 2px;\n      box-shadow: 0 3px 1px -2px rgba(0,0,0,.2),\n                  0 2px 2px  0   rgba(0,0,0,.14),\n                  0 1px 5px  0   rgba(0,0,0,.12);\n      padding: 6px;\n      position: relative;\n      transition: all 280ms cubic-bezier(.4, 0, .2, 1);\n    }\n    .close-button {\n      cursor: pointer;\n      position: absolute;\n      top: 6px;\n      right: 6px;\n      fill: rgba(0,0,0,.4);\n      visibility: hidden;\n      z-index: 500;\n    }\n    .close-button:hover { fill: rgba(0,0,0,.8); }\n    .array-item:hover > .close-button { visibility: visible; }\n    .spacer { margin: 6px 0; }\n    [draggable=true]:hover {\n      box-shadow: 0 5px 5px -3px rgba(0,0,0,.2),\n                  0 8px 10px 1px rgba(0,0,0,.14),\n                  0 3px 14px 2px rgba(0,0,0,.12);\n      cursor: move;\n      z-index: 10;\n    }\n    [draggable=true].drag-target-top {\n      box-shadow: 0 -2px 0 #000;\n      position: relative; z-index: 20;\n    }\n    [draggable=true].drag-target-bottom {\n      box-shadow: 0 2px 0 #000;\n      position: relative; z-index: 20;\n    }\n  `],\n})\nexport class MaterialDesignFrameworkComponent implements OnInit, OnChanges {\n  frameworkInitialized = false;\n  inputType: string;\n  options: any; // Options used in this framework\n  widgetLayoutNode: any; // layoutNode passed to child widget\n  widgetOptions: any; // Options passed to child widget\n  formControl: any = null;\n  parentArray: any = null;\n  isOrderable = false;\n  dynamicTitle: string = null;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  get showRemoveButton(): boolean {\n    if (!this.layoutNode || !this.widgetOptions.removable ||\n      this.widgetOptions.readonly || this.layoutNode.type === '$ref'\n    ) { return false; }\n    if (this.layoutNode.recursiveReference) { return true; }\n    if (!this.layoutNode.arrayItem || !this.parentArray) { return false; }\n    // If array length <= minItems, don't allow removing any items\n    return this.parentArray.items.length - 1 <= this.parentArray.options.minItems ? false :\n      // For removable list items, allow removing any item\n      this.layoutNode.arrayItemType === 'list' ? true :\n      // For removable tuple items, only allow removing last item in list\n      this.layoutIndex[this.layoutIndex.length - 1] === this.parentArray.items.length - 2;\n  }\n\n  ngOnInit() {\n    this.initializeFramework();\n  }\n\n  ngOnChanges() {\n    if (!this.frameworkInitialized) { this.initializeFramework(); }\n    if (this.dynamicTitle) { this.updateTitle(); }\n  }\n\n  initializeFramework() {\n    if (this.layoutNode) {\n      this.options = _.cloneDeep(this.layoutNode.options || {});\n      this.widgetLayoutNode = {\n        ...this.layoutNode,\n        options: _.cloneDeep(this.layoutNode.options || {})\n      };\n      this.widgetOptions = this.widgetLayoutNode.options;\n      this.formControl = this.jsf.getFormControl(this);\n\n      if (\n        isDefined(this.widgetOptions.minimum) &&\n        isDefined(this.widgetOptions.maximum) &&\n        this.widgetOptions.multipleOf >= 1\n      ) {\n        this.layoutNode.type = 'range';\n      }\n\n      if (\n        !['$ref', 'advancedfieldset', 'authfieldset', 'button', 'card',\n          'checkbox', 'expansion-panel', 'help', 'message', 'msg', 'section',\n          'submit', 'tabarray', 'tabs'].includes(this.layoutNode.type) &&\n        /{{.+?}}/.test(this.widgetOptions.title || '')\n      ) {\n        this.dynamicTitle = this.widgetOptions.title;\n        this.updateTitle();\n      }\n\n      if (this.layoutNode.arrayItem && this.layoutNode.type !== '$ref') {\n        this.parentArray = this.jsf.getParentNode(this);\n        if (this.parentArray) {\n          this.isOrderable =\n            this.parentArray.type.slice(0, 3) !== 'tab' &&\n            this.layoutNode.arrayItemType === 'list' &&\n            !this.widgetOptions.readonly &&\n            this.parentArray.options.orderable;\n        }\n      }\n\n      this.frameworkInitialized = true;\n    } else {\n      this.options = {};\n    }\n  }\n\n  updateTitle() {\n    this.widgetLayoutNode.options.title = this.jsf.parseText(\n      this.dynamicTitle,\n      this.jsf.getFormControlValue(this),\n      this.jsf.getFormControlGroup(this).value,\n      this.dataIndex[this.dataIndex.length - 1]\n    );\n  }\n\n  removeItem() {\n    this.jsf.removeItem(this);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-textarea-widget',\n  template: `\n    <mat-form-field\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n      [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <textarea matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [required]=\"options?.required\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [style.width]=\"'100%'\"\n        (blur)=\"options.showErrors = true\"></textarea>\n      <textarea matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [required]=\"options?.required\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [style.width]=\"'100%'\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\"\n        (blur)=\"options.showErrors = true\"></textarea>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialTextareaComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-tabs-widget',\n  template: `\n    <nav mat-tab-nav-bar\n      [attr.aria-label]=\"options?.label || options?.title || ''\"\n      [style.width]=\"'100%'\">\n        <a mat-tab-link *ngFor=\"let item of layoutNode?.items; let i = index\"\n          [active]=\"selectedItem === i\"\n          (click)=\"select(i)\">\n          <span *ngIf=\"showAddTab || item.type !== '$ref'\"\n            [innerHTML]=\"setTabTitle(item, i)\"></span>\n        </a>\n    </nav>\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass || ''\">\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"(options?.fieldHtmlClass || '') + ' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n    </div>`,\n  styles: [` a { cursor: pointer; } `],\n})\nexport class MaterialTabsComponent implements OnInit {\n  options: any;\n  itemCount: number;\n  selectedItem = 0;\n  showAddTab = true;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.itemCount = this.layoutNode.items.length - 1;\n    this.updateControl();\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      });\n      this.updateControl();\n    }\n    this.selectedItem = index;\n  }\n\n  updateControl() {\n    this.itemCount = this.layoutNode.items.length - 1;\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1];\n    this.showAddTab = lastItem.type === '$ref' &&\n      this.itemCount < (lastItem.options.maxItems || 1000);\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-stepper-widget',\n  template: ``,\n})\nexport class MaterialStepperComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-slider-widget',\n  template: `\n    <mat-slider thumbLabel *ngIf=\"boundControl\"\n      [formControl]=\"formControl\"\n      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n      [id]=\"'control' + layoutNode?._id\"\n      [max]=\"options?.maximum\"\n      [min]=\"options?.minimum\"\n      [step]=\"options?.multipleOf || options?.step || 'any'\"\n      [style.width]=\"'100%'\"\n      (blur)=\"options.showErrors = true\"></mat-slider>\n    <mat-slider thumbLabel *ngIf=\"!boundControl\"\n      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n      [disabled]=\"controlDisabled || options?.readonly\"\n      [id]=\"'control' + layoutNode?._id\"\n      [max]=\"options?.maximum\"\n      [min]=\"options?.minimum\"\n      [step]=\"options?.multipleOf || options?.step || 'any'\"\n      [style.width]=\"'100%'\"\n      [value]=\"controlValue\"\n      (blur)=\"options.showErrors = true\"\n      (change)=\"updateValue($event)\"></mat-slider>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n    styles: [` mat-error { font-size: 75%; } `],\n})\nexport class MaterialSliderComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  allowNegative = true;\n  allowDecimal = true;\n  allowExponents = false;\n  lastValidNumber = '';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { buildTitleMap, isArray } from '../../shared';\n\n@Component({\n  selector: 'material-select-icon-widget',\n  template: `\n    <mat-form-field\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n      [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <mat-select\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.name]=\"controlName\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [multiple]=\"options?.multiple\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [value]=\"controlValue\"\n        (blur)=\"options.showErrors = true\"\n        (selectionChange)=\"updateValue($event)\"\n        [(ngModel)]=\"controlValue\">\n        <mat-select-trigger *ngIf=\"controlValue\">\n          <i class=\"fa align-middle\" [ngClass]=\"controlValue\"></i>\n          <span class=\"icon-name\">{{ controlValue }}</span>\n        </mat-select-trigger>\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <mat-option\n            [value]=\"selectItem\">\n            <i class=\"fa align-middle\" [ngClass]=\"selectItem\"></i>\n            <span class=\"icon-name\">{{ selectItem }}</span>\n          </mat-option>\n        </ng-template>\n      </mat-select>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n\n    .icon-name {\n      margin-left:5px;\n    }`\n  ],\n})\nexport class MaterialSelectIconComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  selectList: any[] = [];\n  isArray = isArray;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  defaultIcons = [\n    \"fa-address-book\",\n    \"fa-archive\",\n    \"fa-car\",\n    \"fa-camera-retro\",\n    \"fa-cloud\",\n    \"fa-bathtub\",\n    \"fa-bullhorn\",\n    \"fa-comments\",\n    \"fa-clone\",\n    \"fa-columns\",\n    \"fa-code\",\n    \"fa-eraser\",\n    \"fa-eject\",\n    \"fa-desktop\",\n    \"fa-fire\",\n    \"fa-cube\",\n    \"fa-list-alt\",\n    \"fa-microchip\",\n    \"fa-fax\",\n    \"fa-flag\",\n    \"fa-print\",\n    \"fa-power-off\",\n    \"fa-bell\"\n  ]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.options.enum ? this.selectList = this.defaultIcons.concat(this.options.enum) : this.selectList = this.defaultIcons;\n    if(this.controlValue && this.selectList.indexOf(this.controlValue) === -1) {\n      this.selectList.push(this.controlValue);\n    }\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { buildTitleMap, isArray } from '../../shared';\n\n@Component({\n  selector: 'material-select-color-widget',\n  template: `\n    <mat-form-field\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n      [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <mat-select\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.name]=\"controlName\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [multiple]=\"options?.multiple\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [value]=\"controlValue\"\n        (blur)=\"options.showErrors = true\"\n        (selectionChange)=\"updateValue($event)\"\n        [(ngModel)]=\"controlValue\">\n        <mat-select-trigger *ngIf=\"controlValue\">\n          <span class=\"color-box\" [style.background-color]=\"controlValue\"></span>\n          <span>{{ controlValue }}</span>\n        </mat-select-trigger>\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <mat-option\n            [value]=\"selectItem\">\n            <span class=\"color-box\" [style.background-color]=\"selectItem\"></span>\n            <span>{{ selectItem }}</span>\n          </mat-option>\n        </ng-template>\n      </mat-select>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n\n    .color-box {\n      display:inline-block;\n      height:14px;\n      width:14px;\n      margin-right:4px;\n      border:1px solid #000;\n    }`\n  ],\n})\nexport class MaterialSelectColorComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  selectList: any[] = [];\n  isArray = isArray;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  defaultColors = [\n    \"#e6194b\",\n    \"#3cb44b\",\n    \"#ffe119\",\n    \"#0082c8\",\n    \"#f58231\",\n    \"#911eb4\",\n    \"#46f0f0\",\n    \"#f032e6\",\n    \"#d2f53c\",\n    \"#fabebe\",\n    \"#008080\",\n    \"#e6beff\",\n    \"#aa6e28\",\n    \"#fffac8\",\n    \"#800000\",\n    \"#aaffc3\",\n    \"#808000\",\n    \"#ffd8b1\",\n    \"#000080\",\n    \"#808080\",\n    \"#FFFFFF\",\n    \"#000000\"\n  ]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.options.enum ? this.selectList = this.defaultColors.concat(this.options.enum) : this.selectList = this.defaultColors;\n    if(this.controlValue && this.selectList.indexOf(this.controlValue) === -1) {\n      this.selectList.push(this.controlValue);\n    }\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { buildTitleMap, isArray } from '../../shared';\n\n@Component({\n  selector: 'material-select-widget',\n  template: `\n    <mat-form-field\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n      [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <mat-select *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.name]=\"controlName\"\n        [id]=\"'control' + layoutNode?._id\"\n        [multiple]=\"options?.multiple\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        (blur)=\"options.showErrors = true\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </mat-option>\n          <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <mat-option *ngFor=\"let subItem of selectItem.items\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </mat-option>\n          </mat-optgroup>\n        </ng-template>\n      </mat-select>\n      <mat-select *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.name]=\"controlName\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [multiple]=\"options?.multiple\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [value]=\"controlValue\"\n        (blur)=\"options.showErrors = true\"\n        (selectionChange)=\"updateValue($event)\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n            [attr.selected]=\"selectItem?.value === controlValue\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </mat-option>\n          <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <mat-option *ngFor=\"let subItem of selectItem.items\"\n              [attr.selected]=\"subItem?.value === controlValue\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </mat-option>\n          </mat-optgroup>\n        </ng-template>\n      </mat-select>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialSelectComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  selectList: any[] = [];\n  isArray = isArray;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    );\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { buildTitleMap } from '../../shared';\n\n@Component({\n  selector: 'material-radios-widget',\n  template: `\n    <div>\n      <div *ngIf=\"options?.title\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id\"\n          [class]=\"options?.labelHtmlClass || ''\"\n          [style.display]=\"options?.notitle ? 'none' : ''\"\n          [innerHTML]=\"options?.title\"></label>\n      </div>\n      <mat-radio-group *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [style.flex-direction]=\"flexDirection\"\n        [name]=\"controlName\"\n        (blur)=\"options.showErrors = true\">\n        <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n          [value]=\"radioItem?.value\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </mat-radio-button>\n      </mat-radio-group>\n      <mat-radio-group *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [style.flex-direction]=\"flexDirection\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\">\n        <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n          [value]=\"radioItem?.value\"\n          (click)=\"updateValue(radioItem?.value)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </mat-radio-button>\n      </mat-radio-group>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>`,\n  styles: [`\n    mat-radio-group { display: inline-flex; }\n    mat-radio-button { margin: 2px; }\n    mat-error { font-size: 75%; }\n  `]\n})\nexport class MaterialRadiosComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  flexDirection = 'column';\n  radiosList: any[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    if (this.layoutNode.type === 'radios-inline') {\n      this.flexDirection = 'row';\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    );\n    this.jsf.initializeControl(this, !this.options.readonly);\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-number-widget',\n  template: `\n    <mat-form-field\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n      [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <input matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.max]=\"options?.maximum\"\n        [attr.min]=\"options?.minimum\"\n        [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"'number'\"\n        (blur)=\"options.showErrors = true\">\n      <input matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.max]=\"options?.maximum\"\n        [attr.min]=\"options?.minimum\"\n        [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"'number'\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\"\n        (blur)=\"options.showErrors = true\">\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"layoutNode?.type === 'range'\" align=\"start\"\n        [innerHTML]=\"controlValue\"></mat-hint>\n      \n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\n\n// removed from before mat-autocomplete\n// <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n//         align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\nexport class MaterialNumberComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  allowNegative = true;\n  allowDecimal = true;\n  allowExponents = false;\n  lastValidNumber = '';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (this.layoutNode.dataType === 'integer') { this.allowDecimal = false; }\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-input-widget',\n  template: `\n    <mat-form-field\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n      [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <input matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.description : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"layoutNode?.type\"\n        (blur)=\"options.showErrors = true\">\n      <input matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.description : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\"\n        (blur)=\"options.showErrors = true\">\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      \n      <mat-autocomplete *ngIf=\"options?.typeahead?.source\">\n        <mat-option *ngFor=\"let word of options?.typeahead?.source\"\n          [value]=\"word\">{{word}}</mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\n\n// removed from before mat-autocomplete\n// <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n//         align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\nexport class MaterialInputComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: string;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-file-widget',\n  template: ``,\n})\nexport class MaterialFileComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit, OnChanges, ViewChild } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { dateToString, hasOwn, stringToDate } from '../../shared';\nimport { DatePickerComponent } from 'ng2-date-picker';\n\nimport moment from 'moment';\n\n@Component({\n  selector: 'material-datetimepicker-widget',\n  template: `\n  <div class=\"datepicker-wrapper\">\n    <div class=\"datepicker-title\">\n      {{ options?.title }}\n    </div>\n    <dp-date-picker #myDatePicker\n      [(ngModel)]=\"dateValue\"\n      [mode]=\"mode\"\n      [config]=\"datePickerConfig\"\n      [theme]=\"theme\"\n      [placeholder]=\"options?.title\"\n      (onChange)=\"updateValue($event)\">\n    </dp-date-picker>\n    <mat-icon (click)=\"open()\">calendar_today</mat-icon>\n  </div>\n  `,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n\n    dp-date-picker {\n      float: left;\n    }\n\n    mat-icon {\n      padding-top: 2px;\n      cursor: pointer;\n    }\n\n    .datepicker-title {\n      font-size: 12px;\n      color: rgba(0, 0, 0, 0.54);\n      padding: 2px 0;\n    }\n\n    .datepicker-wrapper {\n      margin-bottom: 10px;\n    }\n\n  `],\n})\nexport class MaterialDatetimepickerComponent implements OnInit, OnChanges {\n\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  dateValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  mode: string;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @ViewChild('myDatePicker') datePicker: DatePickerComponent;\n\n  theme = 'dp-material dp-main';\n\n  datePickerConfig = {\n    firstDayOfWeek: 'su',\n    format: 'YYYY-MM-DD HH:mm:ss',\n    monthFormat: 'MMM YYYY',\n    disableKeypress: false,\n    allowMultiSelect: false,\n    closeOnSelect: true,\n    closeOnSelectDelay: 100,\n    openOnFocus: true,\n    openOnClick: true,\n    onOpenDelay: 0,\n    weekDayFormat: 'ddd',\n    appendTo: document.body,\n    showNearMonthDays: true,\n    showWeekNumbers: false,\n    enableMonthSelector: true,\n    yearFormat: 'YYYY',\n    showGoToCurrent: true,\n    dayBtnFormat: 'DD',\n    monthBtnFormat: 'MMM',\n    hours12Format: 'hh',\n    hours24Format: 'HH',\n    meridiemFormat: 'A',\n    minutesFormat: 'mm',\n    minutesInterval: 1,\n    secondsFormat: 'ss',\n    secondsInterval: 1,\n    showSeconds: true,\n    showTwentyFourHours: true,\n    timeSeparator: ':',\n    multipleYearsNavigateBy: 10,\n    showMultipleYearsNavigation: false,\n    locale: moment.locale(),\n    hideInputContainer: false,\n    returnedValueType: String,\n    unSelectOnClick: true,\n    hideOnOutsideClick: true\n  };\n\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    this.options.format ? this.datePickerConfig.format = this.options.format : this.datePickerConfig.format = 'YYYY-MM-DD HH:mm:ss';\n    this.options.mode ? this.mode = this.options.mode : this.mode = 'daytime';\n    this.setControlDate(this.controlValue);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  ngOnChanges() {\n    this.setControlDate(this.controlValue);\n  }\n\n  setControlDate(dateString: string) {\n    dateString ? dateString : dateString = moment(new Date().getTime()).format(this.datePickerConfig.format);\n    this.dateValue = moment(dateString, this.datePickerConfig.format);\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.dateValue = moment(event[0]).format(this.datePickerConfig.format);\n    this.jsf.updateValue(this, this.dateValue);\n  }\n\n  open() {\n    this.datePicker.api.open();\n  }\n\n  close() {\n    this.datePicker.api.close();\n  }\n}\n",
    "import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { dateToString, hasOwn, stringToDate } from '../../shared';\n\n@Component({\n  selector: 'material-datepicker-widget',\n  template: `\n    <mat-form-field [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <input matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [id]=\"'control' + layoutNode?._id\"\n        [max]=\"options?.maximum\"\n        [matDatepicker]=\"picker\"\n        [min]=\"options?.minimum\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        (blur)=\"options.showErrors = true\">\n      <input matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [max]=\"options?.maximum\"\n        [matDatepicker]=\"picker\"\n        [min]=\"options?.minimum\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [value]=\"dateValue\"\n        (blur)=\"options.showErrors = true\"\n        (change)=\"updateValue($event)\"\n        (input)=\"updateValue($event)\">\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    </mat-form-field>\n    <mat-datepicker #picker></mat-datepicker>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialDatepickerComponent implements OnInit, OnChanges {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  dateValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    this.setControlDate(this.controlValue);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  ngOnChanges() {\n    this.setControlDate(this.controlValue);\n  }\n\n  setControlDate(dateString: string) {\n    this.dateValue = stringToDate(dateString);\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, dateToString(event, this.options));\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-ckeditor-widget',\n  template:      \n    `<div\n    [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <ck-editor (ngModelChange)=\"updateValue($event)\" [(ngModel)]=\"controlValue\" [name]=\"controlName\" [config]=\"config\">\n      </ck-editor>\n       <button mat-mini-fab *ngIf=\"options?.comments\" color=\"primary\" (click)=\"commentsClick()\"><mat-icon>comment</mat-icon></button>\n    </div>\n    `\n})\nexport class MaterialCkeditorComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  config = {\n    mathJaxLib: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML',    \n    toolbarGroups: [\n      { name: 'clipboard',   groups: [ 'clipboard', 'undo' ] },\n      { name: 'editing',     groups: [ 'find', 'selection', 'spellchecker' ] },\n      { name: 'links' },\n      { name: 'insert' },\n      { name: 'forms' },\n      { name: 'tools' },\n      { name: 'document',\n         groups: [ 'mode', 'document', 'doctools' ] },\n      { name: 'others' },\n      '/',\n      { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n      { name: 'paragraph',   groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ] },\n      { name: 'styles' },\n      { name: 'colors' },\n      { name: 'about' }\n    ],\n\n    // Remove some buttons provided by the standard plugins, which are\n    // not needed in the Standard(s) toolbar.\n    removeButtons: 'Underline',\n\n    // Set the most common block elements.\n    format_tags: 'p;h1;h2;h3;pre',\n\n    // Simplify the dialog windows.\n    removeDialogTabs: 'image:advanced;link:advanced',\n    filebrowserBrowseUrl: '/browser/browse.php',\n    filebrowserUploadUrl: '/uploader/upload.php'\n  }\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  commentsClick() {\n    console.log(this.layoutNode.dataPointer);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-chip-list-widget',\n  template: ``,\n})\nexport class MaterialChipListComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormArray, AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService, TitleMapItem } from '../../json-schema-form.service';\nimport { buildFormGroup, buildTitleMap, hasOwn, JsonPointer } from '../../shared';\n\n// TODO: Change this to use a Selection List instead?\n// https://material.angular.io/components/list/overview\n\n@Component({\n  selector: 'material-checkboxes-widget',\n  template: `\n    <div>\n      <mat-checkbox type=\"checkbox\"\n        [checked]=\"allChecked\"\n        [color]=\"options?.color || 'primary'\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [indeterminate]=\"someChecked\"\n        [name]=\"options?.name\"\n        (blur)=\"options.showErrors = true\"\n        (change)=\"updateAllValues($event)\">\n        <span class=\"checkbox-name\" [innerHTML]=\"options?.name\"></span>\n      </mat-checkbox>\n      <label *ngIf=\"options?.title\"\n        class=\"title\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <ul class=\"checkbox-list\" [class.horizontal-list]=\"horizontalList\">\n        <li *ngFor=\"let checkboxItem of checkboxList\"\n          [class]=\"options?.htmlClass || ''\">\n          <mat-checkbox type=\"checkbox\"\n            [(ngModel)]=\"checkboxItem.checked\"\n            [color]=\"options?.color || 'primary'\"\n            [disabled]=\"controlDisabled || options?.readonly\"\n            [name]=\"checkboxItem?.name\"\n            (blur)=\"options.showErrors = true\"\n            (change)=\"updateValue()\">\n            <span class=\"checkbox-name\" [innerHTML]=\"checkboxItem?.name\"></span>\n          </mat-checkbox>\n        </li>\n      </ul>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>`,\n  styles: [`\n    .title { font-weight: bold; }\n    .checkbox-list { list-style-type: none; }\n    .horizontal-list > li { display: inline-block; margin-right: 10px; zoom: 1; }\n    .checkbox-name { white-space: nowrap; }\n    mat-error { font-size: 75%; }\n  `],\n})\nexport class MaterialCheckboxesComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  horizontalList = false;\n  formArray: AbstractControl;\n  checkboxList: TitleMapItem[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.horizontalList = this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons';\n    this.jsf.initializeControl(this);\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    );\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this);\n      for (const checkboxItem of this.checkboxList) {\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value);\n      }\n    }\n  }\n\n  get allChecked(): boolean {\n    return this.checkboxList.filter(t => t.checked).length === this.checkboxList.length;\n  }\n\n  get someChecked(): boolean {\n    const checkedItems = this.checkboxList.filter(t => t.checked).length;\n    return checkedItems > 0 && checkedItems < this.checkboxList.length;\n  }\n\n  updateValue() {\n    this.options.showErrors = true;\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList);\n    }\n  }\n\n  updateAllValues(event: any) {\n    this.options.showErrors = true;\n    this.checkboxList.forEach(t => t.checked = event.checked);\n    this.updateValue();\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { hasOwn } from './../../shared/utility.functions';\n\n@Component({\n  selector: 'material-checkbox-widget',\n  template: `\n    <mat-checkbox *ngIf=\"boundControl && !showSlideToggle\"\n      [formControl]=\"formControl\"\n      labelPosition=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-checkbox>\n    <mat-checkbox *ngIf=\"!boundControl && !showSlideToggle\"\n      labelPosition=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [disabled]=\"controlDisabled || options?.readonly\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      [checked]=\"isChecked\"\n      (blur)=\"options.showErrors = true\"\n      (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-checkbox>\n    <mat-slide-toggle *ngIf=\"boundControl && showSlideToggle\"\n      [formControl]=\"formControl\"\n      align=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-slide-toggle>\n    <mat-slide-toggle *ngIf=\"!boundControl && showSlideToggle\"\n      align=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [disabled]=\"controlDisabled || options?.readonly\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      [checked]=\"isChecked\"\n      (blur)=\"options.showErrors = true\"\n      (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-slide-toggle>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    .checkbox-name { white-space: nowrap; }\n    mat-error { font-size: 75%; }\n  `],\n})\nexport class MaterialCheckboxComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  trueValue: any = true;\n  falseValue: any = false;\n  showSlideToggle = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = false;\n      this.jsf.updateValue(this, this.falseValue);\n    }\n    if (this.layoutNode.type === 'slide-toggle' ||\n      this.layoutNode.format === 'slide-toggle'\n    ) {\n      this.showSlideToggle = true;\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.checked ? this.trueValue : this.falseValue);\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue;\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { buildTitleMap } from '../../shared';\n\n@Component({\n  selector: 'material-button-group-widget',\n  template: `\n    <div>\n      <div *ngIf=\"options?.title\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id\"\n          [class]=\"options?.labelHtmlClass || ''\"\n          [style.display]=\"options?.notitle ? 'none' : ''\"\n          [innerHTML]=\"options?.title\"></label>\n      </div>\n      <mat-button-toggle-group\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\"\n        [vertical]=\"!!options.vertical\">\n        <mat-button-toggle *ngFor=\"let radioItem of radiosList\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n          [value]=\"radioItem?.value\"\n          (click)=\"updateValue(radioItem?.value)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </mat-button-toggle>\n      </mat-button-toggle-group>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>`,\n    styles: [` mat-error { font-size: 75%; } `],\n})\nexport class MaterialButtonGroupComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  radiosList: any[] = [];\n  vertical = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    );\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { hasOwn } from '../../shared/utility.functions';\n\n@Component({\n  selector: 'material-button-widget',\n  template: `\n    <div class=\"button-row\" [class]=\"options?.htmlClass || ''\">\n      <button mat-raised-button\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [color]=\"options?.color || 'primary'\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n        <mat-icon *ngIf=\"options?.icon\" class=\"mat-24\">{{options?.icon}}</mat-icon>\n        <span *ngIf=\"options?.title\" [innerHTML]=\"options?.title\"></span>\n      </button>\n    </div>`,\n    styles: [` button { margin-top: 10px; } `],\n})\nexport class MaterialButtonComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled;\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid;\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid);\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event);\n    } else {\n      this.jsf.updateValue(this, event.target.value);\n    }\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-one-of-widget',\n  template: ``,\n})\nexport class MaterialOneOfComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'material-add-reference-widget',\n  template: `\n    <section [class]=\"options?.htmlClass || ''\" align=\"start\">\n      <button mat-mini-fab *ngIf=\"showAddButton\" \n        style=\"margin-bottom: 10px;\"\n        [color]=\"options?.color || 'accent'\"\n        [disabled]=\"options?.readonly\"\n        (click)=\"addItem($event)\"\n        matTooltip=\"{{options?.title}}\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </section>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MaterialAddReferenceComponent implements OnInit {\n  options: any;\n  itemCount: number;\n  previousLayoutIndex: number[];\n  previousDataIndex: number[];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems;\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    this.jsf.addItem(this);\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this),\n    };\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { toTitleCase } from '../../shared';\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\n\n@Component({\n  selector: 'flex-layout-section-widget',\n  template: `\n    <div *ngIf=\"containerType === 'div'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\">\n      <label *ngIf=\"sectionTitle\"\n        [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n        [innerHTML]=\"sectionTitle\"\n        (click)=\"toggleExpanded()\"></label>\n      <flex-layout-root-widget *ngIf=\"expanded\"\n        [layout]=\"layoutNode.items\"\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [isFlexItem]=\"getFlexAttribute('is-flex')\"\n        [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n        [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n        [style.display]=\"getFlexAttribute('display')\"\n        [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n        [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n        [style.justify-content]=\"getFlexAttribute('justify-content')\"\n        [style.align-items]=\"getFlexAttribute('align-items')\"\n        [style.align-content]=\"getFlexAttribute('align-content')\"\n        [fxLayout]=\"getFlexAttribute('layout')\"\n        [fxLayoutGap]=\"options?.fxLayoutGap\"\n        [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n        [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>\n\n    <fieldset *ngIf=\"containerType === 'fieldset'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\"\n      [disabled]=\"options?.readonly\">\n      <legend *ngIf=\"sectionTitle\"\n        [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n        [innerHTML]=\"sectionTitle\"\n        (click)=\"toggleExpanded()\"></legend>\n      <flex-layout-root-widget *ngIf=\"expanded\"\n        [layout]=\"layoutNode.items\"\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [isFlexItem]=\"getFlexAttribute('is-flex')\"\n        [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n        [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n        [style.display]=\"getFlexAttribute('display')\"\n        [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n        [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n        [style.justify-content]=\"getFlexAttribute('justify-content')\"\n        [style.align-items]=\"getFlexAttribute('align-items')\"\n        [style.align-content]=\"getFlexAttribute('align-content')\"\n        [fxLayout]=\"getFlexAttribute('layout')\"\n        [fxLayoutGap]=\"options?.fxLayoutGap\"\n        [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n        [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </fieldset>\n\n    <mat-card *ngIf=\"containerType === 'card'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\">\n      <mat-card-header *ngIf=\"sectionTitle\">\n        <legend\n          [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n          [innerHTML]=\"sectionTitle\"\n          (click)=\"toggleExpanded()\"></legend>\n      </mat-card-header>\n      <mat-card-content *ngIf=\"expanded\">\n        <fieldset [disabled]=\"options?.readonly\">\n          <flex-layout-root-widget *ngIf=\"expanded\"\n            [layout]=\"layoutNode.items\"\n            [dataIndex]=\"dataIndex\"\n            [layoutIndex]=\"layoutIndex\"\n            [isFlexItem]=\"getFlexAttribute('is-flex')\"\n            [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n            [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n            [style.display]=\"getFlexAttribute('display')\"\n            [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n            [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n            [style.justify-content]=\"getFlexAttribute('justify-content')\"\n            [style.align-items]=\"getFlexAttribute('align-items')\"\n            [style.align-content]=\"getFlexAttribute('align-content')\"\n            [fxLayout]=\"getFlexAttribute('layout')\"\n            [fxLayoutGap]=\"options?.fxLayoutGap\"\n            [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n            [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          </fieldset>\n      </mat-card-content>\n      <mat-card-footer>\n        <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n          [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </mat-card-footer>\n    </mat-card>\n\n    <mat-expansion-panel *ngIf=\"containerType === 'expansion-panel'\"\n      [expanded]=\"expanded\"\n      [hideToggle]=\"!options?.expandable\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <legend *ngIf=\"sectionTitle\"\n            [class]=\"options?.labelHtmlClass\"\n            [innerHTML]=\"sectionTitle\"\n            (click)=\"toggleExpanded()\"></legend>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <fieldset [disabled]=\"options?.readonly\">\n        <flex-layout-root-widget *ngIf=\"expanded\"\n          [layout]=\"layoutNode.items\"\n          [dataIndex]=\"dataIndex\"\n          [layoutIndex]=\"layoutIndex\"\n          [isFlexItem]=\"getFlexAttribute('is-flex')\"\n          [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n          [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n          [style.display]=\"getFlexAttribute('display')\"\n          [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n          [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n          [style.justify-content]=\"getFlexAttribute('justify-content')\"\n          [style.align-items]=\"getFlexAttribute('align-items')\"\n          [style.align-content]=\"getFlexAttribute('align-content')\"\n          [fxLayout]=\"getFlexAttribute('layout')\"\n          [fxLayoutGap]=\"options?.fxLayoutGap\"\n          [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n          [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n      </fieldset>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </mat-expansion-panel>`,\n  styles: [`\n    fieldset { border: 0; margin: 0; padding: 0; }\n    .legend { font-weight: bold; }\n    .expandable > .legend:before { content: '▶'; padding-right: .3em; }\n    .expanded > .legend:before { content: '▼'; padding-right: .2em; }\n  `],\n})\nexport class FlexLayoutSectionComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  expanded = true;\n  containerType = 'div';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this);\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this);\n    this.options = this.layoutNode.options || {};\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable;\n    switch (this.layoutNode.type) {\n      case 'section': case 'array': case 'fieldset': case 'advancedfieldset':\n      case 'authfieldset': case 'optionfieldset': case 'selectfieldset':\n        this.containerType = 'fieldset';\n      break;\n      case 'card':\n        this.containerType = 'card';\n      break;\n      case 'expansion-panel':\n        this.containerType = 'expansion-panel';\n      break;\n      default: // 'div', 'flex', 'tab', 'conditional', 'actions'\n        this.containerType = 'div';\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) { this.expanded = !this.expanded; }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in flex-layout-root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex';\n    // if (attribute !== 'flex' && !flexActive) { return null; }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive;\n      case 'display':\n        return flexActive ? 'flex' : 'initial';\n      case 'flex-direction': case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute);\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index];\n      case 'justify-content': case 'align-items': case 'align-content':\n        return this.options[attribute];\n      case 'layout':\n        return (this.options.fxLayout || 'row') +\n          this.options.fxLayoutWrap ? ' ' + this.options.fxLayoutWrap : '';\n    }\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { hasValue, JsonPointer } from '../../shared';\n\n@Component({\n  selector: 'flex-layout-root-widget',\n  template: `\n    <div *ngFor=\"let layoutNode of layout; let i = index\"\n      [class.form-flex-item]=\"isFlexItem\"\n      [style.flex-grow]=\"getFlexAttribute(layoutNode, 'flex-grow')\"\n      [style.flex-shrink]=\"getFlexAttribute(layoutNode, 'flex-shrink')\"\n      [style.flex-basis]=\"getFlexAttribute(layoutNode, 'flex-basis')\"\n      [style.align-self]=\"(layoutNode?.options || {})['align-self']\"\n      [style.order]=\"layoutNode?.options?.order\"\n      [fxFlex]=\"layoutNode?.options?.fxFlex\"\n      [fxFlexOrder]=\"layoutNode?.options?.fxFlexOrder\"\n      [fxFlexOffset]=\"layoutNode?.options?.fxFlexOffset\"\n      [fxFlexAlign]=\"layoutNode?.options?.fxFlexAlign\">\n      <select-framework-widget *ngIf=\"showWidget(layoutNode)\"\n        [dataIndex]=\"layoutNode?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutNode\"></select-framework-widget>\n    <div>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class FlexLayoutRootComponent {\n  @Input() dataIndex: number[];\n  @Input() layoutIndex: number[];\n  @Input() layout: any[];\n  @Input() isFlexItem = false;\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  removeItem(item) {\n    this.jsf.removeItem(item);\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in flex-layout-section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute);\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index];\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex);\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { FrameworkLibraryService } from './framework-library/framework-library.service';\nimport { WidgetLibraryModule } from './widget-library/widget-library.module';\nimport { WidgetLibraryService } from './widget-library/widget-library.service';\n\nimport { JsonSchemaFormComponent } from './json-schema-form.component';\n\nimport { JsonSchemaFormService } from './json-schema-form.service';\n\nimport { NoFrameworkComponent } from './framework-library/no-framework/no-framework.component';\nimport { Framework } from './framework-library/framework';\nimport { NoFramework } from './framework-library/no-framework/no.framework';\nimport { NoFrameworkModule } from './framework-library/no-framework/no-framework.module';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule,\n    WidgetLibraryModule, NoFrameworkModule\n  ],\n  declarations: [ JsonSchemaFormComponent ],\n  exports: [ JsonSchemaFormComponent, WidgetLibraryModule ]\n})\nexport class JsonSchemaFormModule {\n  static forRoot(...frameworks): ModuleWithProviders {\n    const loadFrameworks = frameworks.length ?\n      frameworks.map(framework => framework.forRoot().providers[0]) :\n      [{ provide: Framework, useClass: NoFramework, multi: true }];\n    return {\n      ngModule: JsonSchemaFormModule,\n      providers: [\n        JsonSchemaFormService, FrameworkLibraryService, WidgetLibraryService,\n        ...loadFrameworks\n      ]\n    };\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JsonSchemaFormService } from '../../json-schema-form.service';\nimport { WidgetLibraryModule } from '../../widget-library/widget-library.module';\nimport { Framework } from '../framework';\n// No framework - plain HTML controls (styles from form layout only)\nimport { NoFrameworkComponent } from './no-framework.component';\nimport { NoFramework } from './no.framework';\n\n@NgModule({\n  imports:         [ CommonModule, WidgetLibraryModule ],\n  declarations:    [ NoFrameworkComponent ],\n  exports:         [ NoFrameworkComponent ],\n  entryComponents: [ NoFrameworkComponent ]\n})\nexport class NoFrameworkModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NoFrameworkModule,\n      providers: [\n        { provide: Framework, useClass: NoFramework, multi: true }\n      ]\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { Framework } from '../framework';\n\n// No framework - plain HTML controls (styles from form layout only)\nimport { NoFrameworkComponent } from './no-framework.component';\n\n@Injectable()\nexport class NoFramework extends Framework {\n  name = 'no-framework';\n\n  framework = NoFrameworkComponent;\n}\n",
    "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'no-framework',\n  template: `\n    <select-widget-widget\n      [dataIndex]=\"dataIndex\"\n      [layoutIndex]=\"layoutIndex\"\n      [layoutNode]=\"layoutNode\"></select-widget-widget>`,\n})\nexport class NoFrameworkComponent {\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { OrderableDirective } from '../shared/orderable.directive';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\nimport { BASIC_WIDGETS } from './index';\n\n\nimport { CKEditorModule } from 'ngx-ckeditor';\nimport { DpDatePickerModule } from 'ng2-date-picker';\n\n@NgModule({\n  imports:         [ CommonModule, FormsModule, ReactiveFormsModule, CKEditorModule, DpDatePickerModule ],\n  declarations:    [ ...BASIC_WIDGETS, OrderableDirective ],\n  exports:         [ ...BASIC_WIDGETS, OrderableDirective ],\n  entryComponents: [ ...BASIC_WIDGETS ],\n  providers:       [ JsonSchemaFormService ]\n})\nexport class WidgetLibraryModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: WidgetLibraryModule,\n      providers: [ JsonSchemaFormService ]\n    };\n  }\n}\n",
    "import { AddReferenceComponent } from './add-reference.component';\nimport { OneOfComponent } from './one-of.component';\nimport { ButtonComponent } from './button.component';\nimport { CheckboxComponent } from './checkbox.component';\nimport { CheckboxesComponent } from './checkboxes.component';\nimport { FileComponent } from './file.component';\nimport { HiddenComponent } from './hidden.component';\nimport { InputComponent } from './input.component';\nimport { MessageComponent } from './message.component';\nimport { NoneComponent } from './none.component';\nimport { NumberComponent } from './number.component';\nimport { RadiosComponent } from './radios.component';\nimport { RootComponent } from './root.component';\nimport { SectionComponent } from './section.component';\nimport { SelectComponent } from './select.component';\nimport { SelectFrameworkComponent } from './select-framework.component';\nimport { SelectWidgetComponent } from './select-widget.component';\nimport { SubmitComponent } from './submit.component';\nimport { CkeditorComponent } from './ckeditor.component';\nimport { TabComponent } from './tab.component';\nimport { TabsComponent } from './tabs.component';\nimport { TemplateComponent } from './template.component';\nimport { TextareaComponent } from './textarea.component';\nimport { DatetimepickerComponent } from './datetimepicker.component';\n\n\nexport const BASIC_WIDGETS = [\n  AddReferenceComponent, OneOfComponent, ButtonComponent, CheckboxComponent,\n  CheckboxesComponent, FileComponent, HiddenComponent, InputComponent,\n  MessageComponent, NoneComponent, NumberComponent, RadiosComponent,\n  RootComponent, SectionComponent, CkeditorComponent, SelectComponent, SelectFrameworkComponent,\n  SelectWidgetComponent, SubmitComponent, TabComponent, TabsComponent,\n  TemplateComponent, TextareaComponent, DatetimepickerComponent\n];\n\nexport { AddReferenceComponent } from './add-reference.component';\nexport { OneOfComponent } from './one-of.component';\nexport { ButtonComponent } from './button.component';\nexport { CheckboxComponent } from './checkbox.component';\nexport { CheckboxesComponent } from './checkboxes.component';\nexport { FileComponent } from './file.component';\nexport { HiddenComponent } from './hidden.component';\nexport { InputComponent } from './input.component';\nexport { MessageComponent } from './message.component';\nexport { NoneComponent } from './none.component';\nexport { NumberComponent } from './number.component';\nexport { RadiosComponent } from './radios.component';\nexport { RootComponent } from './root.component';\nexport { SectionComponent } from './section.component';\nexport { CkeditorComponent } from './ckeditor.component';\nexport { SelectComponent } from './select.component';\nexport { SelectFrameworkComponent } from './select-framework.component';\nexport { SelectWidgetComponent } from './select-widget.component';\nexport { SubmitComponent } from './submit.component';\nexport { TabComponent } from './tab.component';\nexport { TabsComponent } from './tabs.component';\nexport { TemplateComponent } from './template.component';\nexport { TextareaComponent } from './textarea.component';\nexport { DatetimepickerComponent } from './datetimepicker.component';\n",
    "import { Component, Input, OnInit } from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'tab-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <root-widget\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [layout]=\"layoutNode.items\"></root-widget>\n    </div>`,\n})\nexport class TabComponent implements OnInit {\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'hidden-widget',\n  template: `\n    <input *ngIf=\"boundControl\"\n      [formControl]=\"formControl\"\n      [id]=\"'control' + layoutNode?._id\"\n      [name]=\"controlName\"\n      type=\"hidden\">\n    <input *ngIf=\"!boundControl\"\n      [disabled]=\"controlDisabled\"\n      [name]=\"controlName\"\n      [id]=\"'control' + layoutNode?._id\"\n      type=\"hidden\"\n      [value]=\"controlValue\">`,\n})\nexport class HiddenComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this);\n  }\n}\n",
    "import {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter,\n  forwardRef, Input, Output, OnChanges, OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\nimport * as _ from 'lodash';\n\nimport { FrameworkLibraryService } from './framework-library/framework-library.service';\nimport { WidgetLibraryService } from './widget-library/widget-library.service';\nimport { JsonSchemaFormService } from './json-schema-form.service';\nimport { convertSchemaToDraft6 } from './shared/convert-schema-to-draft6.function';\nimport { resolveSchemaReferences } from './shared/json-schema.functions';\nimport {\n  hasValue, inArray, isArray, isEmpty, isNumber, isObject\n} from './shared/validator.functions';\nimport { forEach, hasOwn } from './shared/utility.functions';\nimport { JsonPointer } from './shared/jsonpointer.functions';\n\nexport const JSON_SCHEMA_FORM_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line no-use-before-declare\n  useExisting: forwardRef(() => JsonSchemaFormComponent),\n  multi: true,\n};\n\n/**\n * @module 'JsonSchemaFormComponent' - Angular JSON Schema Form\n *\n * Root module of the Angular JSON Schema Form client-side library,\n * an Angular library which generates an HTML form from a JSON schema\n * structured data model and/or a JSON Schema Form layout description.\n *\n * This library also validates input data by the user, using both validators on\n * individual controls to provide real-time feedback while the user is filling\n * out the form, and then validating the entire input against the schema when\n * the form is submitted to make sure the returned JSON data object is valid.\n *\n * This library is similar to, and mostly API compatible with:\n *\n * - JSON Schema Form's Angular Schema Form library for AngularJs\n *   http://schemaform.io\n *   http://schemaform.io/examples/bootstrap-example.html (examples)\n *\n * - Mozilla's react-jsonschema-form library for React\n *   https://github.com/mozilla-services/react-jsonschema-form\n *   https://mozilla-services.github.io/react-jsonschema-form (examples)\n *\n * - Joshfire's JSON Form library for jQuery\n *   https://github.com/joshfire/jsonform\n *   http://ulion.github.io/jsonform/playground (examples)\n *\n * This library depends on:\n *  - Angular (obviously)                  https://angular.io\n *  - lodash, JavaScript utility library   https://github.com/lodash/lodash\n *  - ajv, Another JSON Schema validator   https://github.com/epoberezkin/ajv\n *\n * In addition, the Example Playground also depends on:\n *  - brace, Browserified Ace editor       http://thlorenz.github.io/brace\n */\n@Component({\n  selector: 'json-schema-form',\n  template: `\n    <div *ngFor=\"let stylesheet of stylesheets\">\n      <link rel=\"stylesheet\" [href]=\"stylesheet\">\n    </div>\n    <div *ngFor=\"let script of scripts\">\n      <script type=\"text/javascript\" [src]=\"script\"></script>\n    </div>\n    <form class=\"json-schema-form\" (ngSubmit)=\"submitForm()\">\n      <root-widget [layout]=\"jsf?.layout\"></root-widget>\n    </form>\n    <div *ngIf=\"debug || jsf?.formOptions?.debug\">\n      Debug output: <pre>{{debugOutput}}</pre>\n    </div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // Adding 'JsonSchemaFormService' here, instead of in the module,\n  // creates a separate instance of the service for each component\n  providers:  [ JsonSchemaFormService, JSON_SCHEMA_FORM_VALUE_ACCESSOR ],\n})\nexport class JsonSchemaFormComponent implements ControlValueAccessor, OnChanges, OnInit {\n  debugOutput: any; // Debug information, if requested\n  formValueSubscription: any = null;\n  formInitialized = false;\n  objectWrap = false; // Is non-object input schema wrapped in an object?\n\n  formValuesInput: string; // Name of the input providing the form data\n  previousInputs: { // Previous input values, to detect which input triggers onChanges\n    schema: any, layout: any[], data: any, options: any, framework: any|string,\n    widgets: any, form: any, model: any, JSONSchema: any, UISchema: any,\n    formData: any, loadExternalAssets: boolean, debug: boolean,\n  } = {\n    schema: null, layout: null, data: null, options: null, framework: null,\n    widgets: null, form: null, model: null, JSONSchema: null, UISchema: null,\n    formData: null, loadExternalAssets: null, debug: null,\n  };\n\n  // Recommended inputs\n  @Input() schema: any; // The JSON Schema\n  @Input() layout: any[]; // The form layout\n  @Input() data: any; // The form data\n  @Input() options: any; // The global form options\n  @Input() framework: any|string; // The framework to load\n  @Input() widgets: any; // Any custom widgets to load\n\n  // Alternate combined single input\n  @Input() form: any; // For testing, and JSON Schema Form API compatibility\n\n  // Angular Schema Form API compatibility input\n  @Input() model: any; // Alternate input for form data\n\n  // React JSON Schema Form API compatibility inputs\n  @Input() JSONSchema: any; // Alternate input for JSON Schema\n  @Input() UISchema: any; // UI schema - alternate form layout format\n  @Input() formData: any; // Alternate input for form data\n\n  @Input() ngModel: any; // Alternate input for Angular forms\n\n  @Input() language: string; // Language\n\n  // Development inputs, for testing and debugging\n  @Input() loadExternalAssets: boolean; // Load external framework assets?\n  @Input() debug: boolean; // Show debug information?\n\n  @Input()\n  get value(): any {\n    return this.objectWrap ? this.jsf.data['1'] : this.jsf.data;\n  }\n  set value(value: any) {\n    this.setFormValues(value, false);\n  }\n\n  // Outputs\n  // tslint:disable no-output-on-prefix\n  @Output() onChanges = new EventEmitter<any>(); // Live unvalidated internal form data\n  @Output() onSubmit = new EventEmitter<any>(); // Complete validated form data\n  // tslint:enable no-output-on-prefix\n  @Output() isValid = new EventEmitter<boolean>(); // Is current data valid?\n  @Output() validationErrors = new EventEmitter<any>(); // Validation errors (if any)\n  @Output() formSchema = new EventEmitter<any>(); // Final schema used to create form\n  @Output() formLayout = new EventEmitter<any>(); // Final layout used to create form\n\n  // Outputs for possible 2-way data binding\n  // Only the one input providing the initial form data will be bound.\n  // If there is no inital data, input '{}' to activate 2-way data binding.\n  // There is no 2-way binding if inital data is combined inside the 'form' input.\n  @Output() dataChange = new EventEmitter<any>();\n  @Output() modelChange = new EventEmitter<any>();\n  @Output() formDataChange = new EventEmitter<any>();\n  @Output() ngModelChange = new EventEmitter<any>();\n\n  onChange: Function;\n  onTouched: Function;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private frameworkLibrary: FrameworkLibraryService,\n    private widgetLibrary: WidgetLibraryService,\n    public jsf: JsonSchemaFormService,\n    private sanitizer: DomSanitizer\n  ) { }\n\n  get stylesheets(): SafeResourceUrl[] {\n    const stylesheets = this.frameworkLibrary.getFrameworkStylesheets();\n    const load = this.sanitizer.bypassSecurityTrustResourceUrl;\n    return stylesheets.map(stylesheet => load(stylesheet));\n  }\n\n  get scripts(): SafeResourceUrl[] {\n    const scripts = this.frameworkLibrary.getFrameworkScripts();\n    const load = this.sanitizer.bypassSecurityTrustResourceUrl;\n    return scripts.map(script => load(script));\n  }\n\n  ngOnInit() {\n    this.updateForm();\n  }\n\n  ngOnChanges() {\n    this.updateForm();\n  }\n\n  writeValue(value: any) {\n    this.setFormValues(value, false);\n    if (!this.formValuesInput) { this.formValuesInput = 'ngModel'; }\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    if (this.jsf.formOptions.formDisabled !== !!isDisabled) {\n      this.jsf.formOptions.formDisabled = !!isDisabled;\n      this.initializeForm();\n    }\n  }\n\n  updateForm() {\n    if (!this.formInitialized || !this.formValuesInput ||\n      (this.language && this.language !== this.jsf.language)\n    ) {\n      this.initializeForm();\n    } else {\n      if (this.language && this.language !== this.jsf.language) {\n        this.jsf.setLanguage(this.language);\n      }\n\n      // Get names of changed inputs\n      let changedInput = Object.keys(this.previousInputs)\n        .filter(input => this.previousInputs[input] !== this[input]);\n      let resetFirst = true;\n      if (changedInput.length === 1 && changedInput[0] === 'form' &&\n        this.formValuesInput.startsWith('form.')\n      ) {\n        // If only 'form' input changed, get names of changed keys\n        changedInput = Object.keys(this.previousInputs.form || {})\n          .filter(key => !_.isEqual(this.previousInputs.form[key], this.form[key]))\n          .map(key => `form.${key}`);\n        resetFirst = false;\n      }\n\n      // If only input values have changed, update the form values\n      if (changedInput.length === 1 && changedInput[0] === this.formValuesInput) {\n        if (this.formValuesInput.indexOf('.') === -1) {\n          this.setFormValues(this[this.formValuesInput], resetFirst);\n        } else {\n          const [input, key] = this.formValuesInput.split('.');\n          this.setFormValues(this[input][key], resetFirst);\n        }\n\n      // If anything else has changed, re-render the entire form\n      } else if (changedInput.length) {\n        this.initializeForm();\n        if (this.onChange) { this.onChange(this.jsf.formValues); }\n        if (this.onTouched) { this.onTouched(this.jsf.formValues); }\n      }\n\n      // Update previous inputs\n      Object.keys(this.previousInputs)\n        .filter(input => this.previousInputs[input] !== this[input])\n        .forEach(input => this.previousInputs[input] = this[input]);\n    }\n  }\n\n  setFormValues(formValues: any, resetFirst = true) {\n    if (formValues) {\n      const newFormValues = this.objectWrap ? formValues['1'] : formValues;\n      if (!this.jsf.formGroup) {\n        this.jsf.formValues = formValues;\n        this.activateForm();\n      } else if (resetFirst) {\n        this.jsf.formGroup.reset();\n      }\n      if (this.jsf.formGroup) {\n        this.jsf.formGroup.patchValue(newFormValues);\n      }\n      if (this.onChange) { this.onChange(newFormValues); }\n      if (this.onTouched) { this.onTouched(newFormValues); }\n    } else {\n      this.jsf.formGroup.reset();\n    }\n  }\n\n  submitForm() {\n    const validData = this.jsf.validData;\n    this.onSubmit.emit(this.objectWrap ? validData['1'] : validData);\n  }\n\n  /**\n   * 'initializeForm' function\n   *\n   * - Update 'schema', 'layout', and 'formValues', from inputs.\n   *\n   * - Create 'schemaRefLibrary' and 'schemaRecursiveRefMap'\n   *   to resolve schema $ref links, including recursive $ref links.\n   *\n   * - Create 'dataRecursiveRefMap' to resolve recursive links in data\n   *   and corectly set output formats for recursively nested values.\n   *\n   * - Create 'layoutRefLibrary' and 'templateRefLibrary' to store\n   *   new layout nodes and formGroup elements to use when dynamically\n   *   adding form components to arrays and recursive $ref points.\n   *\n   * - Create 'dataMap' to map the data to the schema and template.\n   *\n   * - Create the master 'formGroupTemplate' then from it 'formGroup'\n   *   the Angular formGroup used to control the reactive form.\n   */\n  initializeForm() {\n    if (\n      this.schema || this.layout || this.data || this.form || this.model ||\n      this.JSONSchema || this.UISchema || this.formData || this.ngModel ||\n      this.jsf.data\n    ) {\n\n      this.jsf.resetAllValues();  // Reset all form values to defaults\n      this.initializeOptions();   // Update options\n      this.initializeSchema();    // Update schema, schemaRefLibrary,\n                                  // schemaRecursiveRefMap, & dataRecursiveRefMap\n      this.initializeLayout();    // Update layout, layoutRefLibrary,\n      this.initializeData();      // Update formValues\n      this.activateForm();        // Update dataMap, templateRefLibrary,\n                                  // formGroupTemplate, formGroup\n\n      // Uncomment individual lines to output debugging information to console:\n      // (These always work.)\n      // console.log('loading form...');\n      // console.log('schema', this.jsf.schema);\n      // console.log('layout', this.jsf.layout);\n      // console.log('options', this.options);\n      // console.log('formValues', this.jsf.formValues);\n      // console.log('formGroupTemplate', this.jsf.formGroupTemplate);\n      // console.log('formGroup', this.jsf.formGroup);\n      // console.log('formGroup.value', this.jsf.formGroup.value);\n      // console.log('schemaRefLibrary', this.jsf.schemaRefLibrary);\n      // console.log('layoutRefLibrary', this.jsf.layoutRefLibrary);\n      // console.log('templateRefLibrary', this.jsf.templateRefLibrary);\n      // console.log('dataMap', this.jsf.dataMap);\n      // console.log('arrayMap', this.jsf.arrayMap);\n      // console.log('schemaRecursiveRefMap', this.jsf.schemaRecursiveRefMap);\n      // console.log('dataRecursiveRefMap', this.jsf.dataRecursiveRefMap);\n\n      // Uncomment individual lines to output debugging information to browser:\n      // (These only work if the 'debug' option has also been set to 'true'.)\n      if (this.debug || this.jsf.formOptions.debug) {\n        const vars: any[] = [];\n        // vars.push(this.jsf.schema);\n        // vars.push(this.jsf.layout);\n        // vars.push(this.options);\n        // vars.push(this.jsf.formValues);\n        // vars.push(this.jsf.formGroup.value);\n        // vars.push(this.jsf.formGroupTemplate);\n        // vars.push(this.jsf.formGroup);\n        // vars.push(this.jsf.schemaRefLibrary);\n        // vars.push(this.jsf.layoutRefLibrary);\n        // vars.push(this.jsf.templateRefLibrary);\n        // vars.push(this.jsf.dataMap);\n        // vars.push(this.jsf.arrayMap);\n        // vars.push(this.jsf.schemaRecursiveRefMap);\n        // vars.push(this.jsf.dataRecursiveRefMap);\n        this.debugOutput = vars.map(v => JSON.stringify(v, null, 2)).join('\\n');\n      }\n      this.formInitialized = true;\n    }\n  }\n\n  /**\n   * 'initializeOptions' function\n   *\n   * Initialize 'options' (global form options) and set framework\n   * Combine available inputs:\n   * 1. options - recommended\n   * 2. form.options - Single input style\n   */\n  private initializeOptions() {\n    if (this.language && this.language !== this.jsf.language) {\n      this.jsf.setLanguage(this.language);\n    }\n    this.jsf.setOptions({ debug: !!this.debug });\n    let loadExternalAssets: boolean = this.loadExternalAssets || false;\n    let framework: any = this.framework || 'default';\n    if (isObject(this.options)) {\n      this.jsf.setOptions(this.options);\n      loadExternalAssets = this.options.loadExternalAssets || loadExternalAssets;\n      framework = this.options.framework || framework;\n    }\n    if (isObject(this.form) && isObject(this.form.options)) {\n      this.jsf.setOptions(this.form.options);\n      loadExternalAssets = this.form.options.loadExternalAssets || loadExternalAssets;\n      framework = this.form.options.framework || framework;\n    }\n    if (isObject(this.widgets)) {\n      this.jsf.setOptions({ widgets: this.widgets });\n    }\n    this.frameworkLibrary.setLoadExternalAssets(loadExternalAssets);\n    this.frameworkLibrary.setFramework(framework);\n    this.jsf.framework = this.frameworkLibrary.getFramework();\n    if (isObject(this.jsf.formOptions.widgets)) {\n      for (const widget of Object.keys(this.jsf.formOptions.widgets)) {\n        this.widgetLibrary.registerWidget(widget, this.jsf.formOptions.widgets[widget]);\n      }\n    }\n    if (isObject(this.form) && isObject(this.form.tpldata)) {\n      this.jsf.setTpldata(this.form.tpldata);\n    }\n  }\n\n  /**\n   * 'initializeSchema' function\n   *\n   * Initialize 'schema'\n   * Use first available input:\n   * 1. schema - recommended / Angular Schema Form style\n   * 2. form.schema - Single input / JSON Form style\n   * 3. JSONSchema - React JSON Schema Form style\n   * 4. form.JSONSchema - For testing single input React JSON Schema Forms\n   * 5. form - For testing single schema-only inputs\n   *\n   * ... if no schema input found, the 'activateForm' function, below,\n   *     will make two additional attempts to build a schema\n   * 6. If layout input - build schema from layout\n   * 7. If data input - build schema from data\n   */\n  private initializeSchema() {\n\n    // TODO: update to allow non-object schemas\n\n    if (isObject(this.schema)) {\n      this.jsf.AngularSchemaFormCompatibility = true;\n      this.jsf.schema = _.cloneDeep(this.schema);\n    } else if (hasOwn(this.form, 'schema') && isObject(this.form.schema)) {\n      this.jsf.schema = _.cloneDeep(this.form.schema);\n    } else if (isObject(this.JSONSchema)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      this.jsf.schema = _.cloneDeep(this.JSONSchema);\n    } else if (hasOwn(this.form, 'JSONSchema') && isObject(this.form.JSONSchema)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      this.jsf.schema = _.cloneDeep(this.form.JSONSchema);\n    } else if (hasOwn(this.form, 'properties') && isObject(this.form.properties)) {\n      this.jsf.schema = _.cloneDeep(this.form);\n    } else if (isObject(this.form)) {\n      // TODO: Handle other types of form input\n    }\n\n    if (!isEmpty(this.jsf.schema)) {\n\n      // If other types also allowed, render schema as an object\n      if (inArray('object', this.jsf.schema.type)) {\n        this.jsf.schema.type = 'object';\n      }\n\n      // Wrap non-object schemas in object.\n      if (hasOwn(this.jsf.schema, 'type') && this.jsf.schema.type !== 'object') {\n        this.jsf.schema = {\n          'type': 'object',\n          'properties': { 1: this.jsf.schema }\n        };\n        this.objectWrap = true;\n      } else if (!hasOwn(this.jsf.schema, 'type')) {\n\n        // Add type = 'object' if missing\n        if (isObject(this.jsf.schema.properties) ||\n          isObject(this.jsf.schema.patternProperties) ||\n          isObject(this.jsf.schema.additionalProperties)\n        ) {\n          this.jsf.schema.type = 'object';\n\n        // Fix JSON schema shorthand (JSON Form style)\n        } else {\n          this.jsf.JsonFormCompatibility = true;\n          this.jsf.schema = {\n            'type': 'object',\n            'properties': this.jsf.schema\n          };\n        }\n      }\n\n      // If needed, update JSON Schema to draft 6 format, including\n      // draft 3 (JSON Form style) and draft 4 (Angular Schema Form style)\n      this.jsf.schema = convertSchemaToDraft6(this.jsf.schema);\n\n      // Initialize ajv and compile schema\n      this.jsf.compileAjvSchema();\n\n      // Create schemaRefLibrary, schemaRecursiveRefMap, dataRecursiveRefMap, & arrayMap\n      this.jsf.schema = resolveSchemaReferences(\n        this.jsf.schema, this.jsf.schemaRefLibrary, this.jsf.schemaRecursiveRefMap,\n        this.jsf.dataRecursiveRefMap, this.jsf.arrayMap\n      );\n      if (hasOwn(this.jsf.schemaRefLibrary, '')) {\n        this.jsf.hasRootReference = true;\n      }\n\n      // TODO: (?) Resolve external $ref links\n      // // Create schemaRefLibrary & schemaRecursiveRefMap\n      // this.parser.bundle(this.schema)\n      //   .then(schema => this.schema = resolveSchemaReferences(\n      //     schema, this.jsf.schemaRefLibrary,\n      //     this.jsf.schemaRecursiveRefMap, this.jsf.dataRecursiveRefMap\n      //   ));\n    }\n  }\n\n  /**\n   * 'initializeData' function\n   *\n   * Initialize 'formValues'\n   * defulat or previously submitted values used to populate form\n   * Use first available input:\n   * 1. data - recommended\n   * 2. model - Angular Schema Form style\n   * 3. form.value - JSON Form style\n   * 4. form.data - Single input style\n   * 5. formData - React JSON Schema Form style\n   * 6. form.formData - For easier testing of React JSON Schema Forms\n   * 7. (none) no data - initialize data from schema and layout defaults only\n   */\n  private initializeData() {\n    if (hasValue(this.data)) {\n      this.jsf.formValues = _.cloneDeep(this.data);\n      this.formValuesInput = 'data';\n    } else if (hasValue(this.model)) {\n      this.jsf.AngularSchemaFormCompatibility = true;\n      this.jsf.formValues = _.cloneDeep(this.model);\n      this.formValuesInput = 'model';\n    } else if (hasValue(this.ngModel)) {\n      this.jsf.AngularSchemaFormCompatibility = true;\n      this.jsf.formValues = _.cloneDeep(this.ngModel);\n      this.formValuesInput = 'ngModel';\n    } else if (isObject(this.form) && hasValue(this.form.value)) {\n      this.jsf.JsonFormCompatibility = true;\n      this.jsf.formValues = _.cloneDeep(this.form.value);\n      this.formValuesInput = 'form.value';\n    } else if (isObject(this.form) && hasValue(this.form.data)) {\n      this.jsf.formValues = _.cloneDeep(this.form.data);\n      this.formValuesInput = 'form.data';\n    } else if (hasValue(this.formData)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      this.formValuesInput = 'formData';\n    } else if (hasOwn(this.form, 'formData') && hasValue(this.form.formData)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      this.jsf.formValues = _.cloneDeep(this.form.formData);\n      this.formValuesInput = 'form.formData';\n    } else {\n      this.formValuesInput = null;\n    }\n  }\n\n  /**\n   * 'initializeLayout' function\n   *\n   * Initialize 'layout'\n   * Use first available array input:\n   * 1. layout - recommended\n   * 2. form - Angular Schema Form style\n   * 3. form.form - JSON Form style\n   * 4. form.layout - Single input style\n   * 5. (none) no layout - set default layout instead\n   *    (full layout will be built later from the schema)\n   *\n   * Also, if alternate layout formats are available,\n   * import from 'UISchema' or 'customFormItems'\n   * used for React JSON Schema Form and JSON Form API compatibility\n   * Use first available input:\n   * 1. UISchema - React JSON Schema Form style\n   * 2. form.UISchema - For testing single input React JSON Schema Forms\n   * 2. form.customFormItems - JSON Form style\n   * 3. (none) no input - don't import\n   */\n  private initializeLayout() {\n\n    // Rename JSON Form-style 'options' lists to\n    // Angular Schema Form-style 'titleMap' lists.\n    const fixJsonFormOptions = (layout: any): any => {\n      if (isObject(layout) || isArray(layout)) {\n        forEach(layout, (value, key) => {\n          if (hasOwn(value, 'options') && isObject(value.options)) {\n            value.titleMap = value.options;\n            delete value.options;\n          }\n        }, 'top-down');\n      }\n      return layout;\n    };\n\n    // Check for layout inputs and, if found, initialize form layout\n    if (isArray(this.layout)) {\n      this.jsf.layout = _.cloneDeep(this.layout);\n    } else if (isArray(this.form)) {\n      this.jsf.AngularSchemaFormCompatibility = true;\n      this.jsf.layout = _.cloneDeep(this.form);\n    } else if (this.form && isArray(this.form.form)) {\n      this.jsf.JsonFormCompatibility = true;\n      this.jsf.layout = fixJsonFormOptions(_.cloneDeep(this.form.form));\n    } else if (this.form && isArray(this.form.layout)) {\n      this.jsf.layout = _.cloneDeep(this.form.layout);\n    } else {\n      this.jsf.layout = ['*'];\n    }\n\n    // Check for alternate layout inputs\n    let alternateLayout: any = null;\n    if (isObject(this.UISchema)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      alternateLayout = _.cloneDeep(this.UISchema);\n    } else if (hasOwn(this.form, 'UISchema')) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      alternateLayout = _.cloneDeep(this.form.UISchema);\n    } else if (hasOwn(this.form, 'uiSchema')) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true;\n      alternateLayout = _.cloneDeep(this.form.uiSchema);\n    } else if (hasOwn(this.form, 'customFormItems')) {\n      this.jsf.JsonFormCompatibility = true;\n      alternateLayout = fixJsonFormOptions(_.cloneDeep(this.form.customFormItems));\n    }\n\n    // if alternate layout found, copy alternate layout options into schema\n    if (alternateLayout) {\n      JsonPointer.forEachDeep(alternateLayout, (value, pointer) => {\n        const schemaPointer = pointer\n          .replace(/\\//g, '/properties/')\n          .replace(/\\/properties\\/items\\/properties\\//g, '/items/properties/')\n          .replace(/\\/properties\\/titleMap\\/properties\\//g, '/titleMap/properties/');\n        if (hasValue(value) && hasValue(pointer)) {\n          let key = JsonPointer.toKey(pointer);\n          const groupPointer = (JsonPointer.parse(schemaPointer) || []).slice(0, -2);\n          let itemPointer: string | string[];\n\n          // If 'ui:order' object found, copy into object schema root\n          if (key.toLowerCase() === 'ui:order') {\n            itemPointer = [...groupPointer, 'ui:order'];\n\n          // Copy other alternate layout options to schema 'x-schema-form',\n          // (like Angular Schema Form options) and remove any 'ui:' prefixes\n          } else {\n            if (key.slice(0, 3).toLowerCase() === 'ui:') { key = key.slice(3); }\n            itemPointer = [...groupPointer, 'x-schema-form', key];\n          }\n          if (JsonPointer.has(this.jsf.schema, groupPointer) &&\n            !JsonPointer.has(this.jsf.schema, itemPointer)\n          ) {\n            JsonPointer.set(this.jsf.schema, itemPointer, value);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * 'activateForm' function\n   *\n   * ...continued from 'initializeSchema' function, above\n   * If 'schema' has not been initialized (i.e. no schema input found)\n   * 6. If layout input - build schema from layout input\n   * 7. If data input - build schema from data input\n   *\n   * Create final layout,\n   * build the FormGroup template and the Angular FormGroup,\n   * subscribe to changes,\n   * and activate the form.\n   */\n  private activateForm() {\n\n    // If 'schema' not initialized\n    if (isEmpty(this.jsf.schema)) {\n\n      // TODO: If full layout input (with no '*'), build schema from layout\n      // if (!this.jsf.layout.includes('*')) {\n      //   this.jsf.buildSchemaFromLayout();\n      // } else\n\n      // If data input, build schema from data\n      if (!isEmpty(this.jsf.formValues)) {\n        this.jsf.buildSchemaFromData();\n      }\n    }\n\n    if (!isEmpty(this.jsf.schema)) {\n\n      // If not already initialized, initialize ajv and compile schema\n      this.jsf.compileAjvSchema();\n\n      // Update all layout elements, add values, widgets, and validators,\n      // replace any '*' with a layout built from all schema elements,\n      // and update the FormGroup template with any new validators\n      this.jsf.buildLayout(this.widgetLibrary);\n\n      // Build the Angular FormGroup template from the schema\n      this.jsf.buildFormGroupTemplate(this.jsf.formValues);\n\n      // Build the real Angular FormGroup from the FormGroup template\n      this.jsf.buildFormGroup();\n    }\n\n    if (this.jsf.formGroup) {\n\n      // Reset initial form values\n      if (!isEmpty(this.jsf.formValues) &&\n        this.jsf.formOptions.setSchemaDefaults !== true &&\n        this.jsf.formOptions.setLayoutDefaults !== true\n      ) {\n        this.setFormValues(this.jsf.formValues);\n      }\n\n      // TODO: Figure out how to display calculated values without changing object data\n      // See http://ulion.github.io/jsonform/playground/?example=templating-values\n      // Calculate references to other fields\n      // if (!isEmpty(this.jsf.formGroup.value)) {\n      //   forEach(this.jsf.formGroup.value, (value, key, object, rootObject) => {\n      //     if (typeof value === 'string') {\n      //       object[key] = this.jsf.parseText(value, value, rootObject, key);\n      //     }\n      //   }, 'top-down');\n      // }\n\n      // Subscribe to form changes to output live data, validation, and errors\n      this.jsf.dataChanges.subscribe(data => {\n        this.onChanges.emit(this.objectWrap ? data['1'] : data);\n        if (this.formValuesInput && this.formValuesInput.indexOf('.') === -1) {\n          this[`${this.formValuesInput}Change`].emit(this.objectWrap ? data['1'] : data);\n        }\n      });\n\n      // Trigger change detection on statusChanges to show updated errors\n      this.jsf.formGroup.statusChanges.subscribe(() => this.changeDetector.markForCheck());\n      this.jsf.isValidChanges.subscribe(isValid => this.isValid.emit(isValid));\n      this.jsf.validationErrorChanges.subscribe(err => this.validationErrors.emit(err));\n\n      // Output final schema, final layout, and initial data\n      this.formSchema.emit(this.jsf.schema);\n      this.formLayout.emit(this.jsf.layout);\n      this.onChanges.emit(this.objectWrap ? this.jsf.data['1'] : this.jsf.data);\n\n      // If validateOnRender, output initial validation and any errors\n      const validateOnRender =\n        JsonPointer.get(this.jsf, '/formOptions/validateOnRender');\n      if (validateOnRender) { // validateOnRender === 'auto' || true\n        const touchAll = (control) => {\n          if (validateOnRender === true || hasValue(control.value)) {\n            control.markAsTouched();\n          }\n          Object.keys(control.controls || {})\n            .forEach(key => touchAll(control.controls[key]));\n        };\n        touchAll(this.jsf.formGroup);\n        this.isValid.emit(this.jsf.isValid);\n        this.validationErrors.emit(this.jsf.ajvErrors);\n      }\n    }\n  }\n}\n",
    "import { Inject, Injectable } from '@angular/core';\n\nimport { WidgetLibraryService } from '../widget-library/widget-library.service';\nimport { hasOwn } from '../shared/utility.functions';\n\nimport { Framework } from './framework';\n\n// Possible future frameworks:\n// - Foundation 6:\n//   http://justindavis.co/2017/06/15/using-foundation-6-in-angular-4/\n//   https://github.com/zurb/foundation-sites\n// - Semantic UI:\n//   https://github.com/edcarroll/ng2-semantic-ui\n//   https://github.com/vladotesanovic/ngSemantic\n\n@Injectable()\nexport class FrameworkLibraryService {\n  activeFramework: Framework = null;\n  stylesheets: (HTMLStyleElement|HTMLLinkElement)[];\n  scripts: HTMLScriptElement[];\n  loadExternalAssets = false;\n  defaultFramework: string;\n  frameworkLibrary: { [name: string]: Framework } = {};\n\n  constructor(\n    @Inject(Framework) private frameworks: any[],\n    @Inject(WidgetLibraryService) private widgetLibrary: WidgetLibraryService\n  ) {\n    this.frameworks.forEach(framework =>\n      this.frameworkLibrary[framework.name] = framework\n    );\n    this.defaultFramework = this.frameworks[0].name;\n    this.setFramework(this.defaultFramework);\n  }\n\n  public setLoadExternalAssets(loadExternalAssets = true): void {\n    this.loadExternalAssets = !!loadExternalAssets;\n  }\n\n  public setFramework(\n    framework: string|Framework = this.defaultFramework,\n    loadExternalAssets = this.loadExternalAssets\n  ): boolean {\n    this.activeFramework =\n      typeof framework === 'string' && this.hasFramework(framework) ?\n        this.frameworkLibrary[framework] :\n      typeof framework === 'object' && hasOwn(framework, 'framework') ?\n        framework :\n        this.frameworkLibrary[this.defaultFramework];\n    return this.registerFrameworkWidgets(this.activeFramework);\n  }\n\n  registerFrameworkWidgets(framework: Framework): boolean {\n    return hasOwn(framework, 'widgets') ?\n      this.widgetLibrary.registerFrameworkWidgets(framework.widgets) :\n      this.widgetLibrary.unRegisterFrameworkWidgets();\n  }\n\n  public hasFramework(type: string): boolean {\n    return hasOwn(this.frameworkLibrary, type);\n  }\n\n  public getFramework(): any {\n    if (!this.activeFramework) { this.setFramework('default', true); }\n    return this.activeFramework.framework;\n  }\n\n  public getFrameworkWidgets(): any {\n    return this.activeFramework.widgets || {};\n  }\n\n  public getFrameworkStylesheets(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.stylesheets) || [];\n  }\n\n  public getFrameworkScripts(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.scripts) || [];\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Framework {\n  name: string;\n  framework: any;\n  widgets?: { [key: string]: any } = {};\n  stylesheets?: string[] = [];\n  scripts?: string[] = [];\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { hasOwn } from '../shared/utility.functions';\n\nimport { AddReferenceComponent } from './add-reference.component';\nimport { OneOfComponent } from './one-of.component';\nimport { ButtonComponent } from './button.component';\nimport { CheckboxComponent } from './checkbox.component';\nimport { CheckboxesComponent } from './checkboxes.component';\nimport { FileComponent } from './file.component';\nimport { HiddenComponent } from './hidden.component';\nimport { InputComponent } from './input.component';\nimport { MessageComponent } from './message.component';\nimport { NoneComponent } from './none.component';\nimport { NumberComponent } from './number.component';\nimport { RadiosComponent } from './radios.component';\nimport { RootComponent } from './root.component';\nimport { SectionComponent } from './section.component';\nimport { CkeditorComponent } from './ckeditor.component';\nimport { SelectComponent } from './select.component';\nimport { SelectFrameworkComponent } from './select-framework.component';\nimport { SelectWidgetComponent } from './select-widget.component';\nimport { SubmitComponent } from './submit.component';\nimport { TabComponent } from './tab.component';\nimport { TabsComponent } from './tabs.component';\nimport { TemplateComponent } from './template.component';\nimport { TextareaComponent } from './textarea.component';\nimport { DatetimepickerComponent } from './datetimepicker.component';\n\n@Injectable()\nexport class WidgetLibraryService {\n\n  defaultWidget = 'text';\n  widgetLibrary: any = {\n\n  // Angular JSON Schema Form administrative widgets\n    'none': NoneComponent, // Placeholder, for development - displays nothing\n    'root': RootComponent, // Form root, renders a complete layout\n    'select-framework': SelectFrameworkComponent, // Applies the selected framework to a specified widget\n    'select-widget': SelectWidgetComponent, // Displays a specified widget\n    '$ref': AddReferenceComponent, // Button to add a new array item or $ref element\n\n  // Free-form text HTML 'input' form control widgets <input type=\"...\">\n    'email': 'text',\n    'integer': 'number', // Note: 'integer' is not a recognized HTML input type\n    'number': NumberComponent,\n    'password': 'text',\n    'search': 'text',\n    'tel': 'text',\n    'text': InputComponent,\n    'url': 'text',\n\n  // Controlled text HTML 'input' form control widgets <input type=\"...\">\n    'color': 'text',\n    'icon': 'text',\n    'date': 'text',\n    'datetime': DatetimepickerComponent,\n    'datetime-local': 'text',\n    'month': 'text',\n    'range': 'number',\n    'time': 'text',\n    'week': 'text',\n\n  // Non-text HTML 'input' form control widgets <input type=\"...\">\n    // 'button': <input type=\"button\"> not used, use <button> instead\n    'checkbox': CheckboxComponent, // TODO: Set ternary = true for 3-state ??\n    'file': FileComponent, // TODO: Finish 'file' widget\n    'hidden': 'text',\n    'image': 'text', // TODO: Figure out how to handle these\n    'radio': 'radios',\n    'reset': 'submit', // TODO: Figure out how to handle these\n    'submit': SubmitComponent,\n\n  // Other (non-'input') HTML form control widgets\n    'button': ButtonComponent,\n    'select': SelectComponent,\n    // 'option': automatically generated by select widgets\n    // 'optgroup': automatically generated by select widgets\n    'textarea': TextareaComponent,\n\n  // HTML form control widget sets\n    'checkboxes': CheckboxesComponent, // Grouped list of checkboxes\n    'checkboxes-inline': 'checkboxes', // Checkboxes in one line\n    'checkboxbuttons': 'checkboxes', // Checkboxes as html buttons\n    'radios': RadiosComponent, // Grouped list of radio buttons\n    'radios-inline': 'radios', // Radio controls in one line\n    'radiobuttons': 'radios', // Radio controls as html buttons\n\n  // HTML Layout widgets\n    // 'label': automatically added to data widgets\n    // 'legend': automatically added to fieldsets\n    'section': SectionComponent, // Just a div <div>\n    'div': 'section', // Still just a div <div>\n    'fieldset': 'section', // A fieldset, with an optional legend <fieldset>\n    'flex': 'section', // A flexbox container <div style=\"display: flex\">\n\n  // Non-HTML layout widgets\n    'one-of': OneOfComponent, // A select box that changes another input\n                              // TODO: Finish 'one-of' widget\n    'array': 'section', // A list you can add, remove and reorder <fieldset>\n    'tabarray': 'tabs', // A tabbed version of array\n    'tab': 'section', // A tab group, similar to a fieldset or section <fieldset>\n    'tabs': TabsComponent, // A tabbed set of panels with different controls\n    'message': MessageComponent, // Insert arbitrary html\n    'help': 'message', // Insert arbitrary html\n    'msg': 'message', // Insert arbitrary html\n    'html': 'message', // Insert arbitrary html\n    'template': TemplateComponent, // Insert a custom Angular component\n\n  // Widgets included for compatibility with JSON Form API\n    'advancedfieldset': 'section', // Adds 'Advanced settings' title <fieldset>\n    'authfieldset': 'section', // Adds 'Authentication settings' title <fieldset>\n    'optionfieldset': 'one-of', // Option control, displays selected sub-item <fieldset>\n    'selectfieldset': 'one-of', // Select control, displays selected sub-item <fieldset>\n    'conditional': 'section', // Identical to 'section' (depeciated) <div>\n    'actions': 'section', // Horizontal button list, can only submit, uses buttons as items <div>\n    'tagsinput': 'section', // For entering short text tags <div>\n    // See: http://ulion.github.io/jsonform/playground/?example=fields-checkboxbuttons\n\n  // Widgets included for compatibility with React JSON Schema Form API\n    'updown': 'number',\n    'date-time': 'datetime-local',\n    'alt-datetime': 'datetime-local',\n    'alt-date': 'date',\n\n  // Widgets included for compatibility with Angular Schema Form API\n    'wizard': 'section', // TODO: Sequential panels with \"Next\" and \"Previous\" buttons\n\n  // Widgets included for compatibility with other libraries\n    'textline': 'text',\n\n    //CKeditor widget\n    'ckeditor': CkeditorComponent\n\n  // Recommended 3rd-party add-on widgets (TODO: create wrappers for these...)\n    // 'ng2-select': Select control replacement - http://valor-software.com/ng2-select/\n    // 'flatpickr': Flatpickr date picker - https://github.com/chmln/flatpickr\n    // 'pikaday': Pikaday date picker - https://github.com/dbushell/Pikaday\n    // 'spectrum': Spectrum color picker - http://bgrins.github.io/spectrum\n    // 'bootstrap-slider': Bootstrap Slider range control - https://github.com/seiyria/bootstrap-slider\n    // 'ace': ACE code editor - https://ace.c9.io\n    // 'ckeditor': CKEditor HTML / rich text editor - http://ckeditor.com\n    // 'tinymce': TinyMCE HTML / rich text editor - https://www.tinymce.com\n    // 'imageselect': Bootstrap drop-down image selector - http://silviomoreto.github.io/bootstrap-select\n    // 'wysihtml5': HTML editor - http://jhollingworth.github.io/bootstrap-wysihtml5\n    // 'quill': Quill HTML / rich text editor (?) - https://quilljs.com\n  };\n  registeredWidgets: any = { };\n  frameworkWidgets: any = { };\n  activeWidgets: any = { };\n\n  constructor() {\n    this.setActiveWidgets();\n  }\n\n  setActiveWidgets(): boolean {\n    this.activeWidgets = Object.assign(\n      { }, this.widgetLibrary, this.frameworkWidgets, this.registeredWidgets\n    );\n    for (const widgetName of Object.keys(this.activeWidgets)) {\n      let widget: any = this.activeWidgets[widgetName];\n      // Resolve aliases\n      if (typeof widget === 'string') {\n        const usedAliases: string[] = [];\n        while (typeof widget === 'string' && !usedAliases.includes(widget)) {\n          usedAliases.push(widget);\n          widget = this.activeWidgets[widget];\n        }\n        if (typeof widget !== 'string') {\n          this.activeWidgets[widgetName] = widget;\n        }\n      }\n    }\n    return true;\n  }\n\n  setDefaultWidget(type: string): boolean {\n    if (!this.hasWidget(type)) { return false; }\n    this.defaultWidget = type;\n    return true;\n  }\n\n  hasWidget(type: string, widgetSet = 'activeWidgets'): boolean {\n    if (!type || typeof type !== 'string') { return false; }\n    return hasOwn(this[widgetSet], type);\n  }\n\n  hasDefaultWidget(type: string): boolean {\n    return this.hasWidget(type, 'widgetLibrary');\n  }\n\n  registerWidget(type: string, widget: any): boolean {\n    if (!type || !widget || typeof type !== 'string') { return false; }\n    this.registeredWidgets[type] = widget;\n    return this.setActiveWidgets();\n  }\n\n  unRegisterWidget(type: string): boolean {\n    if (!hasOwn(this.registeredWidgets, type)) { return false; }\n    delete this.registeredWidgets[type];\n    return this.setActiveWidgets();\n  }\n\n  unRegisterAllWidgets(unRegisterFrameworkWidgets = true): boolean {\n    this.registeredWidgets = { };\n    if (unRegisterFrameworkWidgets) { this.frameworkWidgets = { }; }\n    return this.setActiveWidgets();\n  }\n\n  registerFrameworkWidgets(widgets: any): boolean {\n    if (widgets === null || typeof widgets !== 'object') { widgets = { }; }\n    this.frameworkWidgets = widgets;\n    return this.setActiveWidgets();\n  }\n\n  unRegisterFrameworkWidgets(): boolean {\n    if (Object.keys(this.frameworkWidgets).length) {\n      this.frameworkWidgets = { };\n      return this.setActiveWidgets();\n    }\n    return false;\n  }\n\n  getWidget(type?: string, widgetSet = 'activeWidgets'): any {\n    if (this.hasWidget(type, widgetSet)) {\n      return this[widgetSet][type];\n    } else if (this.hasWidget(this.defaultWidget, widgetSet)) {\n      return this[widgetSet][this.defaultWidget];\n    } else {\n      return null;\n    }\n  }\n\n  getAllWidgets(): any {\n    return {\n      widgetLibrary: this.widgetLibrary,\n      registeredWidgets: this.registeredWidgets,\n      frameworkWidgets: this.frameworkWidgets,\n      activeWidgets: this.activeWidgets,\n    };\n  }\n}\n",
    "import { Component, Input, OnInit, OnChanges, ViewChild } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { dateToString, hasOwn, stringToDate } from '../shared';\nimport { DatePickerComponent } from 'ng2-date-picker';\n\nimport moment from 'moment';\n\n@Component({\n  selector: 'datetimepicker-widget',\n  template: `\n    <dp-date-picker\n      [(ngModel)]=\"dateValue\"\n      [mode]=\"mode\"\n      [config]=\"datePickerConfig\"\n      [theme]=\"theme\"\n      [placeholder]=\"options?.title\"\n      (onChange)=\"updateValue($event)\">\n    </dp-date-picker>\n  `,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class DatetimepickerComponent implements OnInit, OnChanges {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  dateValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  mode: string;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  @ViewChild('myDatePicker') datePicker: DatePickerComponent;\n\n  theme = 'dp-material dp-main';\n\n  datePickerConfig = {\n    firstDayOfWeek: 'su',\n    format: 'YYYY-MM-DD HH:mm:ss',\n    monthFormat: 'MMM YYYY',\n    disableKeypress: false,\n    allowMultiSelect: false,\n    closeOnSelect: true,\n    closeOnSelectDelay: 100,\n    openOnFocus: true,\n    openOnClick: true,\n    onOpenDelay: 0,\n    weekDayFormat: 'ddd',\n    appendTo: document.body,\n    showNearMonthDays: true,\n    showWeekNumbers: false,\n    enableMonthSelector: true,\n    yearFormat: 'YYYY',\n    showGoToCurrent: true,\n    dayBtnFormat: 'DD',\n    monthBtnFormat: 'MMM',\n    hours12Format: 'hh',\n    hours24Format: 'HH',\n    meridiemFormat: 'A',\n    minutesFormat: 'mm',\n    minutesInterval: 1,\n    secondsFormat: 'ss',\n    secondsInterval: 1,\n    showSeconds: true,\n    showTwentyFourHours: true,\n    timeSeparator: ':',\n    multipleYearsNavigateBy: 10,\n    showMultipleYearsNavigation: false,\n    locale: moment.locale(),\n    hideInputContainer: false,\n    returnedValueType: String,\n    unSelectOnClick: true,\n    hideOnOutsideClick: true\n  };\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    this.options.format ? this.datePickerConfig.format = this.options.format : this.datePickerConfig.format = 'YYYY-MM-DD HH:mm:ss';\n    this.options.mode ? this.mode = this.options.mode : this.mode = 'daytime';\n    this.setControlDate(this.controlValue);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  ngOnChanges() {\n    this.setControlDate(this.controlValue);\n  }\n\n  setControlDate(dateString: string) {\n    dateString ? dateString : dateString = moment(new Date().getTime()).format(this.datePickerConfig.format);\n    this.dateValue = moment(dateString, this.datePickerConfig.format);\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.dateValue = moment(event[0]).format(this.datePickerConfig.format);\n    this.jsf.updateValue(this, this.dateValue);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'textarea-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <textarea *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"></textarea>\n      <textarea *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">{{controlValue}}</textarea>\n    </div>`,\n})\nexport class TextareaComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import {\n  Component, ComponentFactoryResolver, ComponentRef, Input,\n  OnChanges, OnInit, ViewChild, ViewContainerRef\n} from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'template-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class TemplateComponent implements OnInit, OnChanges {\n  newComponent: ComponentRef<any> = null;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @ViewChild('widgetContainer', { read: ViewContainerRef })\n    widgetContainer: ViewContainerRef;\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.updateComponent();\n  }\n\n  ngOnChanges() {\n    this.updateComponent();\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.layoutNode.options.template) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.options.template)\n      );\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input];\n      }\n    }\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'tabs-widget',\n  template: `\n    <ul\n      [class]=\"options?.labelHtmlClass || ''\">\n      <li *ngFor=\"let item of layoutNode?.items; let i = index\"\n        [class]=\"(options?.itemLabelHtmlClass || '') + (selectedItem === i ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + options?.style?.unselected))\"\n        role=\"presentation\"\n        data-tabs>\n        <a *ngIf=\"showAddTab || item.type !== '$ref'\"\n           [class]=\"'nav-link' + (selectedItem === i ? (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n            (' ' + options?.style?.unselected))\"\n          [innerHTML]=\"setTabTitle(item, i)\"\n          (click)=\"select(i)\"></a>\n      </li>\n    </ul>\n\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass || ''\">\n\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"(options?.fieldHtmlClass || '') +\n          ' ' + (options?.activeClass || '') +\n          ' ' + (options?.style?.selected || '')\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n\n    </div>`,\n  styles: [` a { cursor: pointer; } `],\n})\nexport class TabsComponent implements OnInit {\n  options: any;\n  itemCount: number;\n  selectedItem = 0;\n  showAddTab = true;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.itemCount = this.layoutNode.items.length - 1;\n    this.updateControl();\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.itemCount = this.layoutNode.items.length;\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      });\n      this.updateControl();\n    }\n    this.selectedItem = index;\n  }\n\n  updateControl() {\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1];\n    if (lastItem.type === '$ref' &&\n      this.itemCount >= (lastItem.options.maxItems || 1000)\n    ) {\n      this.showAddTab = false;\n    }\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { hasOwn } from '../shared/utility.functions';\n\n@Component({\n  selector: 'submit-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <input\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n    </div>`,\n})\nexport class SubmitComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled;\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid;\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid);\n    }\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title;\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event);\n    } else {\n      this.jsf.updateValue(this, event.target.value);\n    }\n  }\n}\n",
    "import {\n  Component, ComponentFactoryResolver, ComponentRef, Input,\n  OnChanges, OnInit, ViewChild, ViewContainerRef\n} from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'select-widget-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class SelectWidgetComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @ViewChild('widgetContainer', { read: ViewContainerRef })\n    widgetContainer: ViewContainerRef;\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.updateComponent();\n  }\n\n  ngOnChanges() {\n    this.updateComponent();\n  }\n\n  updateComponent() {\n    if (!this.newComponent && (this.layoutNode || {}).widget) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.widget)\n      );\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input];\n      }\n    }\n  }\n}\n",
    "import {\n  Component, ComponentFactoryResolver, ComponentRef, Input,\n  OnChanges, OnInit, ViewChild, ViewContainerRef\n} from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'select-framework-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class SelectFrameworkComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @ViewChild('widgetContainer', { read: ViewContainerRef })\n    widgetContainer: ViewContainerRef;\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.updateComponent();\n  }\n\n  ngOnChanges() {\n    this.updateComponent();\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.jsf.framework) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.jsf.framework)\n      );\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input];\n      }\n    }\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { buildTitleMap, isArray } from '../shared';\n\n@Component({\n  selector: 'select-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <select *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n      <select *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        (change)=\"updateValue($event)\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [selected]=\"selectItem?.value === controlValue\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [attr.selected]=\"subItem?.value === controlValue\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n    </div>`,\n})\nexport class SelectComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  selectList: any[] = [];\n  isArray = isArray;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    );\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'ckeditor-widget',\n  template:\n    `<div\n    [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <ck-editor (ngModelChange)=\"updateValue($event)\" [(ngModel)]=\"controlValue\" [name]=\"controlName\" [config]=\"config\">\n      </ck-editor>\n       <button *ngIf=\"options?.comments\" color=\"primary\" (click)=\"commentsClick()\"></button>\n    </div>\n    `\n})\nexport class CkeditorComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  config = {\n    mathJaxLib: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML',\n    toolbarGroups: [\n      { name: 'clipboard',   groups: [ 'clipboard', 'undo' ] },\n      { name: 'editing',     groups: [ 'find', 'selection', 'spellchecker' ] },\n      { name: 'links' },\n      { name: 'insert' },\n      { name: 'forms' },\n      { name: 'tools' },\n      { name: 'document',\n         groups: [ 'mode', 'document', 'doctools' ] },\n      { name: 'others' },\n      '/',\n      { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n      { name: 'paragraph',   groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ] },\n      { name: 'styles' },\n      { name: 'colors' },\n      { name: 'about' }\n    ],\n\n    // Remove some buttons provided by the standard plugins, which are\n    // not needed in the Standard(s) toolbar.\n    removeButtons: 'Underline',\n\n    // Set the most common block elements.\n    format_tags: 'p;h1;h2;h3;pre',\n\n    // Simplify the dialog windows.\n    removeDialogTabs: 'image:advanced;link:advanced',\n    filebrowserBrowseUrl: '/browser/browse.php',\n    filebrowserUploadUrl: '/uploader/upload.php'\n  }\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  commentsClick() {\n    console.log(this.layoutNode.dataPointer);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\n\nimport { toTitleCase } from '../shared';\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'section-widget',\n  template: `\n    <div *ngIf=\"containerType === 'div'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\">\n      <label *ngIf=\"sectionTitle\"\n        class=\"legend\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [innerHTML]=\"sectionTitle\"\n        (click)=\"toggleExpanded()\"></label>\n      <root-widget *ngIf=\"expanded\"\n        [dataIndex]=\"dataIndex\"\n        [layout]=\"layoutNode.items\"\n        [layoutIndex]=\"layoutIndex\"\n        [isFlexItem]=\"getFlexAttribute('is-flex')\"\n        [isOrderable]=\"options?.orderable\"\n        [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n        [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n        [style.align-content]=\"getFlexAttribute('align-content')\"\n        [style.align-items]=\"getFlexAttribute('align-items')\"\n        [style.display]=\"getFlexAttribute('display')\"\n        [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n        [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n        [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n    </div>\n    <fieldset *ngIf=\"containerType === 'fieldset'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\"\n      [disabled]=\"options?.readonly\">\n      <legend *ngIf=\"sectionTitle\"\n        class=\"legend\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [innerHTML]=\"sectionTitle\"\n        (click)=\"toggleExpanded()\"></legend>\n      <div *ngIf=\"options?.messageLocation !== 'bottom'\">\n        <p *ngIf=\"options?.description\"\n        class=\"help-block\"\n        [class]=\"options?.labelHelpBlockClass || ''\"\n        [innerHTML]=\"options?.description\"></p>\n      </div>\n      <root-widget *ngIf=\"expanded\"\n        [dataIndex]=\"dataIndex\"\n        [layout]=\"layoutNode.items\"\n        [layoutIndex]=\"layoutIndex\"\n        [isFlexItem]=\"getFlexAttribute('is-flex')\"\n        [isOrderable]=\"options?.orderable\"\n        [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n        [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n        [style.align-content]=\"getFlexAttribute('align-content')\"\n        [style.align-items]=\"getFlexAttribute('align-items')\"\n        [style.display]=\"getFlexAttribute('display')\"\n        [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n        [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n        [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n      <div *ngIf=\"options?.messageLocation === 'bottom'\">\n        <p *ngIf=\"options?.description\"\n        class=\"help-block\"\n        [class]=\"options?.labelHelpBlockClass || ''\"\n        [innerHTML]=\"options?.description\"></p>\n      </div>\n    </fieldset>`,\n  styles: [`\n    .legend { font-weight: bold; }\n    .expandable > legend:before, .expandable > label:before  { content: '▶'; padding-right: .3em; }\n    .expanded > legend:before, .expanded > label:before  { content: '▼'; padding-right: .2em; }\n  `],\n})\nexport class SectionComponent implements OnInit {\n  options: any;\n  expanded = true;\n  containerType: string;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this);\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this);\n    this.options = this.layoutNode.options || {};\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable;\n    switch (this.layoutNode.type) {\n      case 'fieldset': case 'array': case 'tab': case 'advancedfieldset':\n      case 'authfieldset': case 'optionfieldset': case 'selectfieldset':\n        this.containerType = 'fieldset';\n      break;\n      default: // 'div', 'flex', 'section', 'conditional', 'actions', 'tagsinput'\n        this.containerType = 'div';\n      break;\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) { this.expanded = !this.expanded; }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex';\n    if (attribute !== 'flex' && !flexActive) { return null; }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive;\n      case 'display':\n        return flexActive ? 'flex' : 'initial';\n      case 'flex-direction': case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute);\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index];\n      case 'justify-content': case 'align-items': case 'align-content':\n        return this.options[attribute];\n    }\n  }\n}\n",
    "import { Component, Input, Host } from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { hasValue, JsonPointer } from '../shared';\n\n@Component({\n  selector: 'root-widget',\n  template: `\n    <div *ngFor=\"let layoutItem of layout; let i = index\" class=\"layout-root-widget\"\n      [class.form-flex-item]=\"isFlexItem\"\n      [style.align-self]=\"(layoutItem.options || {})['align-self']\"\n      [style.flex-basis]=\"getFlexAttribute(layoutItem, 'flex-basis')\"\n      [style.flex-grow]=\"getFlexAttribute(layoutItem, 'flex-grow')\"\n      [style.flex-shrink]=\"getFlexAttribute(layoutItem, 'flex-shrink')\"\n      [style.order]=\"(layoutItem.options || {}).order\">\n      <div\n        [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"\n        [orderable]=\"isDraggable(layoutItem)\">\n        <select-framework-widget *ngIf=\"showWidget(layoutItem)\"\n          [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n          [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n          [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>\n    </div>`,\n  styles: [`\n    [draggable=true] {\n      transition: all 150ms cubic-bezier(.4, 0, .2, 1);\n    }\n    [draggable=true]:hover {\n      cursor: move;\n      box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n      position: relative; z-index: 10;\n      margin-top: -1px;\n      margin-left: -1px;\n      margin-right: 1px;\n      margin-bottom: 1px;\n    }\n    [draggable=true].drag-target-top {\n      box-shadow: 0 -2px 0 #000;\n      position: relative; z-index: 20;\n    }\n    [draggable=true].drag-target-bottom {\n      box-shadow: 0 2px 0 #000;\n      position: relative; z-index: 20;\n    }\n  `],\n})\nexport class RootComponent {\n  options: any;\n  @Input() dataIndex: number[];\n  @Input() layoutIndex: number[];\n  @Input() layout: any[];\n  @Input() isOrderable: boolean;\n  @Input() isFlexItem = false;\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  isDraggable(node: any): boolean {\n    return node.arrayItem && node.type !== '$ref' &&\n      node.arrayItemType === 'list' && this.isOrderable !== false;\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute);\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index];\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { buildTitleMap } from '../shared';\n\n@Component({\n  selector: 'radios-widget',\n  template: `\n    <label *ngIf=\"options?.title\"\n      [attr.for]=\"'control' + layoutNode?._id\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [style.display]=\"options?.notitle ? 'none' : ''\"\n      [innerHTML]=\"options?.title\"></label>\n\n    <!-- 'horizontal' = radios-inline or radiobuttons -->\n    <div *ngIf=\"layoutOrientation === 'horizontal'\"\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngFor=\"let radioItem of radiosList\"\n        [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n        [class]=\"(options?.itemLabelHtmlClass || '') +\n          ((controlValue + '' === radioItem?.value + '') ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n        <input type=\"radio\"\n          [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n          [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n          [attr.required]=\"options?.required\"\n          [checked]=\"radioItem?.value === controlValue\"\n          [class]=\"options?.fieldHtmlClass || ''\"\n          [disabled]=\"controlDisabled\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [name]=\"controlName\"\n          [value]=\"radioItem?.value\"\n          (change)=\"updateValue($event)\">\n        <span [innerHTML]=\"radioItem?.name\"></span>\n      </label>\n    </div>\n\n    <!-- 'vertical' = regular radios -->\n    <div *ngIf=\"layoutOrientation !== 'horizontal'\">\n      <div *ngFor=\"let radioItem of radiosList\"\n        [class]=\"options?.htmlClass || ''\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [class]=\"(options?.itemLabelHtmlClass || '') +\n            ((controlValue + '' === radioItem?.value + '') ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n          <input type=\"radio\"\n            [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n            [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n            [attr.required]=\"options?.required\"\n            [checked]=\"radioItem?.value === controlValue\"\n            [class]=\"options?.fieldHtmlClass || ''\"\n            [disabled]=\"controlDisabled\"\n            [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n            [name]=\"controlName\"\n            [value]=\"radioItem?.value\"\n            (change)=\"updateValue($event)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </label>\n      </div>\n    </div>`,\n})\nexport class RadiosComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  layoutOrientation = 'vertical';\n  radiosList: any[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    if (this.layoutNode.type === 'radios-inline' ||\n      this.layoutNode.type === 'radiobuttons'\n    ) {\n      this.layoutOrientation = 'horizontal';\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    );\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'number-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <input *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.max]=\"options?.maximum\"\n        [attr.min]=\"options?.minimum\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [title]=\"lastValidNumber\"\n        [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\">\n      <input *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.max]=\"options?.maximum\"\n        [attr.min]=\"options?.minimum\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [title]=\"lastValidNumber\"\n        [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">\n      <span *ngIf=\"layoutNode?.type === 'range'\" [innerHTML]=\"controlValue\"></span>\n    </div>`,\n})\nexport class NumberComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  allowNegative = true;\n  allowDecimal = true;\n  allowExponents = false;\n  lastValidNumber = '';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (this.layoutNode.dataType === 'integer') { this.allowDecimal = false; }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'none-widget',\n  template: ``,\n})\nexport class NoneComponent {\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'message-widget',\n  template: `\n    <span *ngIf=\"message\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [innerHTML]=\"message\"></span>`,\n})\nexport class MessageComponent implements OnInit {\n  options: any;\n  message: string = null;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.message = this.options.help || this.options.helpvalue ||\n      this.options.msg || this.options.message;\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'input-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <input *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\">\n      <input *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">\n        <datalist *ngIf=\"options?.typeahead?.source\"\n          [id]=\"'control' + layoutNode?._id + 'Autocomplete'\">\n          <option *ngFor=\"let word of options?.typeahead?.source\" [value]=\"word\">\n        </datalist>\n    </div>`,\n})\nexport class InputComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: string;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n// TODO: Add this control\n\n@Component({\n  selector: 'file-widget',\n  template: ``,\n})\nexport class FileComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormArray, AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService, TitleMapItem } from '../json-schema-form.service';\nimport { buildTitleMap } from '../shared';\n\n@Component({\n  selector: 'checkboxes-widget',\n  template: `\n    <label *ngIf=\"options?.title\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [style.display]=\"options?.notitle ? 'none' : ''\"\n      [innerHTML]=\"options?.title\"></label>\n\n    <!-- 'horizontal' = checkboxes-inline or checkboxbuttons -->\n    <div *ngIf=\"layoutOrientation === 'horizontal'\" [class]=\"options?.htmlClass || ''\">\n      <label *ngFor=\"let checkboxItem of checkboxList\"\n        [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n        [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n        <input type=\"checkbox\"\n          [attr.required]=\"options?.required\"\n          [checked]=\"checkboxItem.checked\"\n          [class]=\"options?.fieldHtmlClass || ''\"\n          [disabled]=\"controlDisabled\"\n          [id]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n          [name]=\"checkboxItem?.name\"\n          [readonly]=\"options?.readonly ? 'readonly' : null\"\n          [value]=\"checkboxItem.value\"\n          (change)=\"updateValue($event)\">\n        <span [innerHTML]=\"checkboxItem.name\"></span>\n      </label>\n    </div>\n\n    <!-- 'vertical' = regular checkboxes -->\n    <div *ngIf=\"layoutOrientation === 'vertical'\">\n      <div *ngFor=\"let checkboxItem of checkboxList\" [class]=\"options?.htmlClass || ''\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n          [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n          <input type=\"checkbox\"\n            [attr.required]=\"options?.required\"\n            [checked]=\"checkboxItem.checked\"\n            [class]=\"options?.fieldHtmlClass || ''\"\n            [disabled]=\"controlDisabled\"\n            [id]=\"options?.name + '/' + checkboxItem.value\"\n            [name]=\"checkboxItem?.name\"\n            [readonly]=\"options?.readonly ? 'readonly' : null\"\n            [value]=\"checkboxItem.value\"\n            (change)=\"updateValue($event)\">\n          <span [innerHTML]=\"checkboxItem?.name\"></span>\n        </label>\n      </div>\n    </div>`,\n})\nexport class CheckboxesComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  layoutOrientation: string;\n  formArray: AbstractControl;\n  checkboxList: TitleMapItem[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.layoutOrientation = (this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons') ? 'horizontal' : 'vertical';\n    this.jsf.initializeControl(this);\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    );\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this);\n      this.checkboxList.forEach(checkboxItem =>\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value)\n      );\n    }\n  }\n\n  updateValue(event) {\n    for (const checkboxItem of this.checkboxList) {\n      if (event.target.value === checkboxItem.value) {\n        checkboxItem.checked = event.target.checked;\n      }\n    }\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList);\n    }\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'checkbox-widget',\n  template: `\n    <label\n      [attr.for]=\"'control' + layoutNode?._id\"\n      [class]=\"options?.itemLabelHtmlClass || ''\">\n      <input *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        type=\"checkbox\">\n      <input *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [checked]=\"isChecked ? 'checked' : null\"\n        [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [value]=\"controlValue\"\n        type=\"checkbox\"\n        (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </label>`,\n})\nexport class CheckboxComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  trueValue: any = true;\n  falseValue: any = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title;\n    }\n  }\n\n  updateValue(event) {\n    event.preventDefault();\n    this.jsf.updateValue(this, event.target.checked ? this.trueValue : this.falseValue);\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue;\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'button-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <button\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n        <span *ngIf=\"options?.icon || options?.title\"\n          [class]=\"options?.icon\"\n          [innerHTML]=\"options?.title\"></span>\n      </button>\n    </div>`,\n})\nexport class ButtonComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event);\n    } else {\n      this.jsf.updateValue(this, event.target.value);\n    }\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n// TODO: Add this control\n\n@Component({\n  selector: 'one-of-widget',\n  template: ``,\n})\nexport class OneOfComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\n\n@Component({\n  selector: 'add-reference-widget',\n  template: `\n    <button *ngIf=\"showAddButton\"\n      [class]=\"options?.fieldHtmlClass || ''\"\n      [disabled]=\"options?.readonly\"\n      (click)=\"addItem($event)\">\n      <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n      <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n    </button>`,\n    changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class AddReferenceComponent implements OnInit {\n  options: any;\n  itemCount: number;\n  previousLayoutIndex: number[];\n  previousDataIndex: number[];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems;\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    this.jsf.addItem(this);\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this)\n    };\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount);\n  }\n}\n",
    "import { Directive, ElementRef, HostListener, Input, NgZone, OnInit } from '@angular/core';\n\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nimport { JsonPointer } from '../shared/jsonpointer.functions';\n\n/**\n * OrderableDirective\n *\n * Enables array elements to be reordered by dragging and dropping.\n *\n * Only works for arrays that have at least two elements.\n *\n * Also detects arrays-within-arrays, and correctly moves either\n * the child array element or the parent array element,\n * depending on the drop targert.\n *\n * Listeners for movable element being dragged:\n * - dragstart: add 'dragging' class to element, set effectAllowed = 'move'\n * - dragover: set dropEffect = 'move'\n * - dragend: remove 'dragging' class from element\n *\n * Listeners for stationary items being dragged over:\n * - dragenter: add 'drag-target-...' classes to element\n * - dragleave: remove 'drag-target-...' classes from element\n * - drop: remove 'drag-target-...' classes from element, move dropped array item\n */\n@Directive({\n  selector: '[orderable]',\n})\nexport class OrderableDirective implements OnInit {\n  arrayLayoutIndex: string;\n  element: any;\n  overParentElement = false;\n  overChildElement = false;\n  @Input() orderable: boolean;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private elementRef: ElementRef,\n    private jsf: JsonSchemaFormService,\n    private ngZone: NgZone\n  ) { }\n\n  ngOnInit() {\n    if (this.orderable && this.layoutNode && this.layoutIndex && this.dataIndex) {\n      this.element = this.elementRef.nativeElement;\n      this.element.draggable = true;\n      this.arrayLayoutIndex = 'move:' + this.layoutIndex.slice(0, -1).toString();\n\n      this.ngZone.runOutsideAngular(() => {\n\n        // Listeners for movable element being dragged:\n\n        this.element.addEventListener('dragstart', (event) => {\n          event.dataTransfer.effectAllowed = 'move';\n          // Hack to bypass stupid HTML drag-and-drop dataTransfer protection\n          // so drag source info will be available on dragenter\n          const sourceArrayIndex = this.dataIndex[this.dataIndex.length - 1];\n          sessionStorage.setItem(this.arrayLayoutIndex, sourceArrayIndex + '');\n        });\n\n        this.element.addEventListener('dragover', (event) => {\n          if (event.preventDefault) { event.preventDefault(); }\n          event.dataTransfer.dropEffect = 'move';\n          return false;\n        });\n\n        // Listeners for stationary items being dragged over:\n\n        this.element.addEventListener('dragenter', (event) => {\n          // Part 1 of a hack, inspired by Dragster, to simulate mouseover and mouseout\n          // behavior while dragging items - http://bensmithett.github.io/dragster/\n          if (this.overParentElement) {\n            return this.overChildElement = true;\n          } else {\n            this.overParentElement = true;\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex);\n          if (sourceArrayIndex !== null) {\n            if (this.dataIndex[this.dataIndex.length - 1] < +sourceArrayIndex) {\n              this.element.classList.add('drag-target-top');\n            } else if (this.dataIndex[this.dataIndex.length - 1] > +sourceArrayIndex) {\n              this.element.classList.add('drag-target-bottom');\n            }\n          }\n        });\n\n        this.element.addEventListener('dragleave', (event) => {\n          // Part 2 of the Dragster hack\n          if (this.overChildElement) {\n            this.overChildElement = false;\n          } else if (this.overParentElement) {\n            this.overParentElement = false;\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex);\n          if (!this.overParentElement && !this.overChildElement && sourceArrayIndex !== null) {\n            this.element.classList.remove('drag-target-top');\n            this.element.classList.remove('drag-target-bottom');\n          }\n        });\n\n        this.element.addEventListener('drop', (event) => {\n          this.element.classList.remove('drag-target-top');\n          this.element.classList.remove('drag-target-bottom');\n          // Confirm that drop target is another item in the same array as source item\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex);\n          const destArrayIndex = this.dataIndex[this.dataIndex.length - 1];\n          if (sourceArrayIndex !== null && +sourceArrayIndex !== destArrayIndex) {\n            // Move array item\n            this.jsf.moveArrayItem(this, +sourceArrayIndex, destArrayIndex);\n          }\n          sessionStorage.removeItem(this.arrayLayoutIndex);\n          return false;\n        });\n\n      });\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\nimport { filter } from 'rxjs-compat/operators/filter';\nimport { Subject } from 'rxjs-compat/Subject';\n\nimport * as Ajv from 'ajv';\nimport * as _ from 'lodash';\n\nimport {\n  hasValue, isArray, isDefined, isEmpty, isObject, isString\n} from './shared/validator.functions';\nimport {\n  fixTitle, forEach, hasOwn, toTitleCase\n} from './shared/utility.functions';\nimport { JsonPointer } from './shared/jsonpointer.functions';\nimport {\n  buildSchemaFromData, buildSchemaFromLayout, removeRecursiveReferences,\n  resolveSchemaReferences\n} from './shared/json-schema.functions';\nimport {\n  buildFormGroup, buildFormGroupTemplate, formatFormData, getControl\n} from './shared/form-group.functions';\nimport { buildLayout, getLayoutNode } from './shared/layout.functions';\nimport { enValidationMessages } from './locale/en-validation-messages';\nimport { frValidationMessages } from './locale/fr-validation-messages';\n\nexport interface TitleMapItem {\n  name?: string; value?: any; checked?: boolean; group?: string; items?: TitleMapItem[];\n}\nexport interface ErrorMessages {\n  [control_name: string]: { message: string|Function|Object, code: string }[];\n}\n\n\n@Injectable()\nexport class JsonSchemaFormService {\n  JsonFormCompatibility = false;\n  ReactJsonSchemaFormCompatibility = false;\n  AngularSchemaFormCompatibility = false;\n  tpldata: any = {};\n\n  ajvOptions: any = { allErrors: true, jsonPointers: true, unknownFormats: 'ignore' };\n  ajv: any = new Ajv(this.ajvOptions); // AJV: Another JSON Schema Validator\n  validateFormData: any = null; // Compiled AJV function to validate active form's schema\n\n  formValues: any = {}; // Internal form data (may not have correct types)\n  data: any = {}; // Output form data (formValues, formatted with correct data types)\n  schema: any = {}; // Internal JSON Schema\n  layout: any[] = []; // Internal form layout\n  formGroupTemplate: any = {}; // Template used to create formGroup\n  formGroup: any = null; // Angular formGroup, which powers the reactive form\n  framework: any = null; // Active framework component\n  formOptions: any; // Active options, used to configure the form\n\n  validData: any = null; // Valid form data (or null) (=== isValid ? data : null)\n  isValid: boolean = null; // Is current form data valid?\n  ajvErrors: any = null; // Ajv errors for current data\n  validationErrors: any = null; // Any validation errors for current data\n  dataErrors: any = new Map(); //\n  formValueSubscription: any = null; // Subscription to formGroup.valueChanges observable (for un- and re-subscribing)\n  dataChanges: Subject<any> = new Subject(); // Form data observable\n  isValidChanges: Subject<any> = new Subject(); // isValid observable\n  validationErrorChanges: Subject<any> = new Subject(); // validationErrors observable\n\n  arrayMap: Map<string, number> = new Map(); // Maps arrays in data object and number of tuple values\n  dataMap: Map<string, any> = new Map(); // Maps paths in form data to schema and formGroup paths\n  dataRecursiveRefMap: Map<string, string> = new Map(); // Maps recursive reference points in form data\n  schemaRecursiveRefMap: Map<string, string> = new Map(); // Maps recursive reference points in schema\n  schemaRefLibrary: any = {}; // Library of schemas for resolving schema $refs\n  layoutRefLibrary: any = { '': null }; // Library of layout nodes for adding to form\n  templateRefLibrary: any = {}; // Library of formGroup templates for adding to form\n  hasRootReference = false; // Does the form include a recursive reference to itself?\n\n  language = 'en-US'; // Does the form include a recursive reference to itself?\n\n  // Default global form options\n  defaultFormOptions: any = {\n    addSubmit: 'auto', // Add a submit button if layout does not have one?\n      // for addSubmit: true = always, false = never,\n      // 'auto' = only if layout is undefined (form is built from schema alone)\n    debug: false, // Show debugging output?\n    disableInvalidSubmit: true, // Disable submit if form invalid?\n    formDisabled: false, // Set entire form as disabled? (not editable, and disables outputs)\n    formReadonly: false, // Set entire form as read only? (not editable, but outputs still enabled)\n    fieldsRequired: false, // (set automatically) Are there any required fields in the form?\n    framework: 'no-framework', // The framework to load\n    loadExternalAssets: false, // Load external css and JavaScript for framework?\n    pristine: { errors: true, success: true },\n    supressPropertyTitles: false,\n    setSchemaDefaults: 'auto', // Set fefault values from schema?\n      // true = always set (unless overridden by layout default or formValues)\n      // false = never set\n      // 'auto' = set in addable components, and everywhere if formValues not set\n    setLayoutDefaults: 'auto', // Set fefault values from layout?\n      // true = always set (unless overridden by formValues)\n      // false = never set\n      // 'auto' = set in addable components, and everywhere if formValues not set\n    validateOnRender: 'auto', // Validate fields immediately, before they are touched?\n      // true = validate all fields immediately\n      // false = only validate fields after they are touched by user\n      // 'auto' = validate fields with values immediately, empty fields after they are touched\n    widgets: {}, // Any custom widgets to load\n    defautWidgetOptions: { // Default options for form control widgets\n      listItems: 1, // Number of list items to initially add to arrays with no default value\n      addable: true, // Allow adding items to an array or $ref point?\n      orderable: true, // Allow reordering items within an array?\n      removable: true, // Allow removing items from an array or $ref point?\n      enableErrorState: true, // Apply 'has-error' class when field fails validation?\n      // disableErrorState: false, // Don't apply 'has-error' class when field fails validation?\n      enableSuccessState: true, // Apply 'has-success' class when field validates?\n      // disableSuccessState: false, // Don't apply 'has-success' class when field validates?\n      feedback: false, // Show inline feedback icons?\n      feedbackOnRender: false, // Show errorMessage on Render?\n      notitle: false, // Hide title?\n      disabled: false, // Set control as disabled? (not editable, and excluded from output)\n      readonly: false, // Set control as read only? (not editable, but included in output)\n      returnEmptyFields: true, // return values for fields that contain no data?\n      validationMessages: {} // set by setLanguage()\n    },\n  };\n\n  constructor() {\n    this.setLanguage(this.language);\n  }\n\n  setLanguage(language: string = 'en-US') {\n    this.language = language;\n    const validationMessages = language.slice(0, 2) === 'fr' ?\n      frValidationMessages : enValidationMessages;\n    this.defaultFormOptions.defautWidgetOptions.validationMessages =\n      _.cloneDeep(validationMessages);\n  }\n\n  getData() { return this.data; }\n\n  getSchema() { return this.schema; }\n\n  getLayout() { return this.layout; }\n\n  resetAllValues() {\n    this.JsonFormCompatibility = false;\n    this.ReactJsonSchemaFormCompatibility = false;\n    this.AngularSchemaFormCompatibility = false;\n    this.tpldata = {};\n    this.validateFormData = null;\n    this.formValues = {};\n    this.schema = {};\n    this.layout = [];\n    this.formGroupTemplate = {};\n    this.formGroup = null;\n    this.framework = null;\n    this.data = {};\n    this.validData = null;\n    this.isValid = null;\n    this.validationErrors = null;\n    this.arrayMap = new Map();\n    this.dataMap = new Map();\n    this.dataRecursiveRefMap = new Map();\n    this.schemaRecursiveRefMap = new Map();\n    this.layoutRefLibrary = {};\n    this.schemaRefLibrary = {};\n    this.templateRefLibrary = {};\n    this.formOptions = _.cloneDeep(this.defaultFormOptions);\n  }\n\n  /**\n   * 'buildRemoteError' function\n   *\n   * Example errors:\n   * {\n   *   last_name: [ {\n   *     message: 'Last name must by start with capital letter.',\n   *     code: 'capital_letter'\n   *   } ],\n   *   email: [ {\n   *     message: 'Email must be from example.com domain.',\n   *     code: 'special_domain'\n   *   }, {\n   *     message: 'Email must contain an @ symbol.',\n   *     code: 'at_symbol'\n   *   } ]\n   * }\n   * @param {ErrorMessages} errors\n   */\n  buildRemoteError(errors: ErrorMessages) {\n    forEach(errors, (value, key) => {\n      if (key in this.formGroup.controls) {\n        for (const error of value) {\n          const err = {};\n          err[error['code']] = error['message'];\n          this.formGroup.get(key).setErrors(err, { emitEvent: true });\n        }\n      }\n    });\n  }\n\n  validateData(newValue: any, updateSubscriptions = true): void {\n\n    // Format raw form data to correct data types\n    this.data = formatFormData(\n      newValue, this.dataMap, this.dataRecursiveRefMap,\n      this.arrayMap, this.formOptions.returnEmptyFields\n    );\n    this.isValid = this.validateFormData(this.data);\n    this.validData = this.isValid ? this.data : null;\n    const compileErrors = errors => {\n      const compiledErrors = {};\n      (errors || []).forEach(error => {\n        if (!compiledErrors[error.dataPath]) { compiledErrors[error.dataPath] = []; }\n        compiledErrors[error.dataPath].push(error.message);\n      });\n      return compiledErrors;\n    };\n    this.ajvErrors = this.validateFormData.errors;\n    this.validationErrors = compileErrors(this.validateFormData.errors);\n    if (updateSubscriptions) {\n      this.dataChanges.next(this.data);\n      this.isValidChanges.next(this.isValid);\n      this.validationErrorChanges.next(this.ajvErrors);\n    }\n  }\n\n  buildFormGroupTemplate(formValues: any = null, setValues = true) {\n    this.formGroupTemplate = buildFormGroupTemplate(this, formValues, setValues);\n  }\n\n  buildFormGroup() {\n    this.formGroup = <FormGroup>buildFormGroup(this.formGroupTemplate);\n    if (this.formGroup) {\n      this.compileAjvSchema();\n      this.validateData(this.formGroup.value);\n\n      // Set up observables to emit data and validation info when form data changes\n      if (this.formValueSubscription) { this.formValueSubscription.unsubscribe(); }\n      this.formValueSubscription = this.formGroup.valueChanges\n        .subscribe(formValue => this.validateData(formValue));\n    }\n  }\n\n  buildLayout(widgetLibrary: any) {\n    this.layout = buildLayout(this, widgetLibrary);\n  }\n\n  setOptions(newOptions: any) {\n    if (isObject(newOptions)) {\n      const addOptions = _.cloneDeep(newOptions);\n      // Backward compatibility for 'defaultOptions' (renamed 'defautWidgetOptions')\n      if (isObject(addOptions.defaultOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defaultOptions);\n        delete addOptions.defaultOptions;\n      }\n      if (isObject(addOptions.defautWidgetOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defautWidgetOptions);\n        delete addOptions.defautWidgetOptions;\n      }\n      Object.assign(this.formOptions, addOptions);\n\n      // convert disableErrorState / disableSuccessState to enable...\n      const globalDefaults = this.formOptions.defautWidgetOptions;\n      ['ErrorState', 'SuccessState']\n        .filter(suffix => hasOwn(globalDefaults, 'disable' + suffix))\n        .forEach(suffix => {\n          globalDefaults['enable' + suffix] = !globalDefaults['disable' + suffix];\n          delete globalDefaults['disable' + suffix];\n        });\n    }\n  }\n\n  compileAjvSchema() {\n    if (!this.validateFormData) {\n\n      // if 'ui:order' exists in properties, move it to root before compiling with ajv\n      if (Array.isArray(this.schema.properties['ui:order'])) {\n        this.schema['ui:order'] = this.schema.properties['ui:order'];\n        delete this.schema.properties['ui:order'];\n      }\n      this.ajv.removeSchema(this.schema);\n      this.validateFormData = this.ajv.compile(this.schema);\n    }\n  }\n\n  buildSchemaFromData(data?: any, requireAllFields = false): any {\n    if (data) { return buildSchemaFromData(data, requireAllFields); }\n    this.schema = buildSchemaFromData(this.formValues, requireAllFields);\n  }\n\n  buildSchemaFromLayout(layout?: any): any {\n    if (layout) { return buildSchemaFromLayout(layout); }\n    this.schema = buildSchemaFromLayout(this.layout);\n  }\n\n\n  setTpldata(newTpldata: any = {}): void {\n    this.tpldata = newTpldata;\n  }\n\n  parseText(\n    text = '', value: any = {}, values: any = {}, key: number|string = null\n  ): string {\n    if (!text || !/{{.+?}}/.test(text)) { return text; }\n    return text.replace(/{{(.+?)}}/g, (...a) =>\n      this.parseExpression(a[1], value, values, key, this.tpldata)\n    );\n  }\n\n  parseExpression(\n    expression = '', value: any = {}, values: any = {},\n    key: number|string = null, tpldata: any = null\n  ) {\n    if (typeof expression !== 'string') { return ''; }\n    const index = typeof key === 'number' ? (key + 1) + '' : (key || '');\n    expression = expression.trim();\n    if ((expression[0] === '\\'' || expression[0] === '\"') &&\n      expression[0] === expression[expression.length - 1] &&\n      expression.slice(1, expression.length - 1).indexOf(expression[0]) === -1\n    ) {\n      return expression.slice(1, expression.length - 1);\n    }\n    if (expression === 'idx' || expression === '$index') { return index; }\n    if (expression === 'value' && !hasOwn(values, 'value')) { return value; }\n    if (['\"', '\\'', ' ', '||', '&&', '+'].every(delim => expression.indexOf(delim) === -1)) {\n      const pointer = JsonPointer.parseObjectPath(expression);\n      return pointer[0] === 'value' && JsonPointer.has(value, pointer.slice(1)) ?\n          JsonPointer.get(value, pointer.slice(1)) :\n        pointer[0] === 'values' && JsonPointer.has(values, pointer.slice(1)) ?\n          JsonPointer.get(values, pointer.slice(1)) :\n        pointer[0] === 'tpldata' && JsonPointer.has(tpldata, pointer.slice(1)) ?\n          JsonPointer.get(tpldata, pointer.slice(1)) :\n        JsonPointer.has(values, pointer) ? JsonPointer.get(values, pointer) : '';\n    }\n    if (expression.indexOf('[idx]') > -1) {\n      expression = expression.replace(/\\[idx\\]/g, <string>index);\n    }\n    if (expression.indexOf('[$index]') > -1) {\n      expression = expression.replace(/\\[$index\\]/g, <string>index);\n    }\n    // TODO: Improve expression evaluation by parsing quoted strings first\n    // let expressionArray = expression.match(/([^\"']+|\"[^\"]+\"|'[^']+')/g);\n    if (expression.indexOf('||') > -1) {\n      return expression.split('||').reduce((all, term) =>\n        all || this.parseExpression(term, value, values, key, tpldata), ''\n      );\n    }\n    if (expression.indexOf('&&') > -1) {\n      return expression.split('&&').reduce((all, term) =>\n        all && this.parseExpression(term, value, values, key, tpldata), ' '\n      ).trim();\n    }\n    if (expression.indexOf('+') > -1) {\n      return expression.split('+')\n        .map(term => this.parseExpression(term, value, values, key, tpldata))\n        .join('');\n    }\n    return '';\n  }\n\n  setArrayItemTitle(\n    parentCtx: any = {}, childNode: any = null, index: number = null\n  ): string {\n    const parentNode = parentCtx.layoutNode;\n    const parentValues: any = this.getFormControlValue(parentCtx);\n    const isArrayItem =\n      (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues);\n    const text = JsonPointer.getFirst(\n      isArrayItem && childNode.type !== '$ref' ? [\n        [childNode, '/options/legend'],\n        [childNode, '/options/title'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend'],\n      ] : [\n        [childNode, '/options/title'],\n        [childNode, '/options/legend'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend']\n      ]\n    );\n    if (!text) { return text; }\n    const childValue = isArray(parentValues) && index < parentValues.length ?\n      parentValues[index] : parentValues;\n    return this.parseText(text, childValue, parentValues, index);\n  }\n\n  setItemTitle(ctx: any) {\n    return !ctx.options.title && /^(\\d+|-)$/.test(ctx.layoutNode.name) ?\n      null :\n      this.parseText(\n        ctx.options.title || toTitleCase(ctx.layoutNode.name),\n        this.getFormControlValue(this),\n        (this.getFormControlGroup(this) || <any>{}).value,\n        ctx.dataIndex[ctx.dataIndex.length - 1]\n      );\n  }\n\n  evaluateCondition(layoutNode: any, dataIndex: number[]): boolean {\n    const arrayIndex = dataIndex && dataIndex[dataIndex.length - 1];\n    let result = true;\n    if (hasValue((layoutNode.options || {}).condition)) {\n      if (typeof layoutNode.options.condition === 'string') {\n        let pointer = layoutNode.options.condition;\n        if (hasValue(arrayIndex)) {\n          pointer = pointer.replace('[arrayIndex]', `[${arrayIndex}]`);\n        }\n        pointer = JsonPointer.parseObjectPath(pointer);\n        result = !!JsonPointer.get(this.data, pointer);\n        if (!result && pointer[0] === 'model') {\n          result = !!JsonPointer.get({ model: this.data }, pointer);\n        }\n      } else if (typeof layoutNode.options.condition === 'function') {\n        result = layoutNode.options.condition(this.data);\n      } else if (typeof layoutNode.options.condition.functionBody === 'string') {\n        try {\n          const dynFn = new Function(\n            'model', 'arrayIndices', layoutNode.options.condition.functionBody\n          );\n          result = dynFn(this.data, dataIndex);\n        } catch (e) {\n          result = true;\n          console.error('condition functionBody errored out on evaluation: ' + layoutNode.options.condition.functionBody);\n        }\n      }\n    }\n    return result;\n  }\n\n  initializeControl(ctx: any, bind = true): boolean {\n    if (!isObject(ctx)) { return false; }\n    if (isEmpty(ctx.options)) {\n      ctx.options = !isEmpty((ctx.layoutNode || {}).options) ?\n        ctx.layoutNode.options : _.cloneDeep(this.formOptions);\n    }\n    ctx.formControl = this.getFormControl(ctx);\n    ctx.boundControl = bind && !!ctx.formControl;\n    if (ctx.formControl) {\n      ctx.controlName = this.getFormControlName(ctx);\n      ctx.controlValue = ctx.formControl.value;\n      ctx.controlDisabled = ctx.formControl.disabled;\n      ctx.options.errorMessage = ctx.formControl.status === 'VALID' ? null :\n        this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages);\n      ctx.options.showErrors = this.formOptions.validateOnRender === true ||\n        (this.formOptions.validateOnRender === 'auto' && hasValue(ctx.controlValue));\n      ctx.formControl.statusChanges.subscribe(status =>\n        ctx.options.errorMessage = status === 'VALID' ? null :\n          this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      );\n      ctx.formControl.valueChanges.subscribe(value => {\n        if (!_.isEqual(ctx.controlValue, value)) { ctx.controlValue = value; }\n      });\n    } else {\n      ctx.controlName = ctx.layoutNode.name;\n      ctx.controlValue = ctx.layoutNode.value || null;\n      const dataPointer = this.getDataPointer(ctx);\n      if (bind && dataPointer) {\n        console.error(`warning: control \"${dataPointer}\" is not bound to the Angular FormGroup.`);\n      }\n    }\n    return ctx.boundControl;\n  }\n\n  formatErrors(errors: any, validationMessages: any = {}): string {\n    if (isEmpty(errors)) { return null; }\n    if (!isObject(validationMessages)) { validationMessages = {}; }\n    const addSpaces = string => string[0].toUpperCase() + (string.slice(1) || '')\n      .replace(/([a-z])([A-Z])/g, '$1 $2').replace(/_/g, ' ');\n    const formatError = (error) => typeof error === 'object' ?\n      Object.keys(error).map(key =>\n        error[key] === true ? addSpaces(key) :\n        error[key] === false ? 'Not ' + addSpaces(key) :\n        addSpaces(key) + ': ' + formatError(error[key])\n      ).join(', ') :\n      addSpaces(error.toString());\n    const messages = [];\n    return Object.keys(errors)\n      // Hide 'required' error, unless it is the only one\n      .filter(errorKey => errorKey !== 'required' || Object.keys(errors).length === 1)\n      .map(errorKey =>\n        // If validationMessages is a string, return it\n        typeof validationMessages === 'string' ? validationMessages :\n        // If custom error message is a function, return function result\n        typeof validationMessages[errorKey] === 'function' ?\n          validationMessages[errorKey](errors[errorKey]) :\n        // If custom error message is a string, replace placeholders and return\n        typeof validationMessages[errorKey] === 'string' ?\n          // Does error message have any {{property}} placeholders?\n          !/{{.+?}}/.test(validationMessages[errorKey]) ?\n            validationMessages[errorKey] :\n            // Replace {{property}} placeholders with values\n            Object.keys(errors[errorKey])\n              .reduce((errorMessage, errorProperty) => errorMessage.replace(\n                new RegExp('{{' + errorProperty + '}}', 'g'),\n                errors[errorKey][errorProperty]\n              ), validationMessages[errorKey]) :\n          // If no custom error message, return formatted error data instead\n          addSpaces(errorKey) + ' Error: ' + formatError(errors[errorKey])\n      ).join('<br>');\n  }\n\n  updateValue(ctx: any, value: any): void {\n\n    // Set value of current control\n    ctx.controlValue = value;\n    if (ctx.boundControl) {\n      ctx.formControl.setValue(value);\n      ctx.formControl.markAsDirty();\n    }\n    ctx.layoutNode.value = value;\n\n    // Set values of any related controls in copyValueTo array\n    if (isArray(ctx.options.copyValueTo)) {\n      for (const item of ctx.options.copyValueTo) {\n        const targetControl = getControl(this.formGroup, item);\n        if (isObject(targetControl) && typeof targetControl.setValue === 'function') {\n          targetControl.setValue(value);\n          targetControl.markAsDirty();\n        }\n      }\n    }\n  }\n\n  updateArrayCheckboxList(ctx: any, checkboxList: TitleMapItem[]): void {\n    const formArray = <FormArray>this.getFormControl(ctx);\n\n    // Remove all existing items\n    while (formArray.value.length) { formArray.removeAt(0); }\n\n    // Re-add an item for each checked box\n    const refPointer = removeRecursiveReferences(\n      ctx.layoutNode.dataPointer + '/-', this.dataRecursiveRefMap, this.arrayMap\n    );\n    for (const checkboxItem of checkboxList) {\n      if (checkboxItem.checked) {\n        const newFormControl = buildFormGroup(this.templateRefLibrary[refPointer]);\n        newFormControl.setValue(checkboxItem.value);\n        formArray.push(newFormControl);\n      }\n    }\n    formArray.markAsDirty();\n  }\n\n  getFormControl(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) { return null; }\n    return getControl(this.formGroup, this.getDataPointer(ctx));\n  }\n\n  getFormControlValue(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) { return null; }\n    const control = getControl(this.formGroup, this.getDataPointer(ctx));\n    return control ? control.value : null;\n  }\n\n  getFormControlGroup(ctx: any): FormArray | FormGroup {\n    if (!ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer)) { return null; }\n    return getControl(this.formGroup, this.getDataPointer(ctx), true);\n  }\n\n  getFormControlName(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) { return null; }\n    return JsonPointer.toKey(this.getDataPointer(ctx));\n  }\n\n  getLayoutArray(ctx: any): any[] {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -1);\n  }\n\n  getParentNode(ctx: any): any {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -2);\n  }\n\n  getDataPointer(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) { return null; }\n    return JsonPointer.toIndexedPointer(\n      ctx.layoutNode.dataPointer, ctx.dataIndex, this.arrayMap\n    );\n  }\n\n  getLayoutPointer(ctx: any): string {\n    if (!hasValue(ctx.layoutIndex)) { return null; }\n    return '/' + ctx.layoutIndex.join('/items/');\n  }\n\n  isControlBound(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) { return false; }\n    const controlGroup = this.getFormControlGroup(ctx);\n    const name = this.getFormControlName(ctx);\n    return controlGroup ? hasOwn(controlGroup.controls, name) : false;\n  }\n\n  addItem(ctx: any, name?: string): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.$ref) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) { return false; }\n\n    // Create a new Angular form control from a template in templateRefLibrary\n    const newFormGroup = buildFormGroup(this.templateRefLibrary[ctx.layoutNode.$ref]);\n\n    // Add the new form control to the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Add new array item to formArray\n      (<FormArray>this.getFormControlGroup(ctx)).push(newFormGroup);\n    } else { // Add new $ref item to formGroup\n      (<FormGroup>this.getFormControlGroup(ctx))\n        .addControl(name || this.getFormControlName(ctx), newFormGroup);\n    }\n\n    // Copy a new layoutNode from layoutRefLibrary\n    const newLayoutNode = getLayoutNode(ctx.layoutNode, this);\n    newLayoutNode.arrayItem = ctx.layoutNode.arrayItem;\n    if (ctx.layoutNode.arrayItemType) {\n      newLayoutNode.arrayItemType = ctx.layoutNode.arrayItemType;\n    } else {\n      delete newLayoutNode.arrayItemType;\n    }\n    if (name) {\n      newLayoutNode.name = name;\n      newLayoutNode.dataPointer += '/' + JsonPointer.escape(name);\n      newLayoutNode.options.title = fixTitle(name);\n    }\n\n    // Add the new layoutNode to the form layout\n    JsonPointer.insert(this.layout, this.getLayoutPointer(ctx), newLayoutNode);\n\n    return true;\n  }\n\n  moveArrayItem(ctx: any, oldIndex: number, newIndex: number): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex) ||\n      !isDefined(oldIndex) || !isDefined(newIndex) || oldIndex === newIndex\n    ) { return false; }\n\n    // Move item in the formArray\n    const formArray = <FormArray>this.getFormControlGroup(ctx);\n    const arrayItem = formArray.at(oldIndex);\n    formArray.removeAt(oldIndex);\n    formArray.insert(newIndex, arrayItem);\n    formArray.updateValueAndValidity();\n\n    // Move layout item\n    const layoutArray = this.getLayoutArray(ctx);\n    layoutArray.splice(newIndex, 0, layoutArray.splice(oldIndex, 1)[0]);\n    return true;\n  }\n\n  removeItem(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) { return false; }\n\n    // Remove the Angular form control from the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Remove array item from formArray\n      (<FormArray>this.getFormControlGroup(ctx))\n        .removeAt(ctx.dataIndex[ctx.dataIndex.length - 1]);\n    } else { // Remove $ref item from formGroup\n      (<FormGroup>this.getFormControlGroup(ctx))\n        .removeControl(this.getFormControlName(ctx));\n    }\n\n    // Remove layoutNode from layout\n    JsonPointer.remove(this.layout, this.getLayoutPointer(ctx));\n    return true;\n  }\n}\n",
    "export const frValidationMessages: any = { // French error messages\n  required: 'Est obligatoire.',\n  minLength: 'Doit avoir minimum {{minimumLength}} caractères (actuellement: {{currentLength}})',\n  maxLength: 'Doit avoir maximum {{maximumLength}} caractères (actuellement: {{currentLength}})',\n  pattern: 'Doit respecter: {{requiredPattern}}',\n  format: function (error) {\n    switch (error.requiredFormat) {\n      case 'date':\n        return 'Doit être une date, tel que \"2000-12-31\"';\n      case 'time':\n        return 'Doit être une heure, tel que \"16:20\" ou \"03:14:15.9265\"';\n      case 'date-time':\n        return 'Doit être une date et une heure, tel que \"2000-03-14T01:59\" ou \"2000-03-14T01:59:26.535Z\"';\n      case 'email':\n        return 'Doit être une adresse e-mail, tel que \"name@example.com\"';\n      case 'hostname':\n        return 'Doit être un nom de domaine, tel que \"example.com\"';\n      case 'ipv4':\n        return 'Doit être une adresse IPv4, tel que \"127.0.0.1\"';\n      case 'ipv6':\n        return 'Doit être une adresse IPv6, tel que \"1234:5678:9ABC:DEF0:1234:5678:9ABC:DEF0\"';\n      // TODO: add examples for 'uri', 'uri-reference', and 'uri-template'\n      // case 'uri': case 'uri-reference': case 'uri-template':\n      case 'url':\n        return 'Doit être une URL, tel que \"http://www.example.com/page.html\"';\n      case 'uuid':\n        return 'Doit être un UUID, tel que \"12345678-9ABC-DEF0-1234-56789ABCDEF0\"';\n      case 'color':\n        return 'Doit être une couleur, tel que \"#FFFFFF\" or \"rgb(255, 255, 255)\"';\n      case 'json-pointer':\n        return 'Doit être un JSON Pointer, tel que \"/pointer/to/something\"';\n      case 'relative-json-pointer':\n        return 'Doit être un relative JSON Pointer, tel que \"2/pointer/to/something\"';\n      case 'regex':\n        return 'Doit être une expression régulière, tel que \"(1-)?\\\\d{3}-\\\\d{3}-\\\\d{4}\"';\n      default:\n        return 'Doit être avoir le format correct: ' + error.requiredFormat;\n    }\n  },\n  minimum: 'Doit être supérieur à {{minimumValue}}',\n  exclusiveMinimum: 'Doit avoir minimum {{exclusiveMinimumValue}} charactères',\n  maximum: 'Doit être inférieur à {{maximumValue}}',\n  exclusiveMaximum: 'Doit avoir maximum {{exclusiveMaximumValue}} charactères',\n  multipleOf: function (error) {\n    if ((1 / error.multipleOfValue) % 10 === 0) {\n      const decimals = Math.log10(1 / error.multipleOfValue);\n      return `Doit comporter ${decimals} ou moins de decimales.`;\n    } else {\n      return `Doit être un multiple de ${error.multipleOfValue}.`;\n    }\n  },\n  minProperties: 'Doit comporter au minimum {{minimumProperties}} éléments',\n  maxProperties: 'Doit comporter au maximum {{maximumProperties}} éléments',\n  minItems: 'Doit comporter au minimum {{minimumItems}} éléments',\n  maxItems: 'Doit comporter au maximum {{minimumItems}} éléments',\n  uniqueItems: 'Tous les éléments doivent être uniques',\n  // Note: No default error messages for 'type', 'const', 'enum', or 'dependencies'\n};\n",
    "export const enValidationMessages: any = { // Default English error messages\n  required: 'This field is required.',\n  minLength: 'Must be {{minimumLength}} characters or longer (current length: {{currentLength}})',\n  maxLength: 'Must be {{maximumLength}} characters or shorter (current length: {{currentLength}})',\n  pattern: 'Must match pattern: {{requiredPattern}}',\n  format: function (error) {\n    switch (error.requiredFormat) {\n      case 'date':\n        return 'Must be a date, like \"2000-12-31\"';\n      case 'time':\n        return 'Must be a time, like \"16:20\" or \"03:14:15.9265\"';\n      case 'date-time':\n        return 'Must be a date-time, like \"2000-03-14T01:59\" or \"2000-03-14T01:59:26.535Z\"';\n      case 'email':\n        return 'Must be an email address, like \"name@example.com\"';\n      case 'hostname':\n        return 'Must be a hostname, like \"example.com\"';\n      case 'ipv4':\n        return 'Must be an IPv4 address, like \"127.0.0.1\"';\n      case 'ipv6':\n        return 'Must be an IPv6 address, like \"1234:5678:9ABC:DEF0:1234:5678:9ABC:DEF0\"';\n      // TODO: add examples for 'uri', 'uri-reference', and 'uri-template'\n      // case 'uri': case 'uri-reference': case 'uri-template':\n      case 'url':\n        return 'Must be a url, like \"http://www.example.com/page.html\"';\n      case 'uuid':\n        return 'Must be a uuid, like \"12345678-9ABC-DEF0-1234-56789ABCDEF0\"';\n      case 'color':\n        return 'Must be a color, like \"#FFFFFF\" or \"rgb(255, 255, 255)\"';\n      case 'json-pointer':\n        return 'Must be a JSON Pointer, like \"/pointer/to/something\"';\n      case 'relative-json-pointer':\n        return 'Must be a relative JSON Pointer, like \"2/pointer/to/something\"';\n      case 'regex':\n        return 'Must be a regular expression, like \"(1-)?\\\\d{3}-\\\\d{3}-\\\\d{4}\"';\n      default:\n        return 'Must be a correctly formatted ' + error.requiredFormat;\n    }\n  },\n  minimum: 'Must be {{minimumValue}} or more',\n  exclusiveMinimum: 'Must be more than {{exclusiveMinimumValue}}',\n  maximum: 'Must be {{maximumValue}} or less',\n  exclusiveMaximum: 'Must be less than {{exclusiveMaximumValue}}',\n  multipleOf: function (error) {\n    if ((1 / error.multipleOfValue) % 10 === 0) {\n      const decimals = Math.log10(1 / error.multipleOfValue);\n      return `Must have ${decimals} or fewer decimal places.`;\n    } else {\n      return `Must be a multiple of ${error.multipleOfValue}.`;\n    }\n  },\n  minProperties: 'Must have {{minimumProperties}} or more items (current items: {{currentProperties}})',\n  maxProperties: 'Must have {{maximumProperties}} or fewer items (current items: {{currentProperties}})',\n  minItems: 'Must have {{minimumItems}} or more items (current items: {{currentItems}})',\n  maxItems: 'Must have {{maximumItems}} or fewer items (current items: {{currentItems}})',\n  uniqueItems: 'All items must be unique',\n  // Note: No default error messages for 'type', 'const', 'enum', or 'dependencies'\n};\n",
    "/**\n * 'dateToString' function\n *\n * @param  { Date | string } date\n * @param  { any } options\n * @return { string }\n */\nexport function dateToString(date, options: any = {}) {\n  const dateFormat = options.dateFormat || 'YYYY-MM-DD';\n  // TODO: Use options.locale to change default format and names\n  // const locale = options.locale || 'en-US';\n  if (typeof date === 'string') { date = stringToDate(date); }\n  if (Object.prototype.toString.call(date) !== '[object Date]') { return null; }\n  const longMonths = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'];\n  const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const longDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shortDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return dateFormat\n    .replace(/YYYY/ig, date.getFullYear() + '')\n    .replace(/YY/ig, (date.getFullYear() + '').slice(-2))\n    .replace(/MMMM/ig, longMonths[date.getMonth()])\n    .replace(/MMM/ig, shortMonths[date.getMonth()])\n    .replace(/MM/ig, ('0' + (date.getMonth() + 1)).slice(-2))\n    .replace(/M/ig, (date.getMonth() + 1) + '')\n    .replace(/DDDD/ig, longDays[date.getDay()])\n    .replace(/DDD/ig, shortDays[date.getDay()])\n    .replace(/DD/ig, ('0' + date.getDate()).slice(-2))\n    .replace(/D/ig, date.getDate() + '')\n    .replace(/S/ig, ordinal(date.getDate()));\n}\n\nexport function ordinal(number: number|string): string {\n  if (typeof number === 'number') { number = number + ''; }\n  const last = number.slice(-1);\n  const nextToLast = number.slice(-2, 1);\n  return (nextToLast !== '1' && { '1': 'st', '2': 'nd', '3': 'rd' }[last]) || 'th';\n}\n\n/**\n * 'stringToDate' function\n *\n * @param  { string } dateString\n * @return { Date }\n */\nexport function stringToDate(dateString) {\n  const getDate: string = findDate(dateString);\n  if (!getDate) { return null; }\n  let dateParts: number[] = [];\n  // Split x-y-z to [x, y, z]\n  if (/^\\d+[^\\d]\\d+[^\\d]\\d+$/.test(getDate)) {\n    dateParts = getDate.split(/[^\\d]/).map(part => +part);\n  // Split xxxxyyzz to [xxxx, yy, zz]\n  } else if (/^\\d{8}$/.test(getDate)) {\n    dateParts = [+getDate.slice(0, 4), +getDate.slice(4, 6), +getDate.slice(6)];\n  }\n  const thisYear = +(new Date().getFullYear() + '').slice(-2);\n  // Check for [YYYY, MM, DD]\n  if (dateParts[0] > 1000 && dateParts[0] < 2100 && dateParts[1] <= 12 && dateParts[2] <= 31) {\n    return new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);\n  // Check for [MM, DD, YYYY]\n  } else if (dateParts[0] <= 12 && dateParts[1] <= 31 && dateParts[2] > 1000 && dateParts[2] < 2100) {\n    return new Date(dateParts[2], dateParts[0] - 1, dateParts[1]);\n  // Check for [MM, DD, YY]\n  } else if (dateParts[0] <= 12 && dateParts[1] <= 31 && dateParts[2] < 100) {\n    const year = (dateParts[2] <= thisYear ? 2000 : 1900) + dateParts[2];\n    return new Date(year, dateParts[0] - 1, dateParts[1]);\n  // Check for [YY, MM, DD]\n  } else if (dateParts[0] < 100 && dateParts[1] <= 12 && dateParts[2] <= 31) {\n    const year = (dateParts[0] <= thisYear ? 2000 : 1900) + dateParts[0];\n    return new Date(year, dateParts[1] - 1, dateParts[2]);\n  }\n  return null;\n}\n\n/**\n * 'findDate' function\n *\n * @param  { string } text\n * @return { string }\n */\nexport function findDate(text) {\n  if (!text) { return null; }\n  let foundDate: any[];\n  // Match ...YYYY-MM-DD...\n  foundDate = text.match(/(?:19|20)\\d\\d[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ](?:[012]?\\d|3[01])(?!\\d)/);\n  if (foundDate) { return foundDate[0]; }\n  // Match ...MM-DD-YYYY...\n  foundDate = text.match(/(?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ](?:19|20)\\d\\d(?!\\d)/);\n  if (foundDate) { return foundDate[0]; }\n  // Match MM-DD-YY...\n  foundDate = text.match(/^(?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ]\\d\\d(?!\\d)/);\n  if (foundDate) { return foundDate[0]; }\n  // Match YY-MM-DD...\n  foundDate = text.match(/^\\d\\d[-_\\\\\\/\\. ](?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])(?!\\d)/);\n  if (foundDate) { return foundDate[0]; }\n  // Match YYYYMMDD...\n  foundDate = text.match(/^(?:19|20)\\d\\d(?:0\\d|1[012])(?:[012]\\d|3[01])/);\n  if (foundDate) { return foundDate[0]; }\n}\n",
    "import { BehaviorSubject } from 'rxjs-compat/BehaviorSubject';\n\nimport * as _ from 'lodash';\n\nimport { TitleMapItem } from '../json-schema-form.service';\nimport {\n  inArray, isArray, isEmpty, isNumber, isObject, isDefined, isString\n} from './validator.functions';\nimport { copy, fixTitle, forEach, hasOwn } from './utility.functions';\nimport { Pointer, JsonPointer } from './jsonpointer.functions';\nimport {\n  getFromSchema, getInputType, getSubSchema, checkInlineType, isInputRequired,\n  removeRecursiveReferences, updateInputOptions\n} from './json-schema.functions';\nimport { buildFormGroupTemplate, getControl } from './form-group.functions';\n\n/**\n * Layout function library:\n *\n * buildLayout:            Builds a complete layout from an input layout and schema\n *\n * buildLayoutFromSchema:  Builds a complete layout entirely from an input schema\n *\n * mapLayout:\n *\n * getLayoutNode:\n *\n * buildTitleMap:\n */\n\n/**\n * 'buildLayout' function\n *\n * @param  { any } jsf\n * @param  { any } widgetLibrary\n * @return { any[] }\n */\nexport function buildLayout(jsf, widgetLibrary) {\n  let hasSubmitButton = !JsonPointer.get(jsf, '/formOptions/addSubmit');\n  const formLayout = mapLayout(jsf.layout, (layoutItem, index, layoutPointer) => {\n    const currentIndex = index;\n    const newNode: any = {\n      _id: _.uniqueId(),\n      options: {},\n    };\n    if (isObject(layoutItem)) {\n      Object.assign(newNode, layoutItem);\n      Object.keys(newNode)\n        .filter(option => !inArray(option, [\n          '_id', '$ref', 'arrayItem', 'arrayItemType', 'dataPointer', 'dataType',\n          'items', 'key', 'name', 'options', 'recursiveReference', 'type', 'widget'\n        ]))\n        .forEach(option => {\n          newNode.options[option] = newNode[option];\n          delete newNode[option];\n        });\n      if (!hasOwn(newNode, 'type') && isString(newNode.widget)) {\n        newNode.type = newNode.widget;\n        delete newNode.widget;\n      }\n      if (!hasOwn(newNode.options, 'title')) {\n        if (hasOwn(newNode.options, 'legend')) {\n          newNode.options.title = newNode.options.legend;\n          delete newNode.options.legend;\n        }\n      }\n      if (!hasOwn(newNode.options, 'validationMessages')) {\n        if (hasOwn(newNode.options, 'errorMessages')) {\n          newNode.options.validationMessages = newNode.options.errorMessages;\n          delete newNode.options.errorMessages;\n\n        // Convert Angular Schema Form (AngularJS) 'validationMessage' to\n        // Angular JSON Schema Form 'validationMessages'\n        // TV4 codes from https://github.com/geraintluff/tv4/blob/master/source/api.js\n        } else if (hasOwn(newNode.options, 'validationMessage')) {\n          if (typeof newNode.options.validationMessage === 'string') {\n            newNode.options.validationMessages = newNode.options.validationMessage;\n          } else {\n            newNode.options.validationMessages = {};\n            Object.keys(newNode.options.validationMessage).forEach(key => {\n              const code = key + '';\n              const newKey =\n                code ===  '0'  ? 'type' :\n                code ===  '1'  ? 'enum' :\n                code === '100' ? 'multipleOf' :\n                code === '101' ? 'minimum' :\n                code === '102' ? 'exclusiveMinimum' :\n                code === '103' ? 'maximum' :\n                code === '104' ? 'exclusiveMaximum' :\n                code === '200' ? 'minLength' :\n                code === '201' ? 'maxLength' :\n                code === '202' ? 'pattern' :\n                code === '300' ? 'minProperties' :\n                code === '301' ? 'maxProperties' :\n                code === '302' ? 'required' :\n                code === '304' ? 'dependencies' :\n                code === '400' ? 'minItems' :\n                code === '401' ? 'maxItems' :\n                code === '402' ? 'uniqueItems' :\n                code === '500' ? 'format' : code + '';\n              newNode.options.validationMessages[newKey] = newNode.options.validationMessage[key];\n            });\n          }\n          delete newNode.options.validationMessage;\n        }\n      }\n    } else if (JsonPointer.isJsonPointer(layoutItem)) {\n      newNode.dataPointer = layoutItem;\n    } else if (isString(layoutItem)) {\n      newNode.key = layoutItem;\n    } else {\n      console.error('buildLayout error: Form layout element not recognized:');\n      console.error(layoutItem);\n      return null;\n    }\n    let nodeSchema: any = null;\n\n    // If newNode does not have a dataPointer, try to find an equivalent\n    if (!hasOwn(newNode, 'dataPointer')) {\n\n      // If newNode has a key, change it to a dataPointer\n      if (hasOwn(newNode, 'key')) {\n        newNode.dataPointer = newNode.key === '*' ? newNode.key :\n          JsonPointer.compile(JsonPointer.parseObjectPath(newNode.key), '-');\n        delete newNode.key;\n\n      // If newNode is an array, search for dataPointer in child nodes\n      } else if (hasOwn(newNode, 'type') && newNode.type.slice(-5) === 'array') {\n        const findDataPointer = (items) => {\n          if (items === null || typeof items !== 'object') { return; }\n          if (hasOwn(items, 'dataPointer')) { return items.dataPointer; }\n          if (isArray(items.items)) {\n            for (const item of items.items) {\n              if (hasOwn(item, 'dataPointer') && item.dataPointer.indexOf('/-') !== -1) {\n                return item.dataPointer;\n              }\n              if (hasOwn(item, 'items')) {\n                const searchItem = findDataPointer(item);\n                if (searchItem) { return searchItem; }\n              }\n            }\n          }\n        };\n        const childDataPointer = findDataPointer(newNode);\n        if (childDataPointer) {\n          newNode.dataPointer =\n            childDataPointer.slice(0, childDataPointer.lastIndexOf('/-'));\n        }\n      }\n    }\n\n    if (hasOwn(newNode, 'dataPointer')) {\n      if (newNode.dataPointer === '*') {\n        return buildLayoutFromSchema(jsf, widgetLibrary, jsf.formValues);\n      }\n      const nodeValue =\n        JsonPointer.get(jsf.formValues, newNode.dataPointer.replace(/\\/-/g, '/1'));\n\n      // TODO: Create function getFormValues(jsf, dataPointer, forRefLibrary)\n      // check formOptions.setSchemaDefaults and formOptions.setLayoutDefaults\n      // then set apropriate values from initialVaues, schema, or layout\n\n      newNode.dataPointer =\n        JsonPointer.toGenericPointer(newNode.dataPointer, jsf.arrayMap);\n      const LastKey = JsonPointer.toKey(newNode.dataPointer);\n      if (!newNode.name && isString(LastKey) && LastKey !== '-') {\n        newNode.name = LastKey;\n      }\n      const shortDataPointer = removeRecursiveReferences(\n        newNode.dataPointer, jsf.dataRecursiveRefMap, jsf.arrayMap\n      );\n      const recursive = !shortDataPointer.length ||\n        shortDataPointer !== newNode.dataPointer;\n      let schemaPointer: string;\n      if (!jsf.dataMap.has(shortDataPointer)) {\n        jsf.dataMap.set(shortDataPointer, new Map());\n      }\n      const nodeDataMap = jsf.dataMap.get(shortDataPointer);\n      if (nodeDataMap.has('schemaPointer')) {\n        schemaPointer = nodeDataMap.get('schemaPointer');\n      } else {\n        schemaPointer = JsonPointer.toSchemaPointer(shortDataPointer, jsf.schema);\n        nodeDataMap.set('schemaPointer', schemaPointer);\n      }\n      nodeDataMap.set('disabled', !!newNode.options.disabled);\n      nodeSchema = JsonPointer.get(jsf.schema, schemaPointer);\n      if (nodeSchema) {\n        if (!hasOwn(newNode, 'type')) {\n          newNode.type = getInputType(nodeSchema, newNode);\n        } else if (!widgetLibrary.hasWidget(newNode.type)) {\n          const oldWidgetType = newNode.type;\n          newNode.type = getInputType(nodeSchema, newNode);\n          console.error(`error: widget type \"${oldWidgetType}\" ` +\n            `not found in library. Replacing with \"${newNode.type}\".`);\n        } else {\n          newNode.type = checkInlineType(newNode.type, nodeSchema, newNode);\n        }\n        if (nodeSchema.type === 'object' && isArray(nodeSchema.required)) {\n          nodeDataMap.set('required', nodeSchema.required);\n        }\n        newNode.dataType =\n          nodeSchema.type || (hasOwn(nodeSchema, '$ref') ? '$ref' : null);\n        updateInputOptions(newNode, nodeSchema, jsf);\n\n        // Present checkboxes as single control, rather than array\n        if (newNode.type === 'checkboxes' && hasOwn(nodeSchema, 'items')) {\n          updateInputOptions(newNode, nodeSchema.items, jsf);\n        } else if (newNode.dataType === 'array') {\n          newNode.options.maxItems = Math.min(\n            nodeSchema.maxItems || 1000, newNode.options.maxItems || 1000\n          );\n          newNode.options.minItems = Math.max(\n            nodeSchema.minItems || 0, newNode.options.minItems || 0\n          );\n          newNode.options.listItems = Math.max(\n            newNode.options.listItems || 0, isArray(nodeValue) ? nodeValue.length : 0\n          );\n          newNode.options.tupleItems =\n            isArray(nodeSchema.items) ? nodeSchema.items.length : 0;\n          if (newNode.options.maxItems < newNode.options.tupleItems) {\n            newNode.options.tupleItems = newNode.options.maxItems;\n            newNode.options.listItems = 0;\n          } else if (newNode.options.maxItems <\n            newNode.options.tupleItems + newNode.options.listItems\n          ) {\n            newNode.options.listItems =\n              newNode.options.maxItems - newNode.options.tupleItems;\n          } else if (newNode.options.minItems >\n            newNode.options.tupleItems + newNode.options.listItems\n          ) {\n            newNode.options.listItems =\n              newNode.options.minItems - newNode.options.tupleItems;\n          }\n          if (!nodeDataMap.has('maxItems')) {\n            nodeDataMap.set('maxItems', newNode.options.maxItems);\n            nodeDataMap.set('minItems', newNode.options.minItems);\n            nodeDataMap.set('tupleItems', newNode.options.tupleItems);\n            nodeDataMap.set('listItems', newNode.options.listItems);\n          }\n          if (!jsf.arrayMap.has(shortDataPointer)) {\n            jsf.arrayMap.set(shortDataPointer, newNode.options.tupleItems);\n          }\n        }\n        if (isInputRequired(jsf.schema, schemaPointer)) {\n          newNode.options.required = true;\n          jsf.fieldsRequired = true;\n        }\n      } else {\n        // TODO: create item in FormGroup model from layout key (?)\n        updateInputOptions(newNode, {}, jsf);\n      }\n\n      if (!newNode.options.title && !/^\\d+$/.test(newNode.name)) {\n        newNode.options.title = fixTitle(newNode.name);\n      }\n\n      if (hasOwn(newNode.options, 'copyValueTo')) {\n        if (typeof newNode.options.copyValueTo === 'string') {\n          newNode.options.copyValueTo = [newNode.options.copyValueTo];\n        }\n        if (isArray(newNode.options.copyValueTo)) {\n          newNode.options.copyValueTo = newNode.options.copyValueTo.map(item =>\n            JsonPointer.compile(JsonPointer.parseObjectPath(item), '-')\n          );\n        }\n      }\n\n      newNode.widget = widgetLibrary.getWidget(newNode.type);\n      nodeDataMap.set('inputType', newNode.type);\n      nodeDataMap.set('widget', newNode.widget);\n\n      if (newNode.dataType === 'array' &&\n        (hasOwn(newNode, 'items') || hasOwn(newNode, 'additionalItems'))\n      ) {\n        const itemRefPointer = removeRecursiveReferences(\n          newNode.dataPointer + '/-', jsf.dataRecursiveRefMap, jsf.arrayMap\n        );\n        if (!jsf.dataMap.has(itemRefPointer)) {\n          jsf.dataMap.set(itemRefPointer, new Map());\n        }\n        jsf.dataMap.get(itemRefPointer).set('inputType', 'section');\n\n        // Fix insufficiently nested array item groups\n        if (newNode.items.length > 1) {\n          const arrayItemGroup = [];\n          const arrayItemGroupTemplate = [];\n          let newIndex = 0;\n          for (let i = newNode.items.length - 1; i >= 0; i--) {\n            const subItem = newNode.items[i];\n            if (hasOwn(subItem, 'dataPointer') &&\n              subItem.dataPointer.slice(0, itemRefPointer.length) === itemRefPointer\n            ) {\n              const arrayItem = newNode.items.splice(i, 1)[0];\n              arrayItem.dataPointer = newNode.dataPointer + '/-' +\n                arrayItem.dataPointer.slice(itemRefPointer.length);\n              arrayItemGroup.unshift(arrayItem);\n              newIndex++;\n            } else {\n              subItem.arrayItem = true;\n              // TODO: Check schema to get arrayItemType and removable\n              subItem.arrayItemType = 'list';\n              subItem.removable = newNode.options.removable !== false;\n            }\n          }\n          if (arrayItemGroup.length) {\n            newNode.items.push({\n              _id: _.uniqueId(),\n              arrayItem: true,\n              arrayItemType: newNode.options.tupleItems > newNode.items.length ?\n                'tuple' : 'list',\n              items: arrayItemGroup,\n              options: { removable: newNode.options.removable !== false, },\n              dataPointer: newNode.dataPointer + '/-',\n              type: 'section',\n              widget: widgetLibrary.getWidget('section'),\n            });\n          }\n        } else {\n          // TODO: Fix to hndle multiple items\n          newNode.items[0].arrayItem = true;\n          if (!newNode.items[0].dataPointer) {\n            newNode.items[0].dataPointer =\n              JsonPointer.toGenericPointer(itemRefPointer, jsf.arrayMap);\n          }\n          if (!JsonPointer.has(newNode, '/items/0/options/removable')) {\n            newNode.items[0].options.removable = true;\n          }\n          if (newNode.options.orderable === false) {\n            newNode.items[0].options.orderable = false;\n          }\n          newNode.items[0].arrayItemType =\n            newNode.options.tupleItems ? 'tuple' : 'list';\n        }\n\n        if (isArray(newNode.items)) {\n          const arrayListItems =\n            newNode.items.filter(item => item.type !== '$ref').length -\n              newNode.options.tupleItems;\n          if (arrayListItems > newNode.options.listItems) {\n            newNode.options.listItems = arrayListItems;\n            nodeDataMap.set('listItems', arrayListItems);\n          }\n        }\n\n        if (!hasOwn(jsf.layoutRefLibrary, itemRefPointer)) {\n          jsf.layoutRefLibrary[itemRefPointer] =\n            _.cloneDeep(newNode.items[newNode.items.length - 1]);\n          if (recursive) {\n            jsf.layoutRefLibrary[itemRefPointer].recursiveReference = true;\n          }\n          forEach(jsf.layoutRefLibrary[itemRefPointer], (item, key) => {\n            if (hasOwn(item, '_id')) { item._id = null; }\n            if (recursive) {\n              if (hasOwn(item, 'dataPointer')) {\n                item.dataPointer = item.dataPointer.slice(itemRefPointer.length);\n              }\n            }\n          }, 'top-down');\n        }\n\n        // Add any additional default items\n        if (!newNode.recursiveReference || newNode.options.required) {\n          const arrayLength = Math.min(Math.max(\n            newNode.options.tupleItems + newNode.options.listItems,\n            isArray(nodeValue) ? nodeValue.length : 0\n          ), newNode.options.maxItems);\n          for (let i = newNode.items.length; i < arrayLength; i++) {\n            newNode.items.push(getLayoutNode({\n              $ref: itemRefPointer,\n              dataPointer: newNode.dataPointer,\n              recursiveReference: newNode.recursiveReference,\n            }, jsf, widgetLibrary));\n          }\n        }\n\n        // If needed, add button to add items to array\n        if (newNode.options.addable !== false &&\n          newNode.options.minItems < newNode.options.maxItems &&\n          (newNode.items[newNode.items.length - 1] || {}).type !== '$ref'\n        ) {\n          let buttonText = 'Add';\n          if (newNode.options.title) {\n            if (/^add\\b/i.test(newNode.options.title)) {\n              buttonText = newNode.options.title;\n            } else {\n              buttonText += ' ' + newNode.options.title;\n            }\n          } else if (newNode.name && !/^\\d+$/.test(newNode.name)) {\n            if (/^add\\b/i.test(newNode.name)) {\n              buttonText += ' ' + fixTitle(newNode.name);\n            } else {\n              buttonText = fixTitle(newNode.name);\n            }\n\n          // If newNode doesn't have a title, look for title of parent array item\n          } else {\n            const parentSchema =\n              getFromSchema(jsf.schema, newNode.dataPointer, 'parentSchema');\n            if (hasOwn(parentSchema, 'title')) {\n              buttonText += ' to ' + parentSchema.title;\n            } else {\n              const pointerArray = JsonPointer.parse(newNode.dataPointer);\n              buttonText += ' to ' + fixTitle(pointerArray[pointerArray.length - 2]);\n            }\n          }\n          newNode.items.push({\n            _id: _.uniqueId(),\n            arrayItem: true,\n            arrayItemType: 'list',\n            dataPointer: newNode.dataPointer + '/-',\n            options: {\n              listItems: newNode.options.listItems,\n              maxItems: newNode.options.maxItems,\n              minItems: newNode.options.minItems,\n              removable: false,\n              title: buttonText,\n              tupleItems: newNode.options.tupleItems,\n            },\n            recursiveReference: recursive,\n            type: '$ref',\n            widget: widgetLibrary.getWidget('$ref'),\n            $ref: itemRefPointer,\n          });\n          if (isString(JsonPointer.get(newNode, '/style/add'))) {\n            newNode.items[newNode.items.length - 1].options.fieldStyle =\n              newNode.style.add;\n            delete newNode.style.add;\n            if (isEmpty(newNode.style)) { delete newNode.style; }\n          }\n        }\n      } else {\n        newNode.arrayItem = false;\n      }\n    } else if (hasOwn(newNode, 'type') || hasOwn(newNode, 'items')) {\n      const parentType: string =\n        JsonPointer.get(jsf.layout, layoutPointer, 0, -2).type;\n      if (!hasOwn(newNode, 'type')) {\n        newNode.type =\n          inArray(parentType, ['tabs', 'tabarray']) ? 'tab' : 'array';\n      }\n      newNode.arrayItem = parentType === 'array';\n      newNode.widget = widgetLibrary.getWidget(newNode.type);\n      updateInputOptions(newNode, {}, jsf);\n    }\n    if (newNode.type === 'submit') { hasSubmitButton = true; }\n    return newNode;\n  });\n  if (jsf.hasRootReference) {\n    const fullLayout = _.cloneDeep(formLayout);\n    if (fullLayout[fullLayout.length - 1].type === 'submit') { fullLayout.pop(); }\n    jsf.layoutRefLibrary[''] = {\n      _id: null,\n      dataPointer: '',\n      dataType: 'object',\n      items: fullLayout,\n      name: '',\n      options: _.cloneDeep(jsf.formOptions.defautWidgetOptions),\n      recursiveReference: true,\n      required: false,\n      type: 'section',\n      widget: widgetLibrary.getWidget('section'),\n    };\n  }\n  if (!hasSubmitButton) {\n    formLayout.push({\n      _id: _.uniqueId(),\n      options: { title: 'Submit' },\n      type: 'submit',\n      widget: widgetLibrary.getWidget('submit'),\n    });\n  }\n  return formLayout;\n}\n\n/**\n * 'buildLayoutFromSchema' function\n *\n * @param  { any } jsf -\n * @param  { any } widgetLibrary -\n * @param  { any } nodeValue -\n * @param  { string = '' } schemaPointer -\n * @param  { string = '' } dataPointer -\n * @param  { boolean = false } arrayItem -\n * @param  { string = null } arrayItemType -\n * @param  { boolean = null } removable -\n * @param  { boolean = false } forRefLibrary -\n * @param  { string = '' } dataPointerPrefix -\n * @return { any }\n */\nexport function buildLayoutFromSchema(\n  jsf, widgetLibrary, nodeValue = null, schemaPointer = '',\n  dataPointer = '', arrayItem = false, arrayItemType: string = null,\n  removable: boolean = null, forRefLibrary = false, dataPointerPrefix = ''\n) {\n  const schema = JsonPointer.get(jsf.schema, schemaPointer);\n  if (!hasOwn(schema, 'type') && !hasOwn(schema, '$ref') &&\n    !hasOwn(schema, 'x-schema-form')\n  ) { return null; }\n  const newNodeType: string = getInputType(schema);\n  if (!isDefined(nodeValue) && (\n    jsf.formOptions.setSchemaDefaults === true ||\n    (jsf.formOptions.setSchemaDefaults === 'auto' && isEmpty(jsf.formValues))\n  )) {\n    nodeValue = JsonPointer.get(jsf.schema, schemaPointer + '/default');\n  }\n  let newNode: any = {\n    _id: forRefLibrary ? null : _.uniqueId(),\n    arrayItem: arrayItem,\n    dataPointer: JsonPointer.toGenericPointer(dataPointer, jsf.arrayMap),\n    dataType: schema.type || (hasOwn(schema, '$ref') ? '$ref' : null),\n    options: {},\n    required: isInputRequired(jsf.schema, schemaPointer),\n    type: newNodeType,\n    widget: widgetLibrary.getWidget(newNodeType),\n  };\n  const lastDataKey = JsonPointer.toKey(newNode.dataPointer);\n  if (lastDataKey !== '-') { newNode.name = lastDataKey; }\n  if (newNode.arrayItem) {\n    newNode.arrayItemType = arrayItemType;\n    newNode.options.removable = removable !== false;\n  }\n  const shortDataPointer = removeRecursiveReferences(\n    dataPointerPrefix + dataPointer, jsf.dataRecursiveRefMap, jsf.arrayMap\n  );\n  const recursive = !shortDataPointer.length ||\n    shortDataPointer !== dataPointerPrefix + dataPointer;\n  if (!jsf.dataMap.has(shortDataPointer)) {\n    jsf.dataMap.set(shortDataPointer, new Map());\n  }\n  const nodeDataMap = jsf.dataMap.get(shortDataPointer);\n  if (!nodeDataMap.has('inputType')) {\n    nodeDataMap.set('schemaPointer', schemaPointer);\n    nodeDataMap.set('inputType', newNode.type);\n    nodeDataMap.set('widget', newNode.widget);\n    nodeDataMap.set('disabled', !!newNode.options.disabled);\n  }\n  updateInputOptions(newNode, schema, jsf);\n  if (!newNode.options.title && newNode.name && !/^\\d+$/.test(newNode.name)) {\n    newNode.options.title = fixTitle(newNode.name);\n  }\n\n  if (newNode.dataType === 'object') {\n    if (isArray(schema.required) && !nodeDataMap.has('required')) {\n      nodeDataMap.set('required', schema.required);\n    }\n    if (isObject(schema.properties)) {\n      const newSection: any[] = [];\n      const propertyKeys = schema['ui:order'] || Object.keys(schema.properties);\n      if (propertyKeys.includes('*') && !hasOwn(schema.properties, '*')) {\n        const unnamedKeys = Object.keys(schema.properties)\n          .filter(key => !propertyKeys.includes(key));\n        for (let i = propertyKeys.length - 1; i >= 0; i--) {\n          if (propertyKeys[i] === '*') {\n            propertyKeys.splice(i, 1, ...unnamedKeys);\n          }\n        }\n      }\n      propertyKeys\n        .filter(key => hasOwn(schema.properties, key) ||\n          hasOwn(schema, 'additionalProperties')\n        )\n        .forEach(key => {\n          const keySchemaPointer = hasOwn(schema.properties, key) ?\n            '/properties/' + key : '/additionalProperties';\n          const innerItem = buildLayoutFromSchema(\n            jsf, widgetLibrary, isObject(nodeValue) ? nodeValue[key] : null,\n            schemaPointer + keySchemaPointer,\n            dataPointer + '/' + key,\n            false, null, null, forRefLibrary, dataPointerPrefix\n          );\n          if (innerItem) {\n            if (isInputRequired(schema, '/' + key)) {\n              innerItem.options.required = true;\n              jsf.fieldsRequired = true;\n            }\n            newSection.push(innerItem);\n          }\n        });\n      if (dataPointer === '' && !forRefLibrary) {\n        newNode = newSection;\n      } else {\n        newNode.items = newSection;\n      }\n    }\n    // TODO: Add patternProperties and additionalProperties inputs?\n    // ... possibly provide a way to enter both key names and values?\n    // if (isObject(schema.patternProperties)) { }\n    // if (isObject(schema.additionalProperties)) { }\n\n  } else if (newNode.dataType === 'array') {\n    newNode.items = [];\n    const templateArray: any[] = [];\n    newNode.options.maxItems = Math.min(\n      schema.maxItems || 1000, newNode.options.maxItems || 1000\n    );\n    newNode.options.minItems = Math.max(\n      schema.minItems || 0, newNode.options.minItems || 0\n    );\n    if (!newNode.options.minItems && isInputRequired(jsf.schema, schemaPointer)) {\n      newNode.options.minItems = 1;\n    }\n    if (!hasOwn(newNode.options, 'listItems')) { newNode.options.listItems = 1; }\n    newNode.options.tupleItems = isArray(schema.items) ? schema.items.length : 0;\n    if (newNode.options.maxItems <= newNode.options.tupleItems) {\n      newNode.options.tupleItems = newNode.options.maxItems;\n      newNode.options.listItems = 0;\n    } else if (newNode.options.maxItems <\n      newNode.options.tupleItems + newNode.options.listItems\n    ) {\n      newNode.options.listItems = newNode.options.maxItems - newNode.options.tupleItems;\n    } else if (newNode.options.minItems >\n      newNode.options.tupleItems + newNode.options.listItems\n    ) {\n      newNode.options.listItems = newNode.options.minItems - newNode.options.tupleItems;\n    }\n    if (!nodeDataMap.has('maxItems')) {\n      nodeDataMap.set('maxItems', newNode.options.maxItems);\n      nodeDataMap.set('minItems', newNode.options.minItems);\n      nodeDataMap.set('tupleItems', newNode.options.tupleItems);\n      nodeDataMap.set('listItems', newNode.options.listItems);\n    }\n    if (!jsf.arrayMap.has(shortDataPointer)) {\n      jsf.arrayMap.set(shortDataPointer, newNode.options.tupleItems);\n    }\n    removable = newNode.options.removable !== false;\n    let additionalItemsSchemaPointer: string = null;\n\n    // If 'items' is an array = tuple items\n    if (isArray(schema.items)) {\n      newNode.items = [];\n      for (let i = 0; i < newNode.options.tupleItems; i++) {\n        let newItem: any;\n        const itemRefPointer = removeRecursiveReferences(\n          shortDataPointer + '/' + i, jsf.dataRecursiveRefMap, jsf.arrayMap\n        );\n        const itemRecursive = !itemRefPointer.length ||\n          itemRefPointer !== shortDataPointer + '/' + i;\n\n        // If removable, add tuple item layout to layoutRefLibrary\n        if (removable && i >= newNode.options.minItems) {\n          if (!hasOwn(jsf.layoutRefLibrary, itemRefPointer)) {\n            // Set to null first to prevent recursive reference from causing endless loop\n            jsf.layoutRefLibrary[itemRefPointer] = null;\n            jsf.layoutRefLibrary[itemRefPointer] = buildLayoutFromSchema(\n              jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null,\n              schemaPointer + '/items/' + i,\n              itemRecursive ? '' : dataPointer + '/' + i,\n              true, 'tuple', true, true, itemRecursive ? dataPointer + '/' + i : ''\n            );\n            if (itemRecursive) {\n              jsf.layoutRefLibrary[itemRefPointer].recursiveReference = true;\n            }\n          }\n          newItem = getLayoutNode({\n            $ref: itemRefPointer,\n            dataPointer: dataPointer + '/' + i,\n            recursiveReference: itemRecursive,\n          }, jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null);\n        } else {\n          newItem = buildLayoutFromSchema(\n            jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null,\n            schemaPointer + '/items/' + i,\n            dataPointer + '/' + i,\n            true, 'tuple', false, forRefLibrary, dataPointerPrefix\n          );\n        }\n        if (newItem) { newNode.items.push(newItem); }\n      }\n\n      // If 'additionalItems' is an object = additional list items, after tuple items\n      if (isObject(schema.additionalItems)) {\n        additionalItemsSchemaPointer = schemaPointer + '/additionalItems';\n      }\n\n    // If 'items' is an object = list items only (no tuple items)\n    } else if (isObject(schema.items)) {\n      additionalItemsSchemaPointer = schemaPointer + '/items';\n    }\n\n    if (additionalItemsSchemaPointer) {\n      const itemRefPointer = removeRecursiveReferences(\n        shortDataPointer + '/-', jsf.dataRecursiveRefMap, jsf.arrayMap\n      );\n      const itemRecursive = !itemRefPointer.length ||\n        itemRefPointer !== shortDataPointer + '/-';\n      const itemSchemaPointer = removeRecursiveReferences(\n        additionalItemsSchemaPointer, jsf.schemaRecursiveRefMap, jsf.arrayMap\n      );\n      // Add list item layout to layoutRefLibrary\n      if (itemRefPointer.length && !hasOwn(jsf.layoutRefLibrary, itemRefPointer)) {\n        // Set to null first to prevent recursive reference from causing endless loop\n        jsf.layoutRefLibrary[itemRefPointer] = null;\n        jsf.layoutRefLibrary[itemRefPointer] = buildLayoutFromSchema(\n          jsf, widgetLibrary, null,\n          itemSchemaPointer,\n          itemRecursive ? '' : dataPointer + '/-',\n          true, 'list', removable, true, itemRecursive ? dataPointer + '/-' : ''\n        );\n        if (itemRecursive) {\n          jsf.layoutRefLibrary[itemRefPointer].recursiveReference = true;\n        }\n      }\n\n      // Add any additional default items\n      if (!itemRecursive || newNode.options.required) {\n        const arrayLength = Math.min(Math.max(\n          itemRecursive ? 0 :\n            newNode.options.tupleItems + newNode.options.listItems,\n          isArray(nodeValue) ? nodeValue.length : 0\n        ), newNode.options.maxItems);\n        if (newNode.items.length < arrayLength) {\n          for (let i = newNode.items.length; i < arrayLength; i++) {\n            newNode.items.push(getLayoutNode({\n              $ref: itemRefPointer,\n              dataPointer: dataPointer + '/-',\n              recursiveReference: itemRecursive,\n            }, jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null));\n          }\n        }\n      }\n\n      // If needed, add button to add items to array\n      if (newNode.options.addable !== false &&\n        newNode.options.minItems < newNode.options.maxItems &&\n        (newNode.items[newNode.items.length - 1] || {}).type !== '$ref'\n      ) {\n        let buttonText =\n          ((jsf.layoutRefLibrary[itemRefPointer] || {}).options || {}).title;\n        const prefix = buttonText ? 'Add ' : 'Add to ';\n        if (!buttonText) {\n          buttonText = schema.title || fixTitle(JsonPointer.toKey(dataPointer));\n        }\n        if (!/^add\\b/i.test(buttonText)) { buttonText = prefix + buttonText; }\n        newNode.items.push({\n          _id: _.uniqueId(),\n          arrayItem: true,\n          arrayItemType: 'list',\n          dataPointer: newNode.dataPointer + '/-',\n          options: {\n            listItems: newNode.options.listItems,\n            maxItems: newNode.options.maxItems,\n            minItems: newNode.options.minItems,\n            removable: false,\n            title: buttonText,\n            tupleItems: newNode.options.tupleItems,\n          },\n          recursiveReference: itemRecursive,\n          type: '$ref',\n          widget: widgetLibrary.getWidget('$ref'),\n          $ref: itemRefPointer,\n        });\n      }\n    }\n\n  } else if (newNode.dataType === '$ref') {\n    const schemaRef = JsonPointer.compile(schema.$ref);\n    const dataRef = JsonPointer.toDataPointer(schemaRef, jsf.schema);\n    let buttonText = '';\n\n    // Get newNode title\n    if (newNode.options.add) {\n      buttonText = newNode.options.add;\n    } else if (newNode.name && !/^\\d+$/.test(newNode.name)) {\n      buttonText =\n        (/^add\\b/i.test(newNode.name) ? '' : 'Add ') + fixTitle(newNode.name);\n\n    // If newNode doesn't have a title, look for title of parent array item\n    } else {\n      const parentSchema =\n        JsonPointer.get(jsf.schema, schemaPointer, 0, -1);\n      if (hasOwn(parentSchema, 'title')) {\n        buttonText = 'Add to ' + parentSchema.title;\n      } else {\n        const pointerArray = JsonPointer.parse(newNode.dataPointer);\n        buttonText = 'Add to ' + fixTitle(pointerArray[pointerArray.length - 2]);\n      }\n    }\n    Object.assign(newNode, {\n      recursiveReference: true,\n      widget: widgetLibrary.getWidget('$ref'),\n      $ref: dataRef,\n    });\n    Object.assign(newNode.options, {\n      removable: false,\n      title: buttonText,\n    });\n    if (isNumber(JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems)) {\n      newNode.options.maxItems =\n        JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems;\n    }\n\n    // Add layout template to layoutRefLibrary\n    if (dataRef.length) {\n      if (!hasOwn(jsf.layoutRefLibrary, dataRef)) {\n        // Set to null first to prevent recursive reference from causing endless loop\n        jsf.layoutRefLibrary[dataRef] = null;\n        const newLayout = buildLayoutFromSchema(\n          jsf, widgetLibrary, null, schemaRef, '',\n          newNode.arrayItem, newNode.arrayItemType, true, true, dataPointer\n        );\n        if (newLayout) {\n          newLayout.recursiveReference = true;\n          jsf.layoutRefLibrary[dataRef] = newLayout;\n        } else {\n          delete jsf.layoutRefLibrary[dataRef];\n        }\n      } else if (!jsf.layoutRefLibrary[dataRef].recursiveReference) {\n        jsf.layoutRefLibrary[dataRef].recursiveReference = true;\n      }\n    }\n  }\n  return newNode;\n}\n\n/**\n * 'mapLayout' function\n *\n * Creates a new layout by running each element in an existing layout through\n * an iteratee. Recursively maps within array elements 'items' and 'tabs'.\n * The iteratee is invoked with four arguments: (value, index, layout, path)\n *\n * The returned layout may be longer (or shorter) then the source layout.\n *\n * If an item from the source layout returns multiple items (as '*' usually will),\n * this function will keep all returned items in-line with the surrounding items.\n *\n * If an item from the source layout causes an error and returns null, it is\n * skipped without error, and the function will still return all non-null items.\n *\n * @param  { any[] } layout - the layout to map\n * @param  { (v: any, i?: number, l?: any, p?: string) => any }\n *   function - the funciton to invoke on each element\n * @param  { string|string[] = '' } layoutPointer - the layoutPointer to layout, inside rootLayout\n * @param  { any[] = layout } rootLayout - the root layout, which conatins layout\n * @return { any[] }\n */\nexport function mapLayout(layout, fn, layoutPointer = '', rootLayout = layout) {\n  let indexPad = 0;\n  let newLayout: any[] = [];\n  forEach(layout, (item, index) => {\n    const realIndex = +index + indexPad;\n    const newLayoutPointer = layoutPointer + '/' + realIndex;\n    let newNode: any = copy(item);\n    let itemsArray: any[] = [];\n    if (isObject(item)) {\n      if (hasOwn(item, 'tabs')) {\n        item.items = item.tabs;\n        delete item.tabs;\n      }\n      if (hasOwn(item, 'items')) {\n        itemsArray = isArray(item.items) ? item.items : [item.items];\n      }\n    }\n    if (itemsArray.length) {\n      newNode.items = mapLayout(itemsArray, fn, newLayoutPointer + '/items', rootLayout);\n    }\n    newNode = fn(newNode, realIndex, newLayoutPointer, rootLayout);\n    if (!isDefined(newNode)) {\n      indexPad--;\n    } else {\n      if (isArray(newNode)) { indexPad += newNode.length - 1; }\n      newLayout = newLayout.concat(newNode);\n    }\n  });\n  return newLayout;\n}\n\n/**\n * 'getLayoutNode' function\n * Copy a new layoutNode from layoutRefLibrary\n *\n * @param  { any } refNode -\n * @param  { any } layoutRefLibrary -\n * @param  { any = null } widgetLibrary -\n * @param  { any = null } nodeValue -\n * @return { any } copied layoutNode\n */\nexport function getLayoutNode(\n  refNode, jsf, widgetLibrary: any = null, nodeValue: any = null\n) {\n\n  // If recursive reference and building initial layout, return Add button\n  if (refNode.recursiveReference && widgetLibrary) {\n    const newLayoutNode = _.cloneDeep(refNode);\n    if (!newLayoutNode.options) { newLayoutNode.options = {}; }\n    Object.assign(newLayoutNode, {\n      recursiveReference: true,\n      widget: widgetLibrary.getWidget('$ref'),\n    });\n    Object.assign(newLayoutNode.options, {\n      removable: false,\n      title: 'Add ' + newLayoutNode.$ref,\n    });\n    return newLayoutNode;\n\n  // Otherwise, return referenced layout\n} else {\n    let newLayoutNode = jsf.layoutRefLibrary[refNode.$ref];\n    // If value defined, build new node from schema (to set array lengths)\n    if (isDefined(nodeValue)) {\n      newLayoutNode = buildLayoutFromSchema(\n        jsf, widgetLibrary, nodeValue,\n        JsonPointer.toSchemaPointer(refNode.$ref, jsf.schema),\n        refNode.$ref, newLayoutNode.arrayItem,\n        newLayoutNode.arrayItemType, newLayoutNode.options.removable, false\n      );\n    } else {\n      // If value not defined, copy node from layoutRefLibrary\n      newLayoutNode = _.cloneDeep(newLayoutNode);\n      JsonPointer.forEachDeep(newLayoutNode, (subNode, pointer) => {\n\n        // Reset all _id's in newLayoutNode to unique values\n        if (hasOwn(subNode, '_id')) { subNode._id = _.uniqueId(); }\n\n        // If adding a recursive item, prefix current dataPointer\n        // to all dataPointers in new layoutNode\n        if (refNode.recursiveReference && hasOwn(subNode, 'dataPointer')) {\n          subNode.dataPointer = refNode.dataPointer + subNode.dataPointer;\n        }\n      });\n    }\n    return newLayoutNode;\n  }\n}\n\n/**\n * 'buildTitleMap' function\n *\n * @param  { any } titleMap -\n * @param  { any } enumList -\n * @param  { boolean = true } fieldRequired -\n * @param  { boolean = true } flatList -\n * @return { TitleMapItem[] }\n */\nexport function buildTitleMap(\n  titleMap, enumList, fieldRequired = true, flatList = true\n) {\n  let newTitleMap: TitleMapItem[] = [];\n  let hasEmptyValue = false;\n  if (titleMap) {\n    if (isArray(titleMap)) {\n      if (enumList) {\n        for (const i of Object.keys(titleMap)) {\n          if (isObject(titleMap[i])) { // JSON Form style\n            const value = titleMap[i].value;\n            if (enumList.includes(value)) {\n              const name = titleMap[i].name;\n              newTitleMap.push({ name, value });\n              if (value === undefined || value === null) { hasEmptyValue = true; }\n            }\n          } else if (isString(titleMap[i])) { // React Jsonschema Form style\n            if (i < enumList.length) {\n              const name = titleMap[i];\n              const value = enumList[i];\n              newTitleMap.push({ name, value });\n              if (value === undefined || value === null) { hasEmptyValue = true; }\n            }\n          }\n        }\n      } else { // If array titleMap and no enum list, just return the titleMap - Angular Schema Form style\n        newTitleMap = titleMap;\n        if (!fieldRequired) {\n          hasEmptyValue = !!newTitleMap\n            .filter(i => i.value === undefined || i.value === null)\n            .length;\n        }\n      }\n    } else if (enumList) { // Alternate JSON Form style, with enum list\n      for (const i of Object.keys(enumList)) {\n        const value = enumList[i];\n        if (hasOwn(titleMap, value)) {\n          const name = titleMap[value];\n          newTitleMap.push({ name, value });\n          if (value === undefined || value === null) { hasEmptyValue = true; }\n        }\n      }\n    } else { // Alternate JSON Form style, without enum list\n      for (const value of Object.keys(titleMap)) {\n        const name = titleMap[value];\n        newTitleMap.push({ name, value });\n        if (value === undefined || value === null) { hasEmptyValue = true; }\n      }\n    }\n  } else if (enumList) { // Build map from enum list alone\n    for (const i of Object.keys(enumList)) {\n      const name = enumList[i];\n      const value = enumList[i];\n      newTitleMap.push({ name, value});\n      if (value === undefined || value === null) { hasEmptyValue = true; }\n    }\n  } else { // If no titleMap and no enum list, return default map of boolean values\n    newTitleMap = [ { name: 'True', value: true }, { name: 'False', value: false } ];\n  }\n\n  // Does titleMap have groups?\n  if (newTitleMap.some(title => hasOwn(title, 'group'))) {\n    hasEmptyValue = false;\n\n    // If flatList = true, flatten items & update name to group: name\n    if (flatList) {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (isArray(title.items)) {\n            groupTitleMap = [\n              ...groupTitleMap,\n              ...title.items.map(item =>\n                ({ ...item, ...{ name: `${title.group}: ${item.name}` } })\n              )\n            ];\n            if (title.items.some(item => item.value === undefined || item.value === null)) {\n              hasEmptyValue = true;\n            }\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            title.name = `${title.group}: ${title.name}`;\n            delete title.group;\n            groupTitleMap.push(title);\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true;\n            }\n          }\n        } else {\n          groupTitleMap.push(title);\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true;\n          }\n        }\n        return groupTitleMap;\n      }, []);\n\n    // If flatList = false, combine items from matching groups\n    } else {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (title.group !== (groupTitleMap[groupTitleMap.length - 1] || {}).group) {\n            groupTitleMap.push({ group: title.group, items: title.items || [] });\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            groupTitleMap[groupTitleMap.length - 1].items\n              .push({ name: title.name, value: title.value });\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true;\n            }\n          }\n        } else {\n          groupTitleMap.push(title);\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true;\n          }\n        }\n        return groupTitleMap;\n      }, []);\n    }\n  }\n  if (!fieldRequired && !hasEmptyValue) {\n    newTitleMap.unshift({ name: '<em>None</em>', value: null });\n  }\n  return newTitleMap;\n}\n",
    "import {\n  AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn\n} from '@angular/forms';\n\nimport * as _ from 'lodash';\n\nimport {\n  hasValue, inArray, isArray, isEmpty, isDate, isObject, isDefined, isPrimitive,\n  toJavaScriptType, toSchemaType, SchemaPrimitiveType\n} from './validator.functions';\nimport { forEach, hasOwn } from './utility.functions';\nimport { Pointer, JsonPointer } from './jsonpointer.functions';\nimport { JsonValidators } from './json.validators';\nimport {\n  combineAllOf, getControlValidators, getSubSchema, removeRecursiveReferences\n} from './json-schema.functions';\n\n/**\n * FormGroup function library:\n *\n * buildFormGroupTemplate:  Builds a FormGroupTemplate from schema\n *\n * buildFormGroup:          Builds an Angular FormGroup from a FormGroupTemplate\n *\n * mergeValues:\n *\n * setRequiredFields:\n *\n * formatFormData:\n *\n * getControl:\n *\n * ---- TODO: ----\n * TODO: add buildFormGroupTemplateFromLayout function\n * buildFormGroupTemplateFromLayout: Builds a FormGroupTemplate from a form layout\n */\n\n/**\n * 'buildFormGroupTemplate' function\n *\n * Builds a template for an Angular FormGroup from a JSON Schema.\n *\n * TODO: add support for pattern properties\n * https://spacetelescope.github.io/understanding-json-schema/reference/object.html\n *\n * @param  {any} jsf -\n * @param  {any = null} nodeValue -\n * @param  {boolean = true} mapArrays -\n * @param  {string = ''} schemaPointer -\n * @param  {string = ''} dataPointer -\n * @param  {any = ''} templatePointer -\n * @return {any} -\n */\nexport function buildFormGroupTemplate(\n  jsf: any, nodeValue: any = null, setValues = true,\n  schemaPointer = '', dataPointer = '', templatePointer = ''\n) {\n  const schema = JsonPointer.get(jsf.schema, schemaPointer);\n  if (setValues) {\n    if (!isDefined(nodeValue) && (\n      jsf.formOptions.setSchemaDefaults === true ||\n      (jsf.formOptions.setSchemaDefaults === 'auto' && isEmpty(jsf.formValues))\n    )) {\n      nodeValue = JsonPointer.get(jsf.schema, schemaPointer + '/default');\n    }\n  } else {\n    nodeValue = null;\n  }\n  // TODO: If nodeValue still not set, check layout for default value\n  const schemaType: string | string[] = JsonPointer.get(schema, '/type');\n  const controlType =\n    (hasOwn(schema, 'properties') || hasOwn(schema, 'additionalProperties')) &&\n      schemaType === 'object' ? 'FormGroup' :\n    (hasOwn(schema, 'items') || hasOwn(schema, 'additionalItems')) &&\n      schemaType === 'array' ? 'FormArray' :\n    !schemaType && hasOwn(schema, '$ref') ? '$ref' : 'FormControl';\n  const shortDataPointer =\n    removeRecursiveReferences(dataPointer, jsf.dataRecursiveRefMap, jsf.arrayMap);\n  if (!jsf.dataMap.has(shortDataPointer)) {\n    jsf.dataMap.set(shortDataPointer, new Map());\n  }\n  const nodeOptions = jsf.dataMap.get(shortDataPointer);\n  if (!nodeOptions.has('schemaType')) {\n    nodeOptions.set('schemaPointer', schemaPointer);\n    nodeOptions.set('schemaType', schema.type);\n    if (schema.format) {\n      nodeOptions.set('schemaFormat', schema.format);\n      if (!schema.type) { nodeOptions.set('schemaType', 'string'); }\n    }\n    if (controlType) {\n      nodeOptions.set('templatePointer', templatePointer);\n      nodeOptions.set('templateType', controlType);\n    }\n  }\n  let controls: any;\n  const validators = getControlValidators(schema);\n  switch (controlType) {\n\n    case 'FormGroup':\n      controls = {};\n      if (hasOwn(schema, 'ui:order') || hasOwn(schema, 'properties')) {\n        const propertyKeys = schema['ui:order'] || Object.keys(schema.properties);\n        if (propertyKeys.includes('*') && !hasOwn(schema.properties, '*')) {\n          const unnamedKeys = Object.keys(schema.properties)\n            .filter(key => !propertyKeys.includes(key));\n          for (let i = propertyKeys.length - 1; i >= 0; i--) {\n            if (propertyKeys[i] === '*') {\n              propertyKeys.splice(i, 1, ...unnamedKeys);\n            }\n          }\n        }\n        propertyKeys\n          .filter(key => hasOwn(schema.properties, key) ||\n            hasOwn(schema, 'additionalProperties')\n          )\n          .forEach(key => controls[key] = buildFormGroupTemplate(\n            jsf, JsonPointer.get(nodeValue, [<string>key]), setValues,\n            schemaPointer + (hasOwn(schema.properties, key) ?\n              '/properties/' + key : '/additionalProperties'\n            ),\n            dataPointer + '/' + key,\n            templatePointer + '/controls/' + key\n          ));\n        jsf.formOptions.fieldsRequired = setRequiredFields(schema, controls);\n      }\n      return { controlType, controls, validators };\n\n    case 'FormArray':\n      controls = [];\n      const minItems =\n        Math.max(schema.minItems || 0, nodeOptions.get('minItems') || 0);\n      const maxItems =\n        Math.min(schema.maxItems || 1000, nodeOptions.get('maxItems') || 1000);\n      let additionalItemsPointer: string = null;\n      if (isArray(schema.items)) { // 'items' is an array = tuple items\n        const tupleItems = nodeOptions.get('tupleItems') ||\n          (isArray(schema.items) ? Math.min(schema.items.length, maxItems) : 0);\n        for (let i = 0; i < tupleItems; i++) {\n          if (i < minItems) {\n            controls.push(buildFormGroupTemplate(\n              jsf, isArray(nodeValue) ? nodeValue[i] : nodeValue, setValues,\n              schemaPointer + '/items/' + i,\n              dataPointer + '/' + i,\n              templatePointer + '/controls/' + i\n            ));\n          } else {\n            const schemaRefPointer = removeRecursiveReferences(\n              schemaPointer + '/items/' + i, jsf.schemaRecursiveRefMap\n            );\n            const itemRefPointer = removeRecursiveReferences(\n              shortDataPointer + '/' + i, jsf.dataRecursiveRefMap, jsf.arrayMap\n            );\n            const itemRecursive = itemRefPointer !== shortDataPointer + '/' + i;\n            if (!hasOwn(jsf.templateRefLibrary, itemRefPointer)) {\n              jsf.templateRefLibrary[itemRefPointer] = null;\n              jsf.templateRefLibrary[itemRefPointer] = buildFormGroupTemplate(\n                jsf, null, setValues,\n                schemaRefPointer,\n                itemRefPointer,\n                templatePointer + '/controls/' + i\n              );\n            }\n            controls.push(\n              isArray(nodeValue) ?\n                buildFormGroupTemplate(\n                  jsf, nodeValue[i], setValues,\n                  schemaPointer + '/items/' + i,\n                  dataPointer + '/' + i,\n                  templatePointer + '/controls/' + i\n                ) :\n              itemRecursive ?\n                null : _.cloneDeep(jsf.templateRefLibrary[itemRefPointer])\n            );\n          }\n        }\n\n        // If 'additionalItems' is an object = additional list items (after tuple items)\n        if (schema.items.length < maxItems && isObject(schema.additionalItems)) {\n          additionalItemsPointer = schemaPointer + '/additionalItems';\n        }\n\n      // If 'items' is an object = list items only (no tuple items)\n      } else {\n        additionalItemsPointer = schemaPointer + '/items';\n      }\n\n      if (additionalItemsPointer) {\n        const schemaRefPointer = removeRecursiveReferences(\n          additionalItemsPointer, jsf.schemaRecursiveRefMap\n        );\n        const itemRefPointer = removeRecursiveReferences(\n          shortDataPointer + '/-', jsf.dataRecursiveRefMap, jsf.arrayMap\n        );\n        const itemRecursive = itemRefPointer !== shortDataPointer + '/-';\n        if (!hasOwn(jsf.templateRefLibrary, itemRefPointer)) {\n          jsf.templateRefLibrary[itemRefPointer] = null;\n          jsf.templateRefLibrary[itemRefPointer] = buildFormGroupTemplate(\n            jsf, null, setValues,\n            schemaRefPointer,\n            itemRefPointer,\n            templatePointer + '/controls/-'\n          );\n        }\n        // const itemOptions = jsf.dataMap.get(itemRefPointer) || new Map();\n        const itemOptions = nodeOptions;\n        if (!itemRecursive || hasOwn(validators, 'required')) {\n          const arrayLength = Math.min(Math.max(\n            itemRecursive ? 0 :\n              (itemOptions.get('tupleItems') + itemOptions.get('listItems')) || 0,\n            isArray(nodeValue) ? nodeValue.length : 0\n          ), maxItems);\n          for (let i = controls.length; i < arrayLength; i++) {\n            controls.push(\n              isArray(nodeValue) ?\n                buildFormGroupTemplate(\n                  jsf, nodeValue[i], setValues,\n                  schemaRefPointer,\n                  dataPointer + '/-',\n                  templatePointer + '/controls/-'\n                ) :\n                itemRecursive ?\n                  null : _.cloneDeep(jsf.templateRefLibrary[itemRefPointer])\n            );\n          }\n        }\n      }\n      return { controlType, controls, validators };\n\n    case '$ref':\n      const schemaRef = JsonPointer.compile(schema.$ref);\n      const dataRef = JsonPointer.toDataPointer(schemaRef, schema);\n      const refPointer = removeRecursiveReferences(\n        dataRef, jsf.dataRecursiveRefMap, jsf.arrayMap\n      );\n      if (refPointer && !hasOwn(jsf.templateRefLibrary, refPointer)) {\n        // Set to null first to prevent recursive reference from causing endless loop\n        jsf.templateRefLibrary[refPointer] = null;\n        const newTemplate = buildFormGroupTemplate(jsf, setValues, setValues, schemaRef);\n        if (newTemplate) {\n          jsf.templateRefLibrary[refPointer] = newTemplate;\n        } else {\n          delete jsf.templateRefLibrary[refPointer];\n        }\n      }\n      return null;\n\n    case 'FormControl':\n      const value = {\n        value: setValues && isPrimitive(nodeValue) ? nodeValue : null,\n        disabled: nodeOptions.get('disabled') || false\n      };\n      return { controlType, value, validators };\n\n    default:\n      return null;\n  }\n}\n\n/**\n * 'buildFormGroup' function\n *\n * @param {any} template -\n * @return {AbstractControl}\n*/\nexport function buildFormGroup(template: any): AbstractControl {\n  const validatorFns: ValidatorFn[] = [];\n  let validatorFn: ValidatorFn = null;\n  if (hasOwn(template, 'validators')) {\n    forEach(template.validators, (parameters, validator) => {\n      if (typeof JsonValidators[validator] === 'function') {\n        validatorFns.push(JsonValidators[validator].apply(null, parameters));\n      }\n    });\n    if (validatorFns.length &&\n      inArray(template.controlType, ['FormGroup', 'FormArray'])\n    ) {\n      validatorFn = validatorFns.length > 1 ?\n        JsonValidators.compose(validatorFns) : validatorFns[0];\n    }\n  }\n  if (hasOwn(template, 'controlType')) {\n    switch (template.controlType) {\n      case 'FormGroup':\n        const groupControls: { [key: string]: AbstractControl } = {};\n        forEach(template.controls, (controls, key) => {\n          const newControl: AbstractControl = buildFormGroup(controls);\n          if (newControl) { groupControls[key] = newControl; }\n        });\n        return new FormGroup(groupControls, validatorFn);\n      case 'FormArray':\n        return new FormArray(_.filter(_.map(template.controls,\n          controls => buildFormGroup(controls)\n        )), validatorFn);\n      case 'FormControl':\n        return new FormControl(template.value, validatorFns);\n    }\n  }\n  return null;\n}\n\n/**\n * 'mergeValues' function\n *\n * @param  {any[]} ...valuesToMerge - Multiple values to merge\n * @return {any} - Merged values\n */\nexport function mergeValues(...valuesToMerge) {\n  let mergedValues: any = null;\n  for (const currentValue of valuesToMerge) {\n    if (!isEmpty(currentValue)) {\n      if (typeof currentValue === 'object' &&\n        (isEmpty(mergedValues) || typeof mergedValues !== 'object')\n      ) {\n        if (isArray(currentValue)) {\n          mergedValues = [ ...currentValue ];\n        } else if (isObject(currentValue)) {\n          mergedValues = { ...currentValue };\n        }\n      } else if (typeof currentValue !== 'object') {\n        mergedValues = currentValue;\n      } else if (isObject(mergedValues) && isObject(currentValue)) {\n        Object.assign(mergedValues, currentValue);\n      } else if (isObject(mergedValues) && isArray(currentValue)) {\n        const newValues = [];\n        for (const value of currentValue) {\n          newValues.push(mergeValues(mergedValues, value));\n        }\n        mergedValues = newValues;\n      } else if (isArray(mergedValues) && isObject(currentValue)) {\n        const newValues = [];\n        for (const value of mergedValues) {\n          newValues.push(mergeValues(value, currentValue));\n        }\n        mergedValues = newValues;\n      } else if (isArray(mergedValues) && isArray(currentValue)) {\n        const newValues = [];\n        for (let i = 0; i < Math.max(mergedValues.length, currentValue.length); i++) {\n          if (i < mergedValues.length && i < currentValue.length) {\n            newValues.push(mergeValues(mergedValues[i], currentValue[i]));\n          } else if (i < mergedValues.length) {\n            newValues.push(mergedValues[i]);\n          } else if (i < currentValue.length) {\n            newValues.push(currentValue[i]);\n          }\n        }\n        mergedValues = newValues;\n      }\n    }\n  }\n  return mergedValues;\n}\n\n/**\n * 'setRequiredFields' function\n *\n * @param {schema} schema - JSON Schema\n * @param {object} formControlTemplate - Form Control Template object\n * @return {boolean} - true if any fields have been set to required, false if not\n */\nexport function setRequiredFields(schema: any, formControlTemplate: any): boolean {\n  let fieldsRequired = false;\n  if (hasOwn(schema, 'required') && !isEmpty(schema.required)) {\n    fieldsRequired = true;\n    let requiredArray = isArray(schema.required) ? schema.required : [schema.required];\n    requiredArray = forEach(requiredArray,\n      key => JsonPointer.set(formControlTemplate, '/' + key + '/validators/required', [])\n    );\n  }\n  return fieldsRequired;\n\n  // TODO: Add support for patternProperties\n  // https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties\n}\n\n/**\n * 'formatFormData' function\n *\n * @param {any} formData - Angular FormGroup data object\n * @param {Map<string, any>} dataMap -\n * @param {Map<string, string>} recursiveRefMap -\n * @param {Map<string, number>} arrayMap -\n * @param {boolean = false} fixErrors - if TRUE, tries to fix data\n * @return {any} - formatted data object\n */\nexport function formatFormData(\n  formData: any, dataMap: Map<string, any>,\n  recursiveRefMap: Map<string, string>, arrayMap: Map<string, number>,\n  returnEmptyFields = false, fixErrors = false\n): any {\n  if (formData === null || typeof formData !== 'object') { return formData; }\n  const formattedData = isArray(formData) ? [] : {};\n  JsonPointer.forEachDeep(formData, (value, dataPointer) => {\n\n    // If returnEmptyFields === true,\n    // add empty arrays and objects to all allowed keys\n    if (returnEmptyFields && isArray(value)) {\n      JsonPointer.set(formattedData, dataPointer, []);\n    } else if (returnEmptyFields && isObject(value) && !isDate(value)) {\n      JsonPointer.set(formattedData, dataPointer, {});\n    } else {\n      const genericPointer =\n        JsonPointer.has(dataMap, [dataPointer, 'schemaType']) ? dataPointer :\n          removeRecursiveReferences(dataPointer, recursiveRefMap, arrayMap);\n      if (JsonPointer.has(dataMap, [genericPointer, 'schemaType'])) {\n        const schemaType: SchemaPrimitiveType | SchemaPrimitiveType[] =\n          dataMap.get(genericPointer).get('schemaType');\n        if (schemaType === 'null') {\n          JsonPointer.set(formattedData, dataPointer, null);\n        } else if ((hasValue(value) || returnEmptyFields) &&\n          inArray(schemaType, ['string', 'integer', 'number', 'boolean'])\n        ) {\n          const newValue = (fixErrors || (value === null && returnEmptyFields)) ?\n            toSchemaType(value, schemaType) : toJavaScriptType(value, schemaType);\n          if (isDefined(newValue) || returnEmptyFields) {\n            JsonPointer.set(formattedData, dataPointer, newValue);\n          }\n\n        // If returnEmptyFields === false,\n        // only add empty arrays and objects to required keys\n        } else if (schemaType === 'object' && !returnEmptyFields) {\n          (dataMap.get(genericPointer).get('required') || []).forEach(key => {\n            const keySchemaType =\n              dataMap.get(`${genericPointer}/${key}`).get('schemaType');\n            if (keySchemaType === 'array') {\n              JsonPointer.set(formattedData, `${dataPointer}/${key}`, []);\n            } else if (keySchemaType === 'object') {\n              JsonPointer.set(formattedData, `${dataPointer}/${key}`, {});\n            }\n          });\n        }\n\n        // Finish incomplete 'date-time' entries\n        if (dataMap.get(genericPointer).get('schemaFormat') === 'date-time') {\n          // \"2000-03-14T01:59:26.535\" -> \"2000-03-14T01:59:26.535Z\" (add \"Z\")\n          if (/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?$/i.test(value)) {\n            JsonPointer.set(formattedData, dataPointer, `${value}Z`);\n          // \"2000-03-14T01:59\" -> \"2000-03-14T01:59:00Z\" (add \":00Z\")\n          } else if (/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d$/i.test(value)) {\n            JsonPointer.set(formattedData, dataPointer, `${value}:00Z`);\n          // \"2000-03-14\" -> \"2000-03-14T00:00:00Z\" (add \"T00:00:00Z\")\n          } else if (fixErrors && /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/i.test(value)) {\n            JsonPointer.set(formattedData, dataPointer, `${value}:00:00:00Z`);\n          }\n        }\n      } else if (typeof value !== 'object' || isDate(value) ||\n        (value === null && returnEmptyFields)\n      ) {\n        console.error('formatFormData error: ' +\n          `Schema type not found for form value at ${genericPointer}`);\n        console.error('dataMap', dataMap);\n        console.error('recursiveRefMap', recursiveRefMap);\n        console.error('genericPointer', genericPointer);\n      }\n    }\n  });\n  return formattedData;\n}\n\n/**\n * 'getControl' function\n *\n * Uses a JSON Pointer for a data object to retrieve a control from\n * an Angular formGroup or formGroup template. (Note: though a formGroup\n * template is much simpler, its basic structure is idential to a formGroup).\n *\n * If the optional third parameter 'returnGroup' is set to TRUE, the group\n * containing the control is returned, rather than the control itself.\n *\n * @param {FormGroup} formGroup - Angular FormGroup to get value from\n * @param {Pointer} dataPointer - JSON Pointer (string or array)\n * @param {boolean = false} returnGroup - If true, return group containing control\n * @return {group} - Located value (or null, if no control found)\n */\nexport function getControl(\n  formGroup: any, dataPointer: Pointer, returnGroup = false\n): any {\n  if (!isObject(formGroup) || !JsonPointer.isJsonPointer(dataPointer)) {\n    if (!JsonPointer.isJsonPointer(dataPointer)) {\n      // If dataPointer input is not a valid JSON pointer, check to\n      // see if it is instead a valid object path, using dot notaion\n      if (typeof dataPointer === 'string') {\n        const formControl = formGroup.get(dataPointer);\n        if (formControl) { return formControl; }\n      }\n      console.error(`getControl error: Invalid JSON Pointer: ${dataPointer}`);\n    }\n    if (!isObject(formGroup)) {\n      console.error(`getControl error: Invalid formGroup: ${formGroup}`);\n    }\n    return null;\n  }\n  let dataPointerArray = JsonPointer.parse(dataPointer);\n  if (returnGroup) { dataPointerArray = dataPointerArray.slice(0, -1); }\n\n  // If formGroup input is a real formGroup (not a formGroup template)\n  // try using formGroup.get() to return the control\n  if (typeof formGroup.get === 'function' &&\n    dataPointerArray.every(key => key.indexOf('.') === -1)\n  ) {\n    const formControl = formGroup.get(dataPointerArray.join('.'));\n    if (formControl) { return formControl; }\n  }\n\n  // If formGroup input is a formGroup template,\n  // or formGroup.get() failed to return the control,\n  // search the formGroup object for dataPointer's control\n  let subGroup = formGroup;\n  for (const key of dataPointerArray) {\n    if (hasOwn(subGroup, 'controls')) { subGroup = subGroup.controls; }\n    if (isArray(subGroup) && (key === '-')) {\n      subGroup = subGroup[subGroup.length - 1];\n    } else if (hasOwn(subGroup, key)) {\n      subGroup = subGroup[key];\n    } else {\n      console.error(`getControl error: Unable to find \"${key}\" item in FormGroup.`);\n      console.error(dataPointer);\n      console.error(formGroup);\n      return;\n    }\n  }\n  return subGroup;\n}\n",
    "import * as _ from 'lodash';\n\n/**\n * 'convertSchemaToDraft6' function\n *\n * Converts a JSON Schema from draft 1 through 4 format to draft 6 format\n *\n * Inspired by on geraintluff's JSON Schema 3 to 4 compatibility function:\n *   https://github.com/geraintluff/json-schema-compatibility\n * Also uses suggestions from AJV's JSON Schema 4 to 6 migration guide:\n *   https://github.com/epoberezkin/ajv/releases/tag/5.0.0\n * And additional details from the official JSON Schema documentation:\n *   http://json-schema.org\n *\n * @param  { object } originalSchema - JSON schema (draft 1, 2, 3, 4, or 6)\n * @param  { OptionObject = {} } options - options: parent schema changed?, schema draft number?\n * @return { object } - JSON schema (draft 6)\n */\nexport interface OptionObject { changed?: boolean; draft?: number; }\nexport function convertSchemaToDraft6(schema, options: OptionObject = {}) {\n  let draft: number = options.draft || null;\n  let changed: boolean = options.changed || false;\n\n  if (typeof schema !== 'object') { return schema; }\n  if (typeof schema.map === 'function') {\n    return [ ...schema.map(subSchema => convertSchemaToDraft6(subSchema, { changed, draft })) ];\n  }\n  let newSchema = { ...schema };\n  const simpleTypes = ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string'];\n\n  if (typeof newSchema.$schema === 'string' &&\n    /http\\:\\/\\/json\\-schema\\.org\\/draft\\-0\\d\\/schema\\#/.test(newSchema.$schema)\n  ) {\n    draft = newSchema.$schema[30];\n  }\n\n  // Convert v1-v2 'contentEncoding' to 'media.binaryEncoding'\n  // Note: This is only used in JSON hyper-schema (not regular JSON schema)\n  if (newSchema.contentEncoding) {\n    newSchema.media = { binaryEncoding: newSchema.contentEncoding };\n    delete newSchema.contentEncoding;\n    changed = true;\n  }\n\n  // Convert v1-v3 'extends' to 'allOf'\n  if (typeof newSchema.extends === 'object') {\n    newSchema.allOf = typeof newSchema.extends.map === 'function' ?\n      newSchema.extends.map(subSchema => convertSchemaToDraft6(subSchema, { changed, draft })) :\n      [ convertSchemaToDraft6(newSchema.extends, { changed, draft }) ];\n    delete newSchema.extends;\n    changed = true;\n  }\n\n  // Convert v1-v3 'disallow' to 'not'\n  if (newSchema.disallow) {\n    if (typeof newSchema.disallow === 'string') {\n      newSchema.not = { type: newSchema.disallow };\n    } else if (typeof newSchema.disallow.map === 'function') {\n      newSchema.not = {\n        anyOf: newSchema.disallow\n          .map(type => typeof type === 'object' ? type : { type })\n      };\n    }\n    delete newSchema.disallow;\n    changed = true;\n  }\n\n  // Convert v3 string 'dependencies' properties to arrays\n  if (typeof newSchema.dependencies === 'object' &&\n    Object.keys(newSchema.dependencies)\n      .some(key => typeof newSchema.dependencies[key] === 'string')\n  ) {\n    newSchema.dependencies = { ...newSchema.dependencies };\n    Object.keys(newSchema.dependencies)\n      .filter(key => typeof newSchema.dependencies[key] === 'string')\n      .forEach(key => newSchema.dependencies[key] = [ newSchema.dependencies[key] ]);\n    changed = true;\n  }\n\n  // Convert v1 'maxDecimal' to 'multipleOf'\n  if (typeof newSchema.maxDecimal === 'number') {\n    newSchema.multipleOf = 1 / Math.pow(10, newSchema.maxDecimal);\n    delete newSchema.divisibleBy;\n    changed = true;\n    if (!draft || draft === 2) { draft = 1; }\n  }\n\n  // Convert v2-v3 'divisibleBy' to 'multipleOf'\n  if (typeof newSchema.divisibleBy === 'number') {\n    newSchema.multipleOf = newSchema.divisibleBy;\n    delete newSchema.divisibleBy;\n    changed = true;\n  }\n\n  // Convert v1-v2 boolean 'minimumCanEqual' to 'exclusiveMinimum'\n  if (typeof newSchema.minimum === 'number' && newSchema.minimumCanEqual === false) {\n    newSchema.exclusiveMinimum = newSchema.minimum;\n    delete newSchema.minimum;\n    changed = true;\n    if (!draft) { draft = 2; }\n  } else if (typeof newSchema.minimumCanEqual === 'boolean') {\n    delete newSchema.minimumCanEqual;\n    changed = true;\n    if (!draft) { draft = 2; }\n  }\n\n  // Convert v3-v4 boolean 'exclusiveMinimum' to numeric\n  if (typeof newSchema.minimum === 'number' && newSchema.exclusiveMinimum === true) {\n    newSchema.exclusiveMinimum = newSchema.minimum;\n    delete newSchema.minimum;\n    changed = true;\n  } else if (typeof newSchema.exclusiveMinimum === 'boolean') {\n    delete newSchema.exclusiveMinimum;\n    changed = true;\n  }\n\n  // Convert v1-v2 boolean 'maximumCanEqual' to 'exclusiveMaximum'\n  if (typeof newSchema.maximum === 'number' && newSchema.maximumCanEqual === false) {\n    newSchema.exclusiveMaximum = newSchema.maximum;\n    delete newSchema.maximum;\n    changed = true;\n    if (!draft) { draft = 2; }\n  } else if (typeof newSchema.maximumCanEqual === 'boolean') {\n    delete newSchema.maximumCanEqual;\n    changed = true;\n    if (!draft) { draft = 2; }\n  }\n\n  // Convert v3-v4 boolean 'exclusiveMaximum' to numeric\n  if (typeof newSchema.maximum === 'number' && newSchema.exclusiveMaximum === true) {\n    newSchema.exclusiveMaximum = newSchema.maximum;\n    delete newSchema.maximum;\n    changed = true;\n  } else if (typeof newSchema.exclusiveMaximum === 'boolean') {\n    delete newSchema.exclusiveMaximum;\n    changed = true;\n  }\n\n  // Search object 'properties' for 'optional', 'required', and 'requires' items,\n  // and convert them into object 'required' arrays and 'dependencies' objects\n  if (typeof newSchema.properties === 'object') {\n    const properties = { ...newSchema.properties };\n    const requiredKeys = Array.isArray(newSchema.required) ?\n      new Set(newSchema.required) : new Set();\n\n    // Convert v1-v2 boolean 'optional' properties to 'required' array\n    if (draft === 1 || draft === 2 ||\n      Object.keys(properties).some(key => properties[key].optional === true)\n    ) {\n      Object.keys(properties)\n        .filter(key => properties[key].optional !== true)\n        .forEach(key => requiredKeys.add(key));\n      changed = true;\n      if (!draft) { draft = 2; }\n    }\n\n    // Convert v3 boolean 'required' properties to 'required' array\n    if (Object.keys(properties).some(key => properties[key].required === true)) {\n      Object.keys(properties)\n        .filter(key => properties[key].required === true)\n        .forEach(key => requiredKeys.add(key));\n      changed = true;\n    }\n\n    if (requiredKeys.size) { newSchema.required = Array.from(requiredKeys); }\n\n    // Convert v1-v2 array or string 'requires' properties to 'dependencies' object\n    if (Object.keys(properties).some(key => properties[key].requires)) {\n      const dependencies = typeof newSchema.dependencies === 'object' ?\n        { ...newSchema.dependencies } : {};\n      Object.keys(properties)\n        .filter(key => properties[key].requires)\n        .forEach(key => dependencies[key] =\n          typeof properties[key].requires === 'string' ?\n            [ properties[key].requires ] : properties[key].requires\n        );\n      newSchema.dependencies = dependencies;\n      changed = true;\n      if (!draft) { draft = 2; }\n    }\n\n    newSchema.properties = properties;\n  }\n\n  // Revove v1-v2 boolean 'optional' key\n  if (typeof newSchema.optional === 'boolean') {\n    delete newSchema.optional;\n    changed = true;\n    if (!draft) { draft = 2; }\n  }\n\n  // Revove v1-v2 'requires' key\n  if (newSchema.requires) {\n    delete newSchema.requires;\n  }\n\n  // Revove v3 boolean 'required' key\n  if (typeof newSchema.required === 'boolean') {\n    delete newSchema.required;\n  }\n\n  // Convert id to $id\n  if (typeof newSchema.id === 'string' && !newSchema.$id) {\n    if (newSchema.id.slice(-1) === '#') {\n      newSchema.id = newSchema.id.slice(0, -1);\n    }\n    newSchema.$id = newSchema.id + '-CONVERTED-TO-DRAFT-06#';\n    delete newSchema.id;\n    changed = true;\n  }\n\n  // Check if v1-v3 'any' or object types will be converted\n  if (newSchema.type && (typeof newSchema.type.every === 'function' ?\n    !newSchema.type.every(type => simpleTypes.includes(type)) :\n    !simpleTypes.includes(newSchema.type)\n  )) {\n    changed = true;\n  }\n\n  // If schema changed, update or remove $schema identifier\n  if (typeof newSchema.$schema === 'string' &&\n    /http\\:\\/\\/json\\-schema\\.org\\/draft\\-0[1-4]\\/schema\\#/.test(newSchema.$schema)\n  ) {\n    newSchema.$schema = 'http://json-schema.org/draft-06/schema#';\n    changed = true;\n  } else if (changed && typeof newSchema.$schema === 'string') {\n    const addToDescription = 'Converted to draft 6 from ' + newSchema.$schema;\n    if (typeof newSchema.description === 'string' && newSchema.description.length) {\n      newSchema.description += '\\n' + addToDescription;\n    } else {\n      newSchema.description = addToDescription;\n    }\n    delete newSchema.$schema;\n  }\n\n  // Convert v1-v3 'any' and object types\n  if (newSchema.type && (typeof newSchema.type.every === 'function' ?\n    !newSchema.type.every(type => simpleTypes.includes(type)) :\n    !simpleTypes.includes(newSchema.type)\n  )) {\n    if (newSchema.type.length === 1) { newSchema.type = newSchema.type[0]; }\n    if (typeof newSchema.type === 'string') {\n      // Convert string 'any' type to array of all standard types\n      if (newSchema.type === 'any') {\n        newSchema.type = simpleTypes;\n      // Delete non-standard string type\n      } else {\n        delete newSchema.type;\n      }\n    } else if (typeof newSchema.type === 'object') {\n      if (typeof newSchema.type.every === 'function') {\n        // If array of strings, only allow standard types\n        if (newSchema.type.every(type => typeof type === 'string')) {\n          newSchema.type = newSchema.type.some(type => type === 'any') ?\n            newSchema.type = simpleTypes :\n            newSchema.type.filter(type => simpleTypes.includes(type));\n        // If type is an array with objects, convert the current schema to an 'anyOf' array\n        } else if (newSchema.type.length > 1) {\n          const arrayKeys = [ 'additionalItems', 'items', 'maxItems', 'minItems', 'uniqueItems', 'contains'];\n          const numberKeys = [ 'multipleOf', 'maximum', 'exclusiveMaximum', 'minimum', 'exclusiveMinimum'];\n          const objectKeys = [ 'maxProperties', 'minProperties', 'required', 'additionalProperties',\n            'properties', 'patternProperties', 'dependencies', 'propertyNames'];\n          const stringKeys = [ 'maxLength', 'minLength', 'pattern', 'format'];\n          const filterKeys = {\n            'array':   [ ...numberKeys, ...objectKeys, ...stringKeys ],\n            'integer': [  ...arrayKeys, ...objectKeys, ...stringKeys ],\n            'number':  [  ...arrayKeys, ...objectKeys, ...stringKeys ],\n            'object':  [  ...arrayKeys, ...numberKeys, ...stringKeys ],\n            'string':  [  ...arrayKeys, ...numberKeys, ...objectKeys ],\n            'all':     [  ...arrayKeys, ...numberKeys, ...objectKeys, ...stringKeys ],\n          };\n          const anyOf = [];\n          for (const type of newSchema.type) {\n            const newType = typeof type === 'string' ? { type } : { ...type };\n            Object.keys(newSchema)\n              .filter(key => !newType.hasOwnProperty(key) &&\n                ![ ...(filterKeys[newType.type] || filterKeys.all), 'type', 'default' ]\n                  .includes(key)\n              )\n              .forEach(key => newType[key] = newSchema[key]);\n            anyOf.push(newType);\n          }\n          newSchema = newSchema.hasOwnProperty('default') ?\n            { anyOf, default: newSchema.default } : { anyOf };\n        // If type is an object, merge it with the current schema\n        } else {\n          const typeSchema = newSchema.type;\n          delete newSchema.type;\n          Object.assign(newSchema, typeSchema);\n        }\n      }\n    } else {\n      delete newSchema.type;\n    }\n  }\n\n  // Convert sub schemas\n  Object.keys(newSchema)\n    .filter(key => typeof newSchema[key] === 'object')\n    .forEach(key => {\n      if (\n        [ 'definitions', 'dependencies', 'properties', 'patternProperties' ]\n          .includes(key) && typeof newSchema[key].map !== 'function'\n      ) {\n        const newKey = {};\n        Object.keys(newSchema[key]).forEach(subKey => newKey[subKey] =\n          convertSchemaToDraft6(newSchema[key][subKey], { changed, draft })\n        );\n        newSchema[key] = newKey;\n      } else if (\n        [ 'items', 'additionalItems', 'additionalProperties',\n          'allOf', 'anyOf', 'oneOf', 'not' ].includes(key)\n      ) {\n        newSchema[key] = convertSchemaToDraft6(newSchema[key], { changed, draft });\n      } else {\n        newSchema[key] = _.cloneDeep(newSchema[key]);\n      }\n    });\n\n  return newSchema;\n}\n",
    "import * as _ from 'lodash';\n\nimport {\n  getType, hasValue, inArray, isArray, isEmpty, isFunction, isNumber, isObject,\n  isString\n} from './validator.functions';\nimport {\n  forEach, hasOwn, mergeFilteredObject, uniqueItems, commonItems\n} from './utility.functions';\nimport { mergeSchemas } from './merge-schemas.function';\nimport { JsonPointer, Pointer } from './jsonpointer.functions';\nimport { JsonValidators } from './json.validators';\n\n/**\n * JSON Schema function library:\n *\n * buildSchemaFromLayout:   TODO: Write this function\n *\n * buildSchemaFromData:\n *\n * getFromSchema:\n *\n * removeRecursiveReferences:\n *\n * getInputType:\n *\n * checkInlineType:\n *\n * isInputRequired:\n *\n * updateInputOptions:\n *\n * getTitleMapFromOneOf:\n *\n * getControlValidators:\n *\n * resolveSchemaReferences:\n *\n * getSubSchema:\n *\n * combineAllOf:\n *\n * fixRequiredArrayProperties:\n */\n\n/**\n * 'buildSchemaFromLayout' function\n *\n * TODO: Build a JSON Schema from a JSON Form layout\n *\n * @param  { any[] } layout - The JSON Form layout\n * @return { any } - The new JSON Schema\n */\nexport function buildSchemaFromLayout(layout) {\n  return;\n  // let newSchema: any = { };\n  // const walkLayout = (layoutItems: any[], callback: Function): any[] => {\n  //   let returnArray: any[] = [];\n  //   for (let layoutItem of layoutItems) {\n  //     const returnItem: any = callback(layoutItem);\n  //     if (returnItem) { returnArray = returnArray.concat(callback(layoutItem)); }\n  //     if (layoutItem.items) {\n  //       returnArray = returnArray.concat(walkLayout(layoutItem.items, callback));\n  //     }\n  //   }\n  //   return returnArray;\n  // };\n  // walkLayout(layout, layoutItem => {\n  //   let itemKey: string;\n  //   if (typeof layoutItem === 'string') {\n  //     itemKey = layoutItem;\n  //   } else if (layoutItem.key) {\n  //     itemKey = layoutItem.key;\n  //   }\n  //   if (!itemKey) { return; }\n  //   //\n  // });\n}\n\n/**\n * 'buildSchemaFromData' function\n *\n * Build a JSON Schema from a data object\n *\n * @param  { any } data - The data object\n * @param  { boolean = false } requireAllFields - Require all fields?\n * @param  { boolean = true } isRoot - is root\n * @return { any } - The new JSON Schema\n */\nexport function buildSchemaFromData(\n  data, requireAllFields = false, isRoot = true\n) {\n  const newSchema: any = {};\n  const getFieldType = (value: any): string => {\n    const fieldType = getType(value, 'strict');\n    return { integer: 'number', null: 'string' }[fieldType] || fieldType;\n  };\n  const buildSubSchema = (value) =>\n    buildSchemaFromData(value, requireAllFields, false);\n  if (isRoot) { newSchema.$schema = 'http://json-schema.org/draft-06/schema#'; }\n  newSchema.type = getFieldType(data);\n  if (newSchema.type === 'object') {\n    newSchema.properties = {};\n    if (requireAllFields) { newSchema.required = []; }\n    for (const key of Object.keys(data)) {\n      newSchema.properties[key] = buildSubSchema(data[key]);\n      if (requireAllFields) { newSchema.required.push(key); }\n    }\n  } else if (newSchema.type === 'array') {\n    newSchema.items = data.map(buildSubSchema);\n    // If all items are the same type, use an object for items instead of an array\n    if ((new Set(data.map(getFieldType))).size === 1) {\n      newSchema.items = newSchema.items.reduce((a, b) => ({ ...a, ...b }), {});\n    }\n    if (requireAllFields) { newSchema.minItems = 1; }\n  }\n  return newSchema;\n}\n\n/**\n * 'getFromSchema' function\n *\n * Uses a JSON Pointer for a value within a data object to retrieve\n * the schema for that value within schema for the data object.\n *\n * The optional third parameter can also be set to return something else:\n * 'schema' (default): the schema for the value indicated by the data pointer\n * 'parentSchema': the schema for the value's parent object or array\n * 'schemaPointer': a pointer to the value's schema within the object's schema\n * 'parentSchemaPointer': a pointer to the schema for the value's parent object or array\n *\n * @param  { any } schema - The schema to get the sub-schema from\n * @param  { Pointer } dataPointer - JSON Pointer (string or array)\n * @param  { string = 'schema' } returnType - what to return?\n * @return { any } - The located sub-schema\n */\nexport function getFromSchema(schema, dataPointer, returnType = 'schema') {\n  const dataPointerArray: any[] = JsonPointer.parse(dataPointer);\n  if (dataPointerArray === null) {\n    console.error(`getFromSchema error: Invalid JSON Pointer: ${dataPointer}`);\n    return null;\n  }\n  let subSchema = schema;\n  const schemaPointer = [];\n  const length = dataPointerArray.length;\n  if (returnType.slice(0, 6) === 'parent') { dataPointerArray.length--; }\n  for (let i = 0; i < length; ++i) {\n    const parentSchema = subSchema;\n    const key = dataPointerArray[i];\n    let subSchemaFound = false;\n    if (typeof subSchema !== 'object') {\n      console.error(`getFromSchema error: Unable to find \"${key}\" key in schema.`);\n      console.error(schema);\n      console.error(dataPointer);\n      return null;\n    }\n    if (subSchema.type === 'array' && (!isNaN(key) || key === '-')) {\n      if (hasOwn(subSchema, 'items')) {\n        if (isObject(subSchema.items)) {\n          subSchemaFound = true;\n          subSchema = subSchema.items;\n          schemaPointer.push('items');\n        } else if (isArray(subSchema.items)) {\n          if (!isNaN(key) && subSchema.items.length >= +key) {\n            subSchemaFound = true;\n            subSchema = subSchema.items[+key];\n            schemaPointer.push('items', key);\n          }\n        }\n      }\n      if (!subSchemaFound && isObject(subSchema.additionalItems)) {\n        subSchemaFound = true;\n        subSchema = subSchema.additionalItems;\n        schemaPointer.push('additionalItems');\n      } else if (subSchema.additionalItems !== false) {\n        subSchemaFound = true;\n        subSchema = { };\n        schemaPointer.push('additionalItems');\n      }\n    } else if (subSchema.type === 'object') {\n      if (isObject(subSchema.properties) && hasOwn(subSchema.properties, key)) {\n        subSchemaFound = true;\n        subSchema = subSchema.properties[key];\n        schemaPointer.push('properties', key);\n      } else if (isObject(subSchema.additionalProperties)) {\n        subSchemaFound = true;\n        subSchema = subSchema.additionalProperties;\n        schemaPointer.push('additionalProperties');\n      } else if (subSchema.additionalProperties !== false) {\n        subSchemaFound = true;\n        subSchema = { };\n        schemaPointer.push('additionalProperties');\n      }\n    }\n    if (!subSchemaFound) {\n      console.error(`getFromSchema error: Unable to find \"${key}\" item in schema.`);\n      console.error(schema);\n      console.error(dataPointer);\n      return;\n    }\n  }\n  return returnType.slice(-7) === 'Pointer' ? schemaPointer : subSchema;\n}\n\n/**\n * 'removeRecursiveReferences' function\n *\n * Checks a JSON Pointer against a map of recursive references and returns\n * a JSON Pointer to the shallowest equivalent location in the same object.\n *\n * Using this functions enables an object to be constructed with unlimited\n * recursion, while maintaing a fixed set of metadata, such as field data types.\n * The object can grow as large as it wants, and deeply recursed nodes can\n * just refer to the metadata for their shallow equivalents, instead of having\n * to add additional redundant metadata for each recursively added node.\n *\n * Example:\n *\n * pointer:         '/stuff/and/more/and/more/and/more/and/more/stuff'\n * recursiveRefMap: [['/stuff/and/more/and/more', '/stuff/and/more/']]\n * returned:        '/stuff/and/more/stuff'\n *\n * @param  { Pointer } pointer -\n * @param  { Map<string, string> } recursiveRefMap -\n * @param  { Map<string, number> = new Map() } arrayMap - optional\n * @return { string } -\n */\nexport function removeRecursiveReferences(\n  pointer, recursiveRefMap, arrayMap = new Map()\n) {\n  if (!pointer) { return ''; }\n  let genericPointer =\n    JsonPointer.toGenericPointer(JsonPointer.compile(pointer), arrayMap);\n  if (genericPointer.indexOf('/') === -1) { return genericPointer; }\n  let possibleReferences = true;\n  while (possibleReferences) {\n    possibleReferences = false;\n    recursiveRefMap.forEach((toPointer, fromPointer) => {\n      if (JsonPointer.isSubPointer(toPointer, fromPointer)) {\n        while (JsonPointer.isSubPointer(fromPointer, genericPointer, true)) {\n          genericPointer = JsonPointer.toGenericPointer(\n            toPointer + genericPointer.slice(fromPointer.length), arrayMap\n          );\n          possibleReferences = true;\n        }\n      }\n    });\n  }\n  return genericPointer;\n}\n\n/**\n * 'getInputType' function\n *\n * @param  { any } schema\n * @param  { any = null } layoutNode\n * @return { string }\n */\nexport function getInputType(schema, layoutNode: any = null) {\n  // x-schema-form = Angular Schema Form compatibility\n  // widget & component = React Jsonschema Form compatibility\n  const controlType = JsonPointer.getFirst([\n    [schema, '/x-schema-form/type'],\n    [schema, '/x-schema-form/widget/component'],\n    [schema, '/x-schema-form/widget'],\n    [schema, '/widget/component'],\n    [schema, '/widget']\n  ]);\n  if (isString(controlType)) { return checkInlineType(controlType, schema, layoutNode); }\n  let schemaType = schema.type;\n  if (schemaType) {\n    if (isArray(schemaType)) { // If multiple types listed, use most inclusive type\n      schemaType =\n        inArray('object', schemaType) && hasOwn(schema, 'properties') ? 'object' :\n        inArray('array', schemaType) && hasOwn(schema, 'items') ? 'array' :\n        inArray('array', schemaType) && hasOwn(schema, 'additionalItems') ? 'array' :\n        inArray('string', schemaType) ? 'string' :\n        inArray('number', schemaType) ? 'number' :\n        inArray('integer', schemaType) ? 'integer' :\n        inArray('boolean', schemaType) ? 'boolean' : 'unknown';\n    }\n    if (schemaType === 'boolean') { return 'checkbox'; }\n    if (schemaType === 'object') {\n      if (hasOwn(schema, 'properties') || hasOwn(schema, 'additionalProperties')) {\n        return 'section';\n      }\n      // TODO: Figure out how to handle additionalProperties\n      if (hasOwn(schema, '$ref')) { return '$ref'; }\n    }\n    if (schemaType === 'array') {\n      const itemsObject = JsonPointer.getFirst([\n        [schema, '/items'],\n        [schema, '/additionalItems']\n      ]) || {};\n      return hasOwn(itemsObject, 'enum') && schema.maxItems !== 1 ?\n        checkInlineType('checkboxes', schema, layoutNode) : 'array';\n    }\n    if (schemaType === 'null') { return 'none'; }\n    if (JsonPointer.has(layoutNode, '/options/titleMap') ||\n      hasOwn(schema, 'enum') || getTitleMapFromOneOf(schema, null, true)\n    ) { return 'select'; }\n    if (schemaType === 'number' || schemaType === 'integer') {\n      return (schemaType === 'integer' || hasOwn(schema, 'multipleOf')) &&\n        hasOwn(schema, 'maximum') && hasOwn(schema, 'minimum') ? 'range' : schemaType;\n    }\n    if (schemaType === 'string') {\n      return {\n        'color': 'color',\n        'date': 'date',\n        'date-time': 'datetime-local',\n        'email': 'email',\n        'uri': 'url',\n      }[schema.format] || 'text';\n    }\n  }\n  if (hasOwn(schema, '$ref')) { return '$ref'; }\n  if (isArray(schema.oneOf) || isArray(schema.anyOf)) { return 'one-of'; }\n  console.error(`getInputType error: Unable to determine input type for ${schemaType}`);\n  console.error('schema', schema);\n  if (layoutNode) { console.error('layoutNode', layoutNode); }\n  return 'none';\n}\n\n/**\n * 'checkInlineType' function\n *\n * Checks layout and schema nodes for 'inline: true', and converts\n * 'radios' or 'checkboxes' to 'radios-inline' or 'checkboxes-inline'\n *\n * @param  { string } controlType -\n * @param  { any } schema -\n * @param  { any = null } layoutNode -\n * @return { string }\n */\nexport function checkInlineType(controlType, schema, layoutNode: any = null) {\n  if (!isString(controlType) || (\n    controlType.slice(0, 8) !== 'checkbox' && controlType.slice(0, 5) !== 'radio'\n  )) {\n    return controlType;\n  }\n  if (\n    JsonPointer.getFirst([\n      [layoutNode, '/inline'],\n      [layoutNode, '/options/inline'],\n      [schema, '/inline'],\n      [schema, '/x-schema-form/inline'],\n      [schema, '/x-schema-form/options/inline'],\n      [schema, '/x-schema-form/widget/inline'],\n      [schema, '/x-schema-form/widget/component/inline'],\n      [schema, '/x-schema-form/widget/component/options/inline'],\n      [schema, '/widget/inline'],\n      [schema, '/widget/component/inline'],\n      [schema, '/widget/component/options/inline'],\n    ]) === true\n  ) {\n    return controlType.slice(0, 5) === 'radio' ?\n      'radios-inline' : 'checkboxes-inline';\n  } else {\n    return controlType;\n  }\n}\n\n/**\n * 'isInputRequired' function\n *\n * Checks a JSON Schema to see if an item is required\n *\n * @param  { any } schema - the schema to check\n * @param  { string } schemaPointer - the pointer to the item to check\n * @return { boolean } - true if the item is required, false if not\n */\nexport function isInputRequired(schema, schemaPointer) {\n  if (!isObject(schema)) {\n    console.error('isInputRequired error: Input schema must be an object.');\n    return false;\n  }\n  const listPointerArray = JsonPointer.parse(schemaPointer);\n  if (isArray(listPointerArray)) {\n    if (!listPointerArray.length) { return schema.required === true; }\n    const keyName = listPointerArray.pop();\n    const nextToLastKey = listPointerArray[listPointerArray.length - 1];\n    if (['properties', 'additionalProperties', 'patternProperties', 'items', 'additionalItems']\n      .includes(nextToLastKey)\n    ) {\n      listPointerArray.pop();\n    }\n    const parentSchema = JsonPointer.get(schema, listPointerArray) || {};\n    if (isArray(parentSchema.required)) {\n      return parentSchema.required.includes(keyName);\n    }\n    if (parentSchema.type === 'array') {\n      return hasOwn(parentSchema, 'minItems') &&\n        isNumber(keyName) &&\n        +parentSchema.minItems > +keyName;\n    }\n  }\n  return false;\n}\n\n/**\n * 'updateInputOptions' function\n *\n * @param  { any } layoutNode\n * @param  { any } schema\n * @param  { any } jsf\n * @return { void }\n */\nexport function updateInputOptions(layoutNode, schema, jsf) {\n  if (!isObject(layoutNode) || !isObject(layoutNode.options)) { return; }\n\n  // Set all option values in layoutNode.options\n  const newOptions: any = { };\n  const fixUiKeys = key => key.slice(0, 3).toLowerCase() === 'ui:' ? key.slice(3) : key;\n  mergeFilteredObject(newOptions, jsf.formOptions.defautWidgetOptions, [], fixUiKeys);\n  [ [ JsonPointer.get(schema, '/ui:widget/options'), [] ],\n    [ JsonPointer.get(schema, '/ui:widget'), [] ],\n    [ schema, [\n      'additionalProperties', 'additionalItems', 'properties', 'items',\n      'required', 'type', 'x-schema-form', '$ref'\n    ] ],\n    [ JsonPointer.get(schema, '/x-schema-form/options'), [] ],\n    [ JsonPointer.get(schema, '/x-schema-form'), ['items', 'options'] ],\n    [ layoutNode, [\n      '_id', '$ref', 'arrayItem', 'arrayItemType', 'dataPointer', 'dataType',\n      'items', 'key', 'name', 'options', 'recursiveReference', 'type', 'widget'\n    ] ],\n    [ layoutNode.options, [] ],\n  ].forEach(([ object, excludeKeys ]) =>\n    mergeFilteredObject(newOptions, object, excludeKeys, fixUiKeys)\n  );\n  if (!hasOwn(newOptions, 'titleMap')) {\n    let newTitleMap: any = null;\n    newTitleMap = getTitleMapFromOneOf(schema, newOptions.flatList);\n    if (newTitleMap) { newOptions.titleMap = newTitleMap; }\n    if (!hasOwn(newOptions, 'titleMap') && !hasOwn(newOptions, 'enum') && hasOwn(schema, 'items')) {\n      if (JsonPointer.has(schema, '/items/titleMap')) {\n        newOptions.titleMap = schema.items.titleMap;\n      } else if (JsonPointer.has(schema, '/items/enum')) {\n        newOptions.enum = schema.items.enum;\n        if (!hasOwn(newOptions, 'enumNames') && JsonPointer.has(schema, '/items/enumNames')) {\n          newOptions.enumNames = schema.items.enumNames;\n        }\n      } else if (JsonPointer.has(schema, '/items/oneOf')) {\n        newTitleMap = getTitleMapFromOneOf(schema.items, newOptions.flatList);\n        if (newTitleMap) { newOptions.titleMap = newTitleMap; }\n      }\n    }\n  }\n\n  // If schema type is integer, enforce by setting multipleOf = 1\n  if (schema.type === 'integer' && !hasValue(newOptions.multipleOf)) {\n    newOptions.multipleOf = 1;\n  }\n\n  // Copy any typeahead word lists to options.typeahead.source\n  if (JsonPointer.has(newOptions, '/autocomplete/source')) {\n    newOptions.typeahead = newOptions.autocomplete;\n  } else if (JsonPointer.has(newOptions, '/tagsinput/source')) {\n    newOptions.typeahead = newOptions.tagsinput;\n  } else if (JsonPointer.has(newOptions, '/tagsinput/typeahead/source')) {\n    newOptions.typeahead = newOptions.tagsinput.typeahead;\n  }\n\n  layoutNode.options = newOptions;\n}\n\n/**\n * 'getTitleMapFromOneOf' function\n *\n * @param  { schema } schema\n * @param  { boolean = null } flatList\n * @param  { boolean = false } validateOnly\n * @return { validators }\n */\nexport function getTitleMapFromOneOf(\n  schema: any = {}, flatList: boolean = null, validateOnly = false\n) {\n  let titleMap = null;\n  const oneOf = schema.oneOf || schema.anyOf || null;\n  if (isArray(oneOf) && oneOf.every(item => item.title)) {\n    if (oneOf.every(item => isArray(item.enum) && item.enum.length === 1)) {\n      if (validateOnly) { return true; }\n      titleMap = oneOf.map(item => ({ name: item.title, value: item.enum[0] }));\n    } else if (oneOf.every(item => item.const)) {\n      if (validateOnly) { return true; }\n      titleMap = oneOf.map(item => ({ name: item.title, value: item.const }));\n    }\n\n    // if flatList !== false and some items have colons, make grouped map\n    if (flatList !== false && (titleMap || [])\n      .filter(title => ((title || {}).name || '').indexOf(': ')).length > 1\n    ) {\n\n      // Split name on first colon to create grouped map (name -> group: name)\n      const newTitleMap = titleMap.map(title => {\n        const [group, name] = title.name.split(/: (.+)/);\n        return group && name ? { ...title, group, name } : title;\n      });\n\n      // If flatList === true or at least one group has multiple items, use grouped map\n      if (flatList === true || newTitleMap.some((title, index) => index &&\n        hasOwn(title, 'group') && title.group === newTitleMap[index - 1].group\n      )) {\n        titleMap = newTitleMap;\n      }\n    }\n  }\n  return validateOnly ? false : titleMap;\n}\n\n/**\n * 'getControlValidators' function\n *\n * @param { any } schema\n * @return { validators }\n */\nexport function getControlValidators(schema) {\n  if (!isObject(schema)) { return null; }\n  const validators: any = { };\n  if (hasOwn(schema, 'type')) {\n    switch (schema.type) {\n      case 'string':\n        forEach(['pattern', 'format', 'minLength', 'maxLength'], (prop) => {\n          if (hasOwn(schema, prop)) { validators[prop] = [schema[prop]]; }\n        });\n      break;\n      case 'number': case 'integer':\n        forEach(['Minimum', 'Maximum'], (ucLimit) => {\n          const eLimit = 'exclusive' + ucLimit;\n          const limit = ucLimit.toLowerCase();\n          if (hasOwn(schema, limit)) {\n            const exclusive = hasOwn(schema, eLimit) && schema[eLimit] === true;\n            validators[limit] = [schema[limit], exclusive];\n          }\n        });\n        forEach(['multipleOf', 'type'], (prop) => {\n          if (hasOwn(schema, prop)) { validators[prop] = [schema[prop]]; }\n        });\n      break;\n      case 'object':\n        forEach(['minProperties', 'maxProperties', 'dependencies'], (prop) => {\n          if (hasOwn(schema, prop)) { validators[prop] = [schema[prop]]; }\n        });\n      break;\n      case 'array':\n        forEach(['minItems', 'maxItems', 'uniqueItems'], (prop) => {\n          if (hasOwn(schema, prop)) { validators[prop] = [schema[prop]]; }\n        });\n      break;\n    }\n  }\n  if (hasOwn(schema, 'enum')) { validators.enum = [schema.enum]; }\n  return validators;\n}\n\n/**\n * 'resolveSchemaReferences' function\n *\n * Find all $ref links in schema and save links and referenced schemas in\n * schemaRefLibrary, schemaRecursiveRefMap, and dataRecursiveRefMap\n *\n * @param { any } schema\n * @param { any } schemaRefLibrary\n * @param { Map<string, string> } schemaRecursiveRefMap\n * @param { Map<string, string> } dataRecursiveRefMap\n * @param { Map<string, number> } arrayMap\n * @return { any }\n */\nexport function resolveSchemaReferences(\n  schema, schemaRefLibrary, schemaRecursiveRefMap, dataRecursiveRefMap, arrayMap\n) {\n  if (!isObject(schema)) {\n    console.error('resolveSchemaReferences error: schema must be an object.');\n    return;\n  }\n  const refLinks = new Set<string>();\n  const refMapSet = new Set<string>();\n  const refMap = new Map<string, string>();\n  const recursiveRefMap = new Map<string, string>();\n  const refLibrary: any = {};\n\n  // Search schema for all $ref links, and build full refLibrary\n  JsonPointer.forEachDeep(schema, (subSchema, subSchemaPointer) => {\n    if (hasOwn(subSchema, '$ref') && isString(subSchema['$ref'])) {\n      const refPointer = JsonPointer.compile(subSchema['$ref']);\n      refLinks.add(refPointer);\n      refMapSet.add(subSchemaPointer + '~~' + refPointer);\n      refMap.set(subSchemaPointer, refPointer);\n    }\n  });\n  refLinks.forEach(ref => refLibrary[ref] = getSubSchema(schema, ref));\n\n  // Follow all ref links and save in refMapSet,\n  // to find any multi-link recursive refernces\n  let checkRefLinks = true;\n  while (checkRefLinks) {\n    checkRefLinks = false;\n    Array.from(refMap).forEach(([fromRef1, toRef1]) => Array.from(refMap)\n      .filter(([fromRef2, toRef2]) =>\n        JsonPointer.isSubPointer(toRef1, fromRef2, true) &&\n        !JsonPointer.isSubPointer(toRef2, toRef1, true) &&\n        !refMapSet.has(fromRef1 + fromRef2.slice(toRef1.length) + '~~' + toRef2)\n      )\n      .forEach(([fromRef2, toRef2]) => {\n        refMapSet.add(fromRef1 + fromRef2.slice(toRef1.length) + '~~' + toRef2);\n        checkRefLinks = true;\n      })\n    );\n  }\n\n  // Build full recursiveRefMap\n  // First pass - save all internally recursive refs from refMapSet\n  Array.from(refMapSet)\n    .map(refLink => refLink.split('~~'))\n    .filter(([fromRef, toRef]) => JsonPointer.isSubPointer(toRef, fromRef))\n    .forEach(([fromRef, toRef]) => recursiveRefMap.set(fromRef, toRef));\n  // Second pass - create recursive versions of any other refs that link to recursive refs\n  Array.from(refMap)\n    .filter(([fromRef1, toRef1]) => Array.from(recursiveRefMap.keys())\n      .every(fromRef2 => !JsonPointer.isSubPointer(fromRef1, fromRef2, true))\n    )\n    .forEach(([fromRef1, toRef1]) => Array.from(recursiveRefMap)\n      .filter(([fromRef2, toRef2]) =>\n        !recursiveRefMap.has(fromRef1 + fromRef2.slice(toRef1.length)) &&\n        JsonPointer.isSubPointer(toRef1, fromRef2, true) &&\n        !JsonPointer.isSubPointer(toRef1, fromRef1, true)\n      )\n      .forEach(([fromRef2, toRef2]) => recursiveRefMap.set(\n        fromRef1 + fromRef2.slice(toRef1.length),\n        fromRef1 + toRef2.slice(toRef1.length)\n      ))\n    );\n\n  // Create compiled schema by replacing all non-recursive $ref links with\n  // thieir linked schemas and, where possible, combining schemas in allOf arrays.\n  let compiledSchema = { ...schema };\n  delete compiledSchema.definitions;\n  compiledSchema =\n    getSubSchema(compiledSchema, '', refLibrary, recursiveRefMap);\n\n  // Make sure all remaining schema $refs are recursive, and build final\n  // schemaRefLibrary, schemaRecursiveRefMap, dataRecursiveRefMap, & arrayMap\n  JsonPointer.forEachDeep(compiledSchema, (subSchema, subSchemaPointer) => {\n    if (isString(subSchema['$ref'])) {\n      let refPointer = JsonPointer.compile(subSchema['$ref']);\n      if (!JsonPointer.isSubPointer(refPointer, subSchemaPointer, true)) {\n        refPointer = removeRecursiveReferences(subSchemaPointer, recursiveRefMap);\n        JsonPointer.set(compiledSchema, subSchemaPointer, { $ref: `#${refPointer}` });\n      }\n      if (!hasOwn(schemaRefLibrary, 'refPointer')) {\n        schemaRefLibrary[refPointer] = !refPointer.length ? compiledSchema :\n          getSubSchema(compiledSchema, refPointer, schemaRefLibrary, recursiveRefMap);\n      }\n      if (!schemaRecursiveRefMap.has(subSchemaPointer)) {\n        schemaRecursiveRefMap.set(subSchemaPointer, refPointer);\n      }\n      const fromDataRef = JsonPointer.toDataPointer(subSchemaPointer, compiledSchema);\n      if (!dataRecursiveRefMap.has(fromDataRef)) {\n        const toDataRef = JsonPointer.toDataPointer(refPointer, compiledSchema);\n        dataRecursiveRefMap.set(fromDataRef, toDataRef);\n      }\n    }\n    if (subSchema.type === 'array' &&\n      (hasOwn(subSchema, 'items') || hasOwn(subSchema, 'additionalItems'))\n    ) {\n      const dataPointer = JsonPointer.toDataPointer(subSchemaPointer, compiledSchema);\n      if (!arrayMap.has(dataPointer)) {\n        const tupleItems = isArray(subSchema.items) ? subSchema.items.length : 0;\n        arrayMap.set(dataPointer, tupleItems);\n      }\n    }\n  }, true);\n  return compiledSchema;\n}\n\n/**\n * 'getSubSchema' function\n *\n * @param  { any } schema\n * @param  { Pointer } pointer\n * @param  { object } schemaRefLibrary\n * @param  { Map<string, string> } schemaRecursiveRefMap\n * @param  { string[] = [] } usedPointers\n * @return { any }\n */\nexport function getSubSchema(\n  schema, pointer, schemaRefLibrary = null,\n  schemaRecursiveRefMap: Map<string, string> = null, usedPointers: string[] = []\n) {\n  if (!schemaRefLibrary || !schemaRecursiveRefMap) {\n    return JsonPointer.getCopy(schema, pointer);\n  }\n  if (typeof pointer !== 'string') { pointer = JsonPointer.compile(pointer); }\n  usedPointers = [ ...usedPointers, pointer ];\n  let newSchema: any = null;\n  if (pointer === '') {\n    newSchema = _.cloneDeep(schema);\n  } else {\n    const shortPointer = removeRecursiveReferences(pointer, schemaRecursiveRefMap);\n    if (shortPointer !== pointer) { usedPointers = [ ...usedPointers, shortPointer ]; }\n    newSchema = JsonPointer.getFirstCopy([\n      [schemaRefLibrary, [shortPointer]],\n      [schema, pointer],\n      [schema, shortPointer]\n    ]);\n  }\n  return JsonPointer.forEachDeepCopy(newSchema, (subSchema, subPointer) => {\n    if (isObject(subSchema)) {\n\n      // Replace non-recursive $ref links with referenced schemas\n      if (isString(subSchema.$ref)) {\n        const refPointer = JsonPointer.compile(subSchema.$ref);\n        if (refPointer.length && usedPointers.every(ptr =>\n          !JsonPointer.isSubPointer(refPointer, ptr, true)\n        )) {\n          const refSchema = getSubSchema(\n            schema, refPointer, schemaRefLibrary, schemaRecursiveRefMap, usedPointers\n          );\n          if (Object.keys(subSchema).length === 1) {\n            return refSchema;\n          } else {\n            const extraKeys = { ...subSchema };\n            delete extraKeys.$ref;\n            return mergeSchemas(refSchema, extraKeys);\n          }\n        }\n      }\n\n      // TODO: Convert schemas with 'type' arrays to 'oneOf'\n\n      // Combine allOf subSchemas\n      if (isArray(subSchema.allOf)) { return combineAllOf(subSchema); }\n\n      // Fix incorrectly placed array object required lists\n      if (subSchema.type === 'array' && isArray(subSchema.required)) {\n        return fixRequiredArrayProperties(subSchema);\n      }\n    }\n    return subSchema;\n  }, true, <string>pointer);\n}\n\n/**\n * 'combineAllOf' function\n *\n * Attempt to convert an allOf schema object into\n * a non-allOf schema object with equivalent rules.\n *\n * @param  { any } schema - allOf schema object\n * @return { any } - converted schema object\n */\nexport function combineAllOf(schema) {\n  if (!isObject(schema) || !isArray(schema.allOf)) { return schema; }\n  let mergedSchema = mergeSchemas(...schema.allOf);\n  if (Object.keys(schema).length > 1) {\n    const extraKeys = { ...schema };\n    delete extraKeys.allOf;\n    mergedSchema = mergeSchemas(mergedSchema, extraKeys);\n  }\n  return mergedSchema;\n}\n\n/**\n * 'fixRequiredArrayProperties' function\n *\n * Fixes an incorrectly placed required list inside an array schema, by moving\n * it into items.properties or additionalItems.properties, where it belongs.\n *\n * @param  { any } schema - allOf schema object\n * @return { any } - converted schema object\n */\nexport function fixRequiredArrayProperties(schema) {\n  if (schema.type === 'array' && isArray(schema.required)) {\n    const itemsObject = hasOwn(schema.items, 'properties') ? 'items' :\n      hasOwn(schema.additionalItems, 'properties') ? 'additionalItems' : null;\n    if (itemsObject && !hasOwn(schema[itemsObject], 'required') && (\n      hasOwn(schema[itemsObject], 'additionalProperties') ||\n      schema.required.every(key => hasOwn(schema[itemsObject].properties, key))\n    )) {\n      schema = _.cloneDeep(schema);\n      schema[itemsObject].required = schema.required;\n      delete schema.required;\n    }\n  }\n  return schema;\n}\n",
    "import * as _ from 'lodash';\n\nimport {\n  isArray, isEmpty, isNumber, isObject, isString\n} from './validator.functions';\nimport { hasOwn, uniqueItems, commonItems } from './utility.functions';\nimport { JsonPointer, Pointer } from './jsonpointer.functions';\n\n/**\n * 'mergeSchemas' function\n *\n * Merges multiple JSON schemas into a single schema with combined rules.\n *\n * If able to logically merge properties from all schemas,\n * returns a single schema object containing all merged properties.\n *\n * Example: ({ a: b, max: 1 }, { c: d, max: 2 }) => { a: b, c: d, max: 1 }\n *\n * If unable to logically merge, returns an allOf schema object containing\n * an array of the original schemas;\n *\n * Example: ({ a: b }, { a: d }) => { allOf: [ { a: b }, { a: d } ] }\n *\n * @param  { any } schemas - one or more input schemas\n * @return { any } - merged schema\n */\nexport function mergeSchemas(...schemas) {\n  schemas = schemas.filter(schema => !isEmpty(schema));\n  if (schemas.some(schema => !isObject(schema))) { return null; }\n  const combinedSchema: any = {};\n  for (const schema of schemas) {\n    for (const key of Object.keys(schema)) {\n      const combinedValue = combinedSchema[key];\n      const schemaValue = schema[key];\n      if (!hasOwn(combinedSchema, key) || _.isEqual(combinedValue, schemaValue)) {\n        combinedSchema[key] = schemaValue;\n      } else {\n        switch (key) {\n          case 'allOf':\n            // Combine all items from both arrays\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.allOf = mergeSchemas(...combinedValue, ...schemaValue);\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'additionalItems': case 'additionalProperties':\n          case 'contains': case 'propertyNames':\n            // Merge schema objects\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              combinedSchema[key] = mergeSchemas(combinedValue, schemaValue);\n            // additionalProperties == false in any schema overrides all other values\n            } else if (\n              key === 'additionalProperties' &&\n              (combinedValue === false || schemaValue === false)\n            ) {\n              combinedSchema.combinedSchema = false;\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'anyOf': case 'oneOf': case 'enum':\n            // Keep only items that appear in both arrays\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema[key] = combinedValue.filter(item1 =>\n                schemaValue.findIndex(item2 => _.isEqual(item1, item2)) > -1\n              );\n              if (!combinedSchema[key].length) { return { allOf: [ ...schemas ] }; }\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'definitions':\n            // Combine keys from both objects\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = { ...combinedValue };\n              for (const subKey of Object.keys(schemaValue)) {\n                if (!hasOwn(combinedObject, subKey) ||\n                  _.isEqual(combinedObject[subKey], schemaValue[subKey])\n                ) {\n                  combinedObject[subKey] = schemaValue[subKey];\n                // Don't combine matching keys with different values\n                } else {\n                  return { allOf: [ ...schemas ] };\n                }\n              }\n              combinedSchema.definitions = combinedObject;\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'dependencies':\n            // Combine all keys from both objects\n            // and merge schemas on matching keys,\n            // converting from arrays to objects if necessary\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = { ...combinedValue };\n              for (const subKey of Object.keys(schemaValue)) {\n                if (!hasOwn(combinedObject, subKey) ||\n                  _.isEqual(combinedObject[subKey], schemaValue[subKey])\n                ) {\n                  combinedObject[subKey] = schemaValue[subKey];\n                // If both keys are arrays, include all items from both arrays,\n                // excluding duplicates\n                } else if (\n                  isArray(schemaValue[subKey]) && isArray(combinedObject[subKey])\n                ) {\n                  combinedObject[subKey] =\n                    uniqueItems(...combinedObject[subKey], ...schemaValue[subKey]);\n                // If either key is an object, merge the schemas\n                } else if (\n                  (isArray(schemaValue[subKey]) || isObject(schemaValue[subKey])) &&\n                  (isArray(combinedObject[subKey]) || isObject(combinedObject[subKey]))\n                ) {\n                  // If either key is an array, convert it to an object first\n                  const required = isArray(combinedSchema.required) ?\n                    combinedSchema.required : [];\n                  const combinedDependency = isArray(combinedObject[subKey]) ?\n                    { required: uniqueItems(...required, combinedObject[subKey]) } :\n                    combinedObject[subKey];\n                  const schemaDependency = isArray(schemaValue[subKey]) ?\n                    { required: uniqueItems(...required, schemaValue[subKey]) } :\n                    schemaValue[subKey];\n                  combinedObject[subKey] =\n                    mergeSchemas(combinedDependency, schemaDependency);\n                } else {\n                  return { allOf: [ ...schemas ] };\n                }\n              }\n              combinedSchema.dependencies = combinedObject;\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'items':\n            // If arrays, keep only items that appear in both arrays\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.items = combinedValue.filter(item1 =>\n                schemaValue.findIndex(item2 => _.isEqual(item1, item2)) > -1\n              );\n              if (!combinedSchema.items.length) { return { allOf: [ ...schemas ] }; }\n            // If both keys are objects, merge them\n            } else if (isObject(combinedValue) && isObject(schemaValue)) {\n              combinedSchema.items = mergeSchemas(combinedValue, schemaValue);\n            // If object + array, combine object with each array item\n            } else if (isArray(combinedValue) && isObject(schemaValue)) {\n              combinedSchema.items =\n                combinedValue.map(item => mergeSchemas(item, schemaValue));\n            } else if (isObject(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.items =\n                schemaValue.map(item => mergeSchemas(item, combinedValue));\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'multipleOf':\n            // TODO: Adjust to correctly handle decimal values\n            // If numbers, set to least common multiple\n            if (isNumber(combinedValue) && isNumber(schemaValue)) {\n              const gcd = (x, y) => !y ? x : gcd(y, x % y);\n              const lcm = (x, y) => (x * y) / gcd(x, y);\n              combinedSchema.multipleOf = lcm(combinedValue, schemaValue);\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'maximum': case 'exclusiveMaximum': case 'maxLength':\n          case 'maxItems': case 'maxProperties':\n            // If numbers, set to lowest value\n            if (isNumber(combinedValue) && isNumber(schemaValue)) {\n              combinedSchema[key] = Math.min(combinedValue, schemaValue);\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'minimum': case 'exclusiveMinimum': case 'minLength':\n          case 'minItems': case 'minProperties':\n            // If numbers, set to highest value\n            if (isNumber(combinedValue) && isNumber(schemaValue)) {\n              combinedSchema[key] = Math.max(combinedValue, schemaValue);\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'not':\n            // Combine not values into anyOf array\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const notAnyOf = [combinedValue, schemaValue]\n                .reduce((notAnyOfArray, notSchema) =>\n                  isArray(notSchema.anyOf) &&\n                  Object.keys(notSchema).length === 1 ?\n                    [ ...notAnyOfArray, ...notSchema.anyOf ] :\n                    [ ...notAnyOfArray, notSchema ]\n                , []);\n              // TODO: Remove duplicate items from array\n              combinedSchema.not = { anyOf: notAnyOf };\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'patternProperties':\n            // Combine all keys from both objects\n            // and merge schemas on matching keys\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = { ...combinedValue };\n              for (const subKey of Object.keys(schemaValue)) {\n                if (!hasOwn(combinedObject, subKey) ||\n                  _.isEqual(combinedObject[subKey], schemaValue[subKey])\n                ) {\n                  combinedObject[subKey] = schemaValue[subKey];\n                // If both keys are objects, merge them\n                } else if (\n                  isObject(schemaValue[subKey]) && isObject(combinedObject[subKey])\n                ) {\n                  combinedObject[subKey] =\n                    mergeSchemas(combinedObject[subKey], schemaValue[subKey]);\n                } else {\n                  return { allOf: [ ...schemas ] };\n                }\n              }\n              combinedSchema.patternProperties = combinedObject;\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'properties':\n            // Combine all keys from both objects\n            // unless additionalProperties === false\n            // and merge schemas on matching keys\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = { ...combinedValue };\n              // If new schema has additionalProperties,\n              // merge or remove non-matching property keys in combined schema\n              if (hasOwn(schemaValue, 'additionalProperties')) {\n                Object.keys(combinedValue)\n                  .filter(combinedKey => !Object.keys(schemaValue).includes(combinedKey))\n                  .forEach(nonMatchingKey => {\n                    if (schemaValue.additionalProperties === false) {\n                      delete combinedObject[nonMatchingKey];\n                    } else if (isObject(schemaValue.additionalProperties)) {\n                      combinedObject[nonMatchingKey] = mergeSchemas(\n                        combinedObject[nonMatchingKey],\n                        schemaValue.additionalProperties\n                      );\n                    }\n                  });\n              }\n              for (const subKey of Object.keys(schemaValue)) {\n                if (_.isEqual(combinedObject[subKey], schemaValue[subKey]) || (\n                  !hasOwn(combinedObject, subKey) &&\n                  !hasOwn(combinedObject, 'additionalProperties')\n                )) {\n                  combinedObject[subKey] = schemaValue[subKey];\n                // If combined schema has additionalProperties,\n                // merge or ignore non-matching property keys in new schema\n                } else if (\n                  !hasOwn(combinedObject, subKey) &&\n                  hasOwn(combinedObject, 'additionalProperties')\n                ) {\n                  // If combinedObject.additionalProperties === false,\n                  // do nothing (don't set key)\n                  // If additionalProperties is object, merge with new key\n                  if (isObject(combinedObject.additionalProperties)) {\n                    combinedObject[subKey] = mergeSchemas(\n                      combinedObject.additionalProperties, schemaValue[subKey]\n                    );\n                  }\n                // If both keys are objects, merge them\n                } else if (\n                  isObject(schemaValue[subKey]) &&\n                  isObject(combinedObject[subKey])\n                ) {\n                  combinedObject[subKey] =\n                    mergeSchemas(combinedObject[subKey], schemaValue[subKey]);\n                } else {\n                  return { allOf: [ ...schemas ] };\n                }\n              }\n              combinedSchema.properties = combinedObject;\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'required':\n            // If arrays, include all items from both arrays, excluding duplicates\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.required = uniqueItems(...combinedValue, ...schemaValue);\n            // If booleans, aet true if either true\n            } else if (\n              typeof schemaValue === 'boolean' &&\n              typeof combinedValue === 'boolean'\n            ) {\n              combinedSchema.required = !!combinedValue || !!schemaValue;\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case '$schema': case '$id': case 'id':\n            // Don't combine these keys\n          break;\n          case 'title': case 'description':\n            // Return the last value, overwriting any previous one\n            // These properties are not used for validation, so conflicts don't matter\n            combinedSchema[key] = schemaValue;\n          break;\n          case 'type':\n            if (\n              (isArray(schemaValue) || isString(schemaValue)) &&\n              (isArray(combinedValue) || isString(combinedValue))\n            ) {\n              const combinedTypes = commonItems(combinedValue, schemaValue);\n              if (!combinedTypes.length) { return { allOf: [ ...schemas ] }; }\n              combinedSchema.type = combinedTypes.length > 1 ? combinedTypes : combinedTypes[0];\n            } else {\n              return { allOf: [ ...schemas ] };\n            }\n          break;\n          case 'uniqueItems':\n            // Set true if either true\n            combinedSchema.uniqueItems = !!combinedValue || !!schemaValue;\n          break;\n          default:\n            return { allOf: [ ...schemas ] };\n        }\n      }\n    }\n  }\n  return combinedSchema;\n}\n",
    "import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { Observable } from 'rxjs-compat/Observable';\nimport { forkJoin } from 'rxjs-compat/observable/forkJoin';\nimport { map } from 'rxjs-compat/operator/map';\n\nimport * as _ from 'lodash';\n\nimport {\n  _executeValidators, _executeAsyncValidators, _mergeObjects, _mergeErrors,\n  isEmpty, isDefined, hasValue, isString, isNumber, isBoolean, isArray,\n  getType, isType, toJavaScriptType, toObservable, xor, SchemaPrimitiveType,\n  PlainObject, IValidatorFn, AsyncIValidatorFn\n} from './validator.functions';\nimport { forEachCopy } from './utility.functions';\nimport { jsonSchemaFormatTests, JsonSchemaFormatNames } from './format-regex.constants';\n\n/**\n * 'JsonValidators' class\n *\n * Provides an extended set of validators to be used by form controls,\n * compatible with standard JSON Schema validation options.\n * http://json-schema.org/latest/json-schema-validation.html\n *\n * Note: This library is designed as a drop-in replacement for the Angular\n * Validators library, and except for one small breaking change to the 'pattern'\n * validator (described below) it can even be imported as a substitute, like so:\n *\n *   import { JsonValidators as Validators } from 'json-validators';\n *\n * and it should work with existing code as a complete replacement.\n *\n * The one exception is the 'pattern' validator, which has been changed to\n * matche partial values by default (the standard 'pattern' validator wrapped\n * all patterns in '^' and '$', forcing them to always match an entire value).\n * However, the old behavior can be restored by simply adding '^' and '$'\n * around your patterns, or by passing an optional second parameter of TRUE.\n * This change is to make the 'pattern' validator match the behavior of a\n * JSON Schema pattern, which allows partial matches, rather than the behavior\n * of an HTML input control pattern, which does not.\n *\n * This library replaces Angular's validators and combination functions\n * with the following validators and transformation functions:\n *\n * Validators:\n *   For all formControls:     required (*), type, enum, const\n *   For text formControls:    minLength (*), maxLength (*), pattern (*), format\n *   For numeric formControls: maximum, exclusiveMaximum,\n *                             minimum, exclusiveMinimum, multipleOf\n *   For formGroup objects:    minProperties, maxProperties, dependencies\n *   For formArray arrays:     minItems, maxItems, uniqueItems, contains\n *   Not used by JSON Schema:  min (*), max (*), requiredTrue (*), email (*)\n * (Validators originally included with Angular are maked with (*).)\n *\n * NOTE / TODO: The dependencies validator is not complete.\n * NOTE / TODO: The contains validator is not complete.\n *\n * Validators not used by JSON Schema (but included for compatibility)\n * and their JSON Schema equivalents:\n *\n *   Angular validator | JSON Schema equivalent\n *   ------------------|-----------------------\n *     min(number)     |   minimum(number)\n *     max(number)     |   maximum(number)\n *     requiredTrue()  |   const(true)\n *     email()         |   format('email')\n *\n * Validator transformation functions:\n *   composeAnyOf, composeOneOf, composeAllOf, composeNot\n * (Angular's original combination funciton, 'compose', is also included for\n * backward compatibility, though it is functionally equivalent to composeAllOf,\n * asside from its more generic error message.)\n *\n * All validators have also been extended to accept an optional second argument\n * which, if passed a TRUE value, causes the validator to perform the opposite\n * of its original finction. (This is used internally to enable 'not' and\n * 'composeOneOf' to function and return useful error messages.)\n *\n * The 'required' validator has also been overloaded so that if called with\n * a boolean parameter (or no parameters) it returns the original validator\n * function (rather than executing it). However, if it is called with an\n * AbstractControl parameter (as was previously required), it behaves\n * exactly as before.\n *\n * This enables all validators (including 'required') to be constructed in\n * exactly the same way, so they can be automatically applied using the\n * equivalent key names and values taken directly from a JSON Schema.\n *\n * This source code is partially derived from Angular,\n * which is Copyright (c) 2014-2017 Google, Inc.\n * Use of this source code is therefore governed by the same MIT-style license\n * that can be found in the LICENSE file at https://angular.io/license\n *\n * Original Angular Validators:\n * https://github.com/angular/angular/blob/master/packages/forms/src/validators.ts\n */\nexport class JsonValidators {\n\n  /**\n   * Validator functions:\n   *\n   * For all formControls:     required, type, enum, const\n   * For text formControls:    minLength, maxLength, pattern, format\n   * For numeric formControls: maximum, exclusiveMaximum,\n   *                           minimum, exclusiveMinimum, multipleOf\n   * For formGroup objects:    minProperties, maxProperties, dependencies\n   * For formArray arrays:     minItems, maxItems, uniqueItems, contains\n   *\n   * TODO: finish dependencies validator\n   */\n\n  /**\n   * 'required' validator\n   *\n   * This validator is overloaded, compared to the default required validator.\n   * If called with no parameters, or TRUE, this validator returns the\n   * 'required' validator function (rather than executing it). This matches\n   * the behavior of all other validators in this library.\n   *\n   * If this validator is called with an AbstractControl parameter\n   * (as was previously required) it behaves the same as Angular's default\n   * required validator, and returns an error if the control is empty.\n   *\n   * Old behavior: (if input type = AbstractControl)\n   * @param {AbstractControl} control - required control\n   * @return {{[key: string]: boolean}} - returns error message if no input\n   *\n   * New behavior: (if no input, or input type = boolean)\n   * @param {boolean = true} required? - true to validate, false to disable\n   * @return {IValidatorFn} - returns the 'required' validator function itself\n   */\n  static required(input: AbstractControl): ValidationErrors|null;\n  static required(input?: boolean): IValidatorFn;\n\n  static required(input?: AbstractControl|boolean): ValidationErrors|null|IValidatorFn {\n    if (input === undefined) { input = true; }\n    switch (input) {\n      case true: // Return required function (do not execute it yet)\n        return (control: AbstractControl, invert = false): ValidationErrors|null => {\n          if (invert) { return null; } // if not required, always return valid\n          return hasValue(control.value) ? null : { 'required': true };\n        };\n      case false: // Do nothing (if field is not required, it is always valid)\n        return JsonValidators.nullValidator;\n      default: // Execute required function\n        return hasValue((<AbstractControl>input).value) ? null : { 'required': true };\n    }\n  }\n\n  /**\n   * 'type' validator\n   *\n   * Requires a control to only accept values of a specified type,\n   * or one of an array of types.\n   *\n   * Note: SchemaPrimitiveType = 'string'|'number'|'integer'|'boolean'|'null'\n   *\n   * @param {SchemaPrimitiveType|SchemaPrimitiveType[]} type - type(s) to accept\n   * @return {IValidatorFn}\n   */\n  static type(requiredType: SchemaPrimitiveType|SchemaPrimitiveType[]): IValidatorFn {\n    if (!hasValue(requiredType)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue: any = control.value;\n      const isValid = isArray(requiredType) ?\n        (<SchemaPrimitiveType[]>requiredType).some(type => isType(currentValue, type)) :\n        isType(currentValue, <SchemaPrimitiveType>requiredType);\n      return xor(isValid, invert) ?\n        null : { 'type': { requiredType, currentValue } };\n    };\n  }\n\n  /**\n   * 'enum' validator\n   *\n   * Requires a control to have a value from an enumerated list of values.\n   *\n   * Converts types as needed to allow string inputs to still correctly\n   * match number, boolean, and null enum values.\n   *\n   * @param {any[]} allowedValues - array of acceptable values\n   * @return {IValidatorFn}\n   */\n  static enum(allowedValues: any[]): IValidatorFn {\n    if (!isArray(allowedValues)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue: any = control.value;\n      const isEqual = (enumValue, inputValue) =>\n        enumValue === inputValue ||\n        (isNumber(enumValue) && +inputValue === +enumValue) ||\n        (isBoolean(enumValue, 'strict') &&\n          toJavaScriptType(inputValue, 'boolean') === enumValue) ||\n        (enumValue === null && !hasValue(inputValue)) ||\n        _.isEqual(enumValue, inputValue);\n      const isValid = isArray(currentValue) ?\n        currentValue.every(inputValue => allowedValues.some(enumValue =>\n          isEqual(enumValue, inputValue)\n        )) :\n        allowedValues.some(enumValue => isEqual(enumValue, currentValue));\n      return xor(isValid, invert) ?\n        null : { 'enum': { allowedValues, currentValue } };\n    };\n  }\n\n  /**\n   * 'const' validator\n   *\n   * Requires a control to have a specific value.\n   *\n   * Converts types as needed to allow string inputs to still correctly\n   * match number, boolean, and null values.\n   *\n   * TODO: modify to work with objects\n   *\n   * @param {any[]} requiredValue - required value\n   * @return {IValidatorFn}\n   */\n  static const(requiredValue: any): IValidatorFn {\n    if (!hasValue(requiredValue)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue: any = control.value;\n      const isEqual = (constValue, inputValue) =>\n        constValue === inputValue ||\n        isNumber(constValue) && +inputValue === +constValue ||\n        isBoolean(constValue, 'strict') &&\n          toJavaScriptType(inputValue, 'boolean') === constValue ||\n        constValue === null && !hasValue(inputValue);\n      const isValid = isEqual(requiredValue, currentValue);\n      return xor(isValid, invert) ?\n        null : { 'const': { requiredValue, currentValue } };\n    };\n  }\n\n  /**\n   * 'minLength' validator\n   *\n   * Requires a control's text value to be greater than a specified length.\n   *\n   * @param {number} minimumLength - minimum allowed string length\n   * @param {boolean = false} invert - instead return error object only if valid\n   * @return {IValidatorFn}\n   */\n  static minLength(minimumLength: number): IValidatorFn {\n    if (!hasValue(minimumLength)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentLength = isString(control.value) ? control.value.length : 0;\n      const isValid = currentLength >= minimumLength;\n      return xor(isValid, invert) ?\n        null : { 'minLength': { minimumLength, currentLength } };\n    };\n  }\n\n  /**\n   * 'maxLength' validator\n   *\n   * Requires a control's text value to be less than a specified length.\n   *\n   * @param {number} maximumLength - maximum allowed string length\n   * @param {boolean = false} invert - instead return error object only if valid\n   * @return {IValidatorFn}\n   */\n  static maxLength(maximumLength: number): IValidatorFn {\n    if (!hasValue(maximumLength)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      const currentLength = isString(control.value) ? control.value.length : 0;\n      const isValid = currentLength <= maximumLength;\n      return xor(isValid, invert) ?\n        null : { 'maxLength': { maximumLength, currentLength } };\n    };\n  }\n\n  /**\n   * 'pattern' validator\n   *\n   * Note: NOT the same as Angular's default pattern validator.\n   *\n   * Requires a control's value to match a specified regular expression pattern.\n   *\n   * This validator changes the behavior of default pattern validator\n   * by replacing RegExp(`^${pattern}$`) with RegExp(`${pattern}`),\n   * which allows for partial matches.\n   *\n   * To return to the default funcitonality, and match the entire string,\n   * pass TRUE as the optional second parameter.\n   *\n   * @param {string} pattern - regular expression pattern\n   * @param {boolean = false} wholeString - match whole value string?\n   * @return {IValidatorFn}\n   */\n  static pattern(pattern: string|RegExp, wholeString = false): IValidatorFn {\n    if (!hasValue(pattern)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      let regex: RegExp;\n      let requiredPattern: string;\n      if (typeof pattern === 'string') {\n        requiredPattern = (wholeString) ? `^${pattern}$` : pattern;\n        regex = new RegExp(requiredPattern);\n      } else {\n        requiredPattern = pattern.toString();\n        regex = pattern;\n      }\n      const currentValue: string = control.value;\n      const isValid = isString(currentValue) ? regex.test(currentValue) : false;\n      return xor(isValid, invert) ?\n        null : { 'pattern': { requiredPattern, currentValue } };\n    };\n  }\n\n  /**\n   * 'format' validator\n   *\n   * Requires a control to have a value of a certain format.\n   *\n   * This validator currently checks the following formsts:\n   *   date, time, date-time, email, hostname, ipv4, ipv6,\n   *   uri, uri-reference, uri-template, url, uuid, color,\n   *   json-pointer, relative-json-pointer, regex\n   *\n   * Fast format regular expressions copied from AJV:\n   * https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js\n   *\n   * @param {JsonSchemaFormatNames} requiredFormat - format to check\n   * @return {IValidatorFn}\n   */\n  static format(requiredFormat: JsonSchemaFormatNames): IValidatorFn {\n    if (!hasValue(requiredFormat)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      let isValid: boolean;\n      const currentValue: string|Date = control.value;\n      if (isString(currentValue)) {\n        const formatTest: Function|RegExp = jsonSchemaFormatTests[requiredFormat];\n        if (typeof formatTest === 'object') {\n          isValid = (<RegExp>formatTest).test(<string>currentValue);\n        } else if (typeof formatTest === 'function') {\n          isValid = (<Function>formatTest)(<string>currentValue);\n        } else {\n          console.error(`format validator error: \"${requiredFormat}\" is not a recognized format.`);\n          isValid = true;\n        }\n      } else {\n        // Allow JavaScript Date objects\n        isValid = ['date', 'time', 'date-time'].includes(requiredFormat) &&\n          Object.prototype.toString.call(currentValue) === '[object Date]';\n      }\n      return xor(isValid, invert) ?\n        null : { 'format': { requiredFormat, currentValue } };\n    };\n  }\n\n  /**\n   * 'minimum' validator\n   *\n   * Requires a control's numeric value to be greater than or equal to\n   * a minimum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a minimum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param {number} minimum - minimum allowed value\n   * @return {IValidatorFn}\n   */\n  static minimum(minimumValue: number): IValidatorFn {\n    if (!hasValue(minimumValue)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue = control.value;\n      const isValid = !isNumber(currentValue) || currentValue >= minimumValue;\n      return xor(isValid, invert) ?\n        null : { 'minimum': { minimumValue, currentValue } };\n    };\n  }\n\n  /**\n   * 'exclusiveMinimum' validator\n   *\n   * Requires a control's numeric value to be less than a maximum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a maximum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param {number} exclusiveMinimumValue - maximum allowed value\n   * @return {IValidatorFn}\n   */\n  static exclusiveMinimum(exclusiveMinimumValue: number): IValidatorFn {\n    if (!hasValue(exclusiveMinimumValue)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue = control.value;\n      const isValid = !isNumber(currentValue) || +currentValue < exclusiveMinimumValue;\n      return xor(isValid, invert) ?\n        null : { 'exclusiveMinimum': { exclusiveMinimumValue, currentValue } };\n    };\n  }\n\n  /**\n   * 'maximum' validator\n   *\n   * Requires a control's numeric value to be less than or equal to\n   * a maximum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a maximum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param {number} maximumValue - maximum allowed value\n   * @return {IValidatorFn}\n   */\n  static maximum(maximumValue: number): IValidatorFn {\n    if (!hasValue(maximumValue)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue = control.value;\n      const isValid = !isNumber(currentValue) || +currentValue <= maximumValue;\n      return xor(isValid, invert) ?\n        null : { 'maximum': { maximumValue, currentValue } };\n    };\n  }\n\n  /**\n   * 'exclusiveMaximum' validator\n   *\n   * Requires a control's numeric value to be less than a maximum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a maximum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param {number} exclusiveMaximumValue - maximum allowed value\n   * @return {IValidatorFn}\n   */\n  static exclusiveMaximum(exclusiveMaximumValue: number): IValidatorFn {\n    if (!hasValue(exclusiveMaximumValue)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue = control.value;\n      const isValid = !isNumber(currentValue) || +currentValue < exclusiveMaximumValue;\n      return xor(isValid, invert) ?\n        null : { 'exclusiveMaximum': { exclusiveMaximumValue, currentValue } };\n    };\n  }\n\n  /**\n   * 'multipleOf' validator\n   *\n   * Requires a control to have a numeric value that is a multiple\n   * of a specified number.\n   *\n   * @param {number} multipleOfValue - number value must be a multiple of\n   * @return {IValidatorFn}\n   */\n  static multipleOf(multipleOfValue: number): IValidatorFn {\n    if (!hasValue(multipleOfValue)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentValue = control.value;\n      const isValid = isNumber(currentValue) &&\n        currentValue % multipleOfValue === 0;\n      return xor(isValid, invert) ?\n        null : { 'multipleOf': { multipleOfValue, currentValue } };\n    };\n  }\n\n  /**\n   * 'minProperties' validator\n   *\n   * Requires a form group to have a minimum number of properties (i.e. have\n   * values entered in a minimum number of controls within the group).\n   *\n   * @param {number} minimumProperties - minimum number of properties allowed\n   * @return {IValidatorFn}\n   */\n  static minProperties(minimumProperties: number): IValidatorFn {\n    if (!hasValue(minimumProperties)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentProperties = Object.keys(control.value).length || 0;\n      const isValid = currentProperties >= minimumProperties;\n      return xor(isValid, invert) ?\n        null : { 'minProperties': { minimumProperties, currentProperties } };\n    };\n  }\n\n  /**\n   * 'maxProperties' validator\n   *\n   * Requires a form group to have a maximum number of properties (i.e. have\n   * values entered in a maximum number of controls within the group).\n   *\n   * Note: Has no effect if the form group does not contain more than the\n   * maximum number of controls.\n   *\n   * @param {number} maximumProperties - maximum number of properties allowed\n   * @return {IValidatorFn}\n   */\n  static maxProperties(maximumProperties: number): IValidatorFn {\n    if (!hasValue(maximumProperties)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      const currentProperties = Object.keys(control.value).length || 0;\n      const isValid = currentProperties <= maximumProperties;\n      return xor(isValid, invert) ?\n        null : { 'maxProperties': { maximumProperties, currentProperties } };\n    };\n  }\n\n  /**\n   * 'dependencies' validator\n   *\n   * Requires the controls in a form group to meet additional validation\n   * criteria, depending on the values of other controls in the group.\n   *\n   * Examples:\n   * https://spacetelescope.github.io/understanding-json-schema/reference/object.html#dependencies\n   *\n   * @param {any} dependencies - required dependencies\n   * @return {IValidatorFn}\n   */\n  static dependencies(dependencies: any): IValidatorFn {\n    if (getType(dependencies) !== 'object' || isEmpty(dependencies)) {\n      return JsonValidators.nullValidator;\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const allErrors = _mergeObjects(\n        forEachCopy(dependencies, (value, requiringField) => {\n          if (!hasValue(control.value[requiringField])) { return null; }\n          let requiringFieldErrors: ValidationErrors = { };\n          let requiredFields: string[];\n          let properties: ValidationErrors = { };\n          if (getType(dependencies[requiringField]) === 'array') {\n            requiredFields = dependencies[requiringField];\n          } else if (getType(dependencies[requiringField]) === 'object') {\n            requiredFields = dependencies[requiringField]['required'] || [];\n            properties = dependencies[requiringField]['properties'] || { };\n          }\n\n          // Validate property dependencies\n          for (const requiredField of requiredFields) {\n            if (xor(!hasValue(control.value[requiredField]), invert)) {\n              requiringFieldErrors[requiredField] = { 'required': true };\n            }\n          }\n\n          // Validate schema dependencies\n          requiringFieldErrors = _mergeObjects(requiringFieldErrors,\n            forEachCopy(properties, (requirements, requiredField) => {\n              const requiredFieldErrors = _mergeObjects(\n                forEachCopy(requirements, (requirement, parameter) => {\n                  let validator: IValidatorFn = null;\n                  if (requirement === 'maximum' || requirement === 'minimum') {\n                    const exclusive = !!requirements['exclusiveM' + requirement.slice(1)];\n                    validator = JsonValidators[requirement](parameter, exclusive);\n                  } else if (typeof JsonValidators[requirement] === 'function') {\n                    validator = JsonValidators[requirement](parameter);\n                  }\n                  return !isDefined(validator) ?\n                    null : validator(control.value[requiredField]);\n                })\n              );\n              return isEmpty(requiredFieldErrors) ?\n                null : { [requiredField]: requiredFieldErrors };\n            })\n          );\n          return isEmpty(requiringFieldErrors) ?\n            null : { [requiringField]: requiringFieldErrors };\n        })\n      );\n      return isEmpty(allErrors) ? null : allErrors;\n    };\n  }\n\n  /**\n   * 'minItems' validator\n   *\n   * Requires a form array to have a minimum number of values.\n   *\n   * @param {number} minimumItems - minimum number of items allowed\n   * @return {IValidatorFn}\n   */\n  static minItems(minimumItems: number): IValidatorFn {\n    if (!hasValue(minimumItems)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const currentItems = isArray(control.value) ? control.value.length : 0;\n      const isValid = currentItems >= minimumItems;\n      return xor(isValid, invert) ?\n        null : { 'minItems': { minimumItems, currentItems } };\n    };\n  }\n\n  /**\n   * 'maxItems' validator\n   *\n   * Requires a form array to have a maximum number of values.\n   *\n   * @param {number} maximumItems - maximum number of items allowed\n   * @return {IValidatorFn}\n   */\n  static maxItems(maximumItems: number): IValidatorFn {\n    if (!hasValue(maximumItems)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      const currentItems = isArray(control.value) ? control.value.length : 0;\n      const isValid = currentItems <= maximumItems;\n      return xor(isValid, invert) ?\n        null : { 'maxItems': { maximumItems, currentItems } };\n    };\n  }\n\n  /**\n   * 'uniqueItems' validator\n   *\n   * Requires values in a form array to be unique.\n   *\n   * @param {boolean = true} unique? - true to validate, false to disable\n   * @return {IValidatorFn}\n   */\n  static uniqueItems(unique = true): IValidatorFn {\n    if (!unique) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const sorted: any[] = control.value.slice().sort();\n      const duplicateItems = [];\n      for (let i = 1; i < sorted.length; i++) {\n        if (sorted[i - 1] === sorted[i] && duplicateItems.includes(sorted[i])) {\n          duplicateItems.push(sorted[i]);\n        }\n      }\n      const isValid = !duplicateItems.length;\n      return xor(isValid, invert) ?\n        null : { 'uniqueItems': { duplicateItems } };\n    };\n  }\n\n  /**\n   * 'contains' validator\n   *\n   * TODO: Complete this validator\n   *\n   * Requires values in a form array to be unique.\n   *\n   * @param {boolean = true} unique? - true to validate, false to disable\n   * @return {IValidatorFn}\n   */\n  static contains(requiredItem = true): IValidatorFn {\n    if (!requiredItem) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value) || !isArray(control.value)) { return null; }\n      const currentItems = control.value;\n      // const isValid = currentItems.some(item =>\n      //\n      // );\n      const isValid = true;\n      return xor(isValid, invert) ?\n        null : { 'contains': { requiredItem, currentItems } };\n    };\n  }\n\n  /**\n   * No-op validator. Included for backward compatibility.\n   */\n  static nullValidator(control: AbstractControl): ValidationErrors|null {\n    return null;\n  }\n\n  /**\n   * Validator transformation functions:\n   * composeAnyOf, composeOneOf, composeAllOf, composeNot,\n   * compose, composeAsync\n   *\n   * TODO: Add composeAnyOfAsync, composeOneOfAsync,\n   *           composeAllOfAsync, composeNotAsync\n   */\n\n  /**\n   * 'composeAnyOf' validator combination function\n   *\n   * Accepts an array of validators and returns a single validator that\n   * evaluates to valid if any one or more of the submitted validators are\n   * valid. If every validator is invalid, it returns combined errors from\n   * all validators.\n   *\n   * @param {IValidatorFn[]} validators - array of validators to combine\n   * @return {IValidatorFn} - single combined validator function\n   */\n  static composeAnyOf(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) { return null; }\n    const presentValidators = validators.filter(isDefined);\n    if (presentValidators.length === 0) { return null; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      const arrayOfErrors =\n        _executeValidators(control, presentValidators, invert).filter(isDefined);\n      const isValid = validators.length > arrayOfErrors.length;\n      return xor(isValid, invert) ?\n        null : _mergeObjects(...arrayOfErrors, { 'anyOf': !invert });\n    };\n  }\n\n  /**\n   * 'composeOneOf' validator combination function\n   *\n   * Accepts an array of validators and returns a single validator that\n   * evaluates to valid only if exactly one of the submitted validators\n   * is valid. Otherwise returns combined information from all validators,\n   * both valid and invalid.\n   *\n   * @param {IValidatorFn[]} validators - array of validators to combine\n   * @return {IValidatorFn} - single combined validator function\n   */\n  static composeOneOf(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) { return null; }\n    const presentValidators = validators.filter(isDefined);\n    if (presentValidators.length === 0) { return null; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      const arrayOfErrors =\n        _executeValidators(control, presentValidators);\n      const validControls =\n        validators.length - arrayOfErrors.filter(isDefined).length;\n      const isValid = validControls === 1;\n      if (xor(isValid, invert)) { return null; }\n      const arrayOfValids =\n        _executeValidators(control, presentValidators, invert);\n      return _mergeObjects(...arrayOfErrors, ...arrayOfValids, { 'oneOf': !invert });\n    };\n  }\n\n  /**\n   * 'composeAllOf' validator combination function\n   *\n   * Accepts an array of validators and returns a single validator that\n   * evaluates to valid only if all the submitted validators are individually\n   * valid. Otherwise it returns combined errors from all invalid validators.\n   *\n   * @param {IValidatorFn[]} validators - array of validators to combine\n   * @return {IValidatorFn} - single combined validator function\n   */\n  static composeAllOf(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) { return null; }\n    const presentValidators = validators.filter(isDefined);\n    if (presentValidators.length === 0) { return null; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      const combinedErrors = _mergeErrors(\n        _executeValidators(control, presentValidators, invert)\n      );\n      const isValid = combinedErrors === null;\n      return (xor(isValid, invert)) ?\n        null : _mergeObjects(combinedErrors, { 'allOf': !invert });\n    };\n  }\n\n  /**\n   * 'composeNot' validator inversion function\n   *\n   * Accepts a single validator function and inverts its result.\n   * Returns valid if the submitted validator is invalid, and\n   * returns invalid if the submitted validator is valid.\n   * (Note: this function can itself be inverted\n   *   - e.g. composeNot(composeNot(validator)) -\n   *   but this can be confusing and is therefore not recommended.)\n   *\n   * @param {IValidatorFn[]} validators - validator(s) to invert\n   * @return {IValidatorFn} - new validator function that returns opposite result\n   */\n  static composeNot(validator: IValidatorFn): IValidatorFn {\n    if (!validator) { return null; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null => {\n      if (isEmpty(control.value)) { return null; }\n      const error = validator(control, !invert);\n      const isValid = error === null;\n      return (xor(isValid, invert)) ?\n        null : _mergeObjects(error, { 'not': !invert });\n    };\n  }\n\n  /**\n   * 'compose' validator combination function\n   *\n   * @param {IValidatorFn[]} validators - array of validators to combine\n   * @return {IValidatorFn} - single combined validator function\n   */\n  static compose(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) { return null; }\n    const presentValidators = validators.filter(isDefined);\n    if (presentValidators.length === 0) { return null; }\n    return (control: AbstractControl, invert = false): ValidationErrors|null =>\n      _mergeErrors(_executeValidators(control, presentValidators, invert));\n  }\n\n  /**\n   * 'composeAsync' async validator combination function\n   *\n   * @param {AsyncIValidatorFn[]} async validators - array of async validators\n   * @return {AsyncIValidatorFn} - single combined async validator function\n   */\n  static composeAsync(validators: AsyncIValidatorFn[]): AsyncIValidatorFn {\n    if (!validators) { return null; }\n    const presentValidators = validators.filter(isDefined);\n    if (presentValidators.length === 0) { return null; }\n    return (control: AbstractControl) => {\n      const observables =\n        _executeAsyncValidators(control, presentValidators).map(toObservable);\n      return map.call(forkJoin(observables), _mergeErrors);\n    };\n  }\n\n  // Additional angular validators (not used by Angualr JSON Schema Form)\n  // From https://github.com/angular/angular/blob/master/packages/forms/src/validators.ts\n\n  /**\n   * Validator that requires controls to have a value greater than a number.\n   */\n  static min(min: number): ValidatorFn {\n    if (!hasValue(min)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl): ValidationErrors|null => {\n      // don't validate empty values to allow optional controls\n      if (isEmpty(control.value) || isEmpty(min)) { return null; }\n      const value = parseFloat(control.value);\n      const actual = control.value;\n      // Controls with NaN values after parsing should be treated as not having a\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n      return isNaN(value) || value >= min ? null : { 'min': { min, actual } };\n    };\n  }\n\n  /**\n   * Validator that requires controls to have a value less than a number.\n   */\n  static max(max: number): ValidatorFn {\n    if (!hasValue(max)) { return JsonValidators.nullValidator; }\n    return (control: AbstractControl): ValidationErrors|null => {\n      // don't validate empty values to allow optional controls\n      if (isEmpty(control.value) || isEmpty(max)) { return null; }\n      const value = parseFloat(control.value);\n      const actual = control.value;\n      // Controls with NaN values after parsing should be treated as not having a\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n      return isNaN(value) || value <= max ? null : { 'max': { max, actual } };\n    };\n  }\n\n  /**\n   * Validator that requires control value to be true.\n   */\n  static requiredTrue(control: AbstractControl): ValidationErrors|null {\n    if (!control) { return JsonValidators.nullValidator; }\n    return control.value === true ? null : { 'required': true };\n  }\n\n  /**\n   * Validator that performs email validation.\n   */\n  static email(control: AbstractControl): ValidationErrors|null {\n    if (!control) { return JsonValidators.nullValidator; }\n    const EMAIL_REGEXP =\n      // tslint:disable-next-line max-line-length\n      /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n  }\n}\n",
    "// tslint:disable max-line-length\n// updated from AJV fast format regular expressions:\n// https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js\n\nexport const jsonSchemaFormatTests = {\n\n  'date': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\n\n  'time': /^[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)?$/i,\n\n  // Modified to allow incomplete entries, such as\n  // \"2000-03-14T01:59:26.535\" (needs \"Z\") or \"2000-03-14T01:59\" (needs \":00Z\")\n  'date-time': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d(?::[0-5]\\d)?(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)?$/i,\n\n  // email (sources from jsen validator):\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\n  'email': /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n\n  'hostname': /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i,\n\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  'ipv4': /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n\n  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\n  'ipv6': /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n  'uri': /^(?:[a-z][a-z0-9+-.]*)(?::|\\/)\\/?[^\\s]*$/i,\n\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/\\/)?[^\\s]*$/i,\n\n  // uri-template: https://tools.ietf.org/html/rfc6570\n  'uri-template': /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i,\n\n  // For the source: https://gist.github.com/dperini/729294\n  // For test cases: https://mathiasbynens.be/demo/url-regex\n  // @todo Delete current URL in favour of the commented out URL rule when this ajv issue is fixed https://github.com/eslint/eslint/issues/7983.\n  // URL: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu,\n  'url': /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i,\n\n  // uuid: http://tools.ietf.org/html/rfc4122\n  'uuid': /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,\n\n  // optimized https://gist.github.com/olmokramer/82ccce673f86db7cda5e\n  'color': /^\\s*(#(?:[\\da-f]{3}){1,2}|rgb\\((?:\\d{1,3},\\s*){2}\\d{1,3}\\)|rgba\\((?:\\d{1,3},\\s*){3}\\d*\\.?\\d+\\)|hsl\\(\\d{1,3}(?:,\\s*\\d{1,3}%){2}\\)|hsla\\(\\d{1,3}(?:,\\s*\\d{1,3}%){2},\\s*\\d*\\.?\\d+\\))\\s*$/gi,\n\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  'json-pointer': /^(?:\\/(?:[^~/]|~0|~1)*)*$|^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,\n\n  'relative-json-pointer': /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/,\n\n  'regex': function(str) {\n    if (/[^\\\\]\\\\Z/.test(str)) { return false; }\n    try {\n      // tslint:disable-next-line no-unused-expression\n      new RegExp(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n};\n\nexport type JsonSchemaFormatNames =\n  'date'|'time'|'date-time'|'email'|'hostname'|'ipv4'|'ipv6'|\n  'uri'|'uri-reference'|'uri-template'|'url'|'uuid'|'color'|\n  'json-pointer'|'relative-json-pointer'|'regex';\n",
    "import { Injectable } from '@angular/core';\n\nimport {\n  isDefined, isEmpty, isObject, isArray, isMap, isNumber, isString\n} from './validator.functions';\nimport { hasOwn, copy } from './utility.functions';\n\n/**\n * 'JsonPointer' class\n *\n * Some utilities for using JSON Pointers with JSON objects\n * https://tools.ietf.org/html/rfc6901\n *\n * get, getCopy, getFirst, set, setCopy, insert, insertCopy, remove, has, dict,\n * forEachDeep, forEachDeepCopy, escape, unescape, parse, compile, toKey,\n * isJsonPointer, isSubPointer, toIndexedPointer, toGenericPointer,\n * toControlPointer, toSchemaPointer, toDataPointer, parseObjectPath\n *\n * Some functions based on manuelstofer's json-pointer utilities\n * https://github.com/manuelstofer/json-pointer\n */\nexport type Pointer = string | string[];\n\n@Injectable()\nexport class JsonPointer {\n\n  /**\n   * 'get' function\n   *\n   * Uses a JSON Pointer to retrieve a value from an object.\n   *\n   * @param  { object } object - Object to get value from\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { number = 0 } startSlice - Zero-based index of first Pointer key to use\n   * @param  { number } endSlice - Zero-based index of last Pointer key to use\n   * @param  { boolean = false } getBoolean - Return only true or false?\n   * @param  { boolean = false } errors - Show error if not found?\n   * @return { object } - Located value (or true or false if getBoolean = true)\n   */\n  static get(\n    object, pointer, startSlice = 0, endSlice: number = null,\n    getBoolean = false, errors = false\n  ) {\n    if (object === null) { return getBoolean ? false : undefined; }\n    let keyArray: any[] = this.parse(pointer, errors);\n    if (typeof object === 'object' && keyArray !== null) {\n      let subObject = object;\n      if (startSlice >= keyArray.length || endSlice <= -keyArray.length) { return object; }\n      if (startSlice <= -keyArray.length) { startSlice = 0; }\n      if (!isDefined(endSlice) || endSlice >= keyArray.length) { endSlice = keyArray.length; }\n      keyArray = keyArray.slice(startSlice, endSlice);\n      for (let key of keyArray) {\n        if (key === '-' && isArray(subObject) && subObject.length) {\n          key = subObject.length - 1;\n        }\n        if (isMap(subObject) && subObject.has(key)) {\n          subObject = subObject.get(key);\n        } else if (typeof subObject === 'object' && subObject !== null &&\n          hasOwn(subObject, key)\n        ) {\n          subObject = subObject[key];\n        } else {\n          if (errors) {\n            console.error(`get error: \"${key}\" key not found in object.`);\n            console.error(pointer);\n            console.error(object);\n          }\n          return getBoolean ? false : undefined;\n        }\n      }\n      return getBoolean ? true : subObject;\n    }\n    if (errors && keyArray === null) {\n      console.error(`get error: Invalid JSON Pointer: ${pointer}`);\n    }\n    if (errors && typeof object !== 'object') {\n      console.error('get error: Invalid object:');\n      console.error(object);\n    }\n    return getBoolean ? false : undefined;\n  }\n\n  /**\n   * 'getCopy' function\n   *\n   * Uses a JSON Pointer to deeply clone a value from an object.\n   *\n   * @param  { object } object - Object to get value from\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { number = 0 } startSlice - Zero-based index of first Pointer key to use\n   * @param  { number } endSlice - Zero-based index of last Pointer key to use\n   * @param  { boolean = false } getBoolean - Return only true or false?\n   * @param  { boolean = false } errors - Show error if not found?\n   * @return { object } - Located value (or true or false if getBoolean = true)\n   */\n  static getCopy(\n    object, pointer, startSlice = 0, endSlice: number = null,\n    getBoolean = false, errors = false\n  ) {\n    const objectToCopy =\n      this.get(object, pointer, startSlice, endSlice, getBoolean, errors);\n    return this.forEachDeepCopy(objectToCopy);\n  }\n\n  /**\n   * 'getFirst' function\n   *\n   * Takes an array of JSON Pointers and objects,\n   * checks each object for a value specified by the pointer,\n   * and returns the first value found.\n   *\n   * @param  { [object, pointer][] } items - Array of objects and pointers to check\n   * @param  { any = null } defaultValue - Value to return if nothing found\n   * @param  { boolean = false } getCopy - Return a copy instead?\n   * @return { any } - First value found\n   */\n  static getFirst(items, defaultValue: any = null, getCopy = false) {\n    if (isEmpty(items)) { return; }\n    if (isArray(items)) {\n      for (const item of items) {\n        if (isEmpty(item)) { continue; }\n        if (isArray(item) && item.length >= 2) {\n          if (isEmpty(item[0]) || isEmpty(item[1])) { continue; }\n          const value = getCopy ?\n            this.getCopy(item[0], item[1]) :\n            this.get(item[0], item[1]);\n          if (value) { return value; }\n          continue;\n        }\n        console.error('getFirst error: Input not in correct format.\\n' +\n          'Should be: [ [ object1, pointer1 ], [ object 2, pointer2 ], etc... ]');\n        return;\n      }\n      return defaultValue;\n    }\n    if (isMap(items)) {\n      for (const [object, pointer] of items) {\n        if (object === null || !this.isJsonPointer(pointer)) { continue; }\n        const value = getCopy ?\n          this.getCopy(object, pointer) :\n          this.get(object, pointer);\n        if (value) { return value; }\n      }\n      return defaultValue;\n    }\n    console.error('getFirst error: Input not in correct format.\\n' +\n      'Should be: [ [ object1, pointer1 ], [ object 2, pointer2 ], etc... ]');\n    return defaultValue;\n  }\n\n  /**\n   * 'getFirstCopy' function\n   *\n   * Similar to getFirst, but always returns a copy.\n   *\n   * @param  { [object, pointer][] } items - Array of objects and pointers to check\n   * @param  { any = null } defaultValue - Value to return if nothing found\n   * @return { any } - Copy of first value found\n   */\n  static getFirstCopy(items, defaultValue: any = null) {\n    const firstCopy = this.getFirst(items, defaultValue, true);\n    return firstCopy;\n  }\n\n  /**\n   * 'set' function\n   *\n   * Uses a JSON Pointer to set a value on an object.\n   * Also creates any missing sub objects or arrays to contain that value.\n   *\n   * If the optional fourth parameter is TRUE and the inner-most container\n   * is an array, the function will insert the value as a new item at the\n   * specified location in the array, rather than overwriting the existing\n   * value (if any) at that location.\n   *\n   * So set([1, 2, 3], '/1', 4) => [1, 4, 3]\n   * and\n   * So set([1, 2, 3], '/1', 4, true) => [1, 4, 2, 3]\n   *\n   * @param  { object } object - The object to set value in\n   * @param  { Pointer } pointer - The JSON Pointer (string or array)\n   * @param  { any } value - The new value to set\n   * @param  { boolean } insert - insert value?\n   * @return { object } - The original object, modified with the set value\n   */\n  static set(object, pointer, value, insert = false) {\n    const keyArray = this.parse(pointer);\n    if (keyArray !== null && keyArray.length) {\n      let subObject = object;\n      for (let i = 0; i < keyArray.length - 1; ++i) {\n        let key = keyArray[i];\n        if (key === '-' && isArray(subObject)) {\n          key = subObject.length;\n        }\n        if (isMap(subObject) && subObject.has(key)) {\n          subObject = subObject.get(key);\n        } else {\n          if (!hasOwn(subObject, key)) {\n            subObject[key] = (keyArray[i + 1].match(/^(\\d+|-)$/)) ? [] : {};\n          }\n          subObject = subObject[key];\n        }\n      }\n      const lastKey = keyArray[keyArray.length - 1];\n      if (isArray(subObject) && lastKey === '-') {\n        subObject.push(value);\n      } else if (insert && isArray(subObject) && !isNaN(+lastKey)) {\n        subObject.splice(lastKey, 0, value);\n      } else if (isMap(subObject)) {\n        subObject.set(lastKey, value);\n      } else {\n        subObject[lastKey] = value;\n      }\n      return object;\n    }\n    console.error(`set error: Invalid JSON Pointer: ${pointer}`);\n    return object;\n  }\n\n  /**\n   * 'setCopy' function\n   *\n   * Copies an object and uses a JSON Pointer to set a value on the copy.\n   * Also creates any missing sub objects or arrays to contain that value.\n   *\n   * If the optional fourth parameter is TRUE and the inner-most container\n   * is an array, the function will insert the value as a new item at the\n   * specified location in the array, rather than overwriting the existing value.\n   *\n   * @param  { object } object - The object to copy and set value in\n   * @param  { Pointer } pointer - The JSON Pointer (string or array)\n   * @param  { any } value - The value to set\n   * @param  { boolean } insert - insert value?\n   * @return { object } - The new object with the set value\n   */\n  static setCopy(object, pointer, value, insert = false) {\n    const keyArray = this.parse(pointer);\n    if (keyArray !== null) {\n      const newObject = copy(object);\n      let subObject = newObject;\n      for (let i = 0; i < keyArray.length - 1; ++i) {\n        let key = keyArray[i];\n        if (key === '-' && isArray(subObject)) {\n          key = subObject.length;\n        }\n        if (isMap(subObject) && subObject.has(key)) {\n          subObject.set(key, copy(subObject.get(key)));\n          subObject = subObject.get(key);\n        } else {\n          if (!hasOwn(subObject, key)) {\n            subObject[key] = (keyArray[i + 1].match(/^(\\d+|-)$/)) ? [] : {};\n          }\n          subObject[key] = copy(subObject[key]);\n          subObject = subObject[key];\n        }\n      }\n      const lastKey = keyArray[keyArray.length - 1];\n      if (isArray(subObject) && lastKey === '-') {\n        subObject.push(value);\n      } else if (insert && isArray(subObject) && !isNaN(+lastKey)) {\n        subObject.splice(lastKey, 0, value);\n      } else if (isMap(subObject)) {\n        subObject.set(lastKey, value);\n      } else {\n        subObject[lastKey] = value;\n      }\n      return newObject;\n    }\n    console.error(`setCopy error: Invalid JSON Pointer: ${pointer}`);\n    return object;\n  }\n\n  /**\n   * 'insert' function\n   *\n   * Calls 'set' with insert = TRUE\n   *\n   * @param  { object } object - object to insert value in\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { any } value - value to insert\n   * @return { object }\n   */\n  static insert(object, pointer, value) {\n    const updatedObject = this.set(object, pointer, value, true);\n    return updatedObject;\n  }\n\n  /**\n   * 'insertCopy' function\n   *\n   * Calls 'setCopy' with insert = TRUE\n   *\n   * @param  { object } object - object to insert value in\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { any } value - value to insert\n   * @return { object }\n   */\n  static insertCopy(object, pointer, value) {\n    const updatedObject = this.setCopy(object, pointer, value, true);\n    return updatedObject;\n  }\n\n  /**\n   * 'remove' function\n   *\n   * Uses a JSON Pointer to remove a key and its attribute from an object\n   *\n   * @param  { object } object - object to delete attribute from\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @return { object }\n   */\n  static remove(object, pointer) {\n    const keyArray = this.parse(pointer);\n    if (keyArray !== null && keyArray.length) {\n      let lastKey = keyArray.pop();\n      const parentObject = this.get(object, keyArray);\n      if (isArray(parentObject)) {\n        if (lastKey === '-') { lastKey = parentObject.length - 1; }\n        parentObject.splice(lastKey, 1);\n      } else if (isObject(parentObject)) {\n        delete parentObject[lastKey];\n      }\n      return object;\n    }\n    console.error(`remove error: Invalid JSON Pointer: ${pointer}`);\n    return object;\n  }\n\n  /**\n   * 'has' function\n   *\n   * Tests if an object has a value at the location specified by a JSON Pointer\n   *\n   * @param  { object } object - object to chek for value\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @return { boolean }\n   */\n  static has(object, pointer) {\n    const hasValue = this.get(object, pointer, 0, null, true);\n    return hasValue;\n  }\n\n  /**\n   * 'dict' function\n   *\n   * Returns a (pointer -> value) dictionary for an object\n   *\n   * @param  { object } object - The object to create a dictionary from\n   * @return { object } - The resulting dictionary object\n   */\n  static dict(object) {\n    const results: any = {};\n    this.forEachDeep(object, (value, pointer) => {\n      if (typeof value !== 'object') { results[pointer] = value; }\n    });\n    return results;\n  }\n\n  /**\n   * 'forEachDeep' function\n   *\n   * Iterates over own enumerable properties of an object or items in an array\n   * and invokes an iteratee function for each key/value or index/value pair.\n   * By default, iterates over items within objects and arrays after calling\n   * the iteratee function on the containing object or array itself.\n   *\n   * The iteratee is invoked with three arguments: (value, pointer, rootObject),\n   * where pointer is a JSON pointer indicating the location of the current\n   * value within the root object, and rootObject is the root object initially\n   * submitted to th function.\n   *\n   * If a third optional parameter 'bottomUp' is set to TRUE, the iterator\n   * function will be called on sub-objects and arrays after being\n   * called on their contents, rather than before, which is the default.\n   *\n   * This function can also optionally be called directly on a sub-object by\n   * including optional 4th and 5th parameterss to specify the initial\n   * root object and pointer.\n   *\n   * @param  { object } object - the initial object or array\n   * @param  { (v: any, p?: string, o?: any) => any } function - iteratee function\n   * @param  { boolean = false } bottomUp - optional, set to TRUE to reverse direction\n   * @param  { object = object } rootObject - optional, root object or array\n   * @param  { string = '' } pointer - optional, JSON Pointer to object within rootObject\n   * @return { object } - The modified object\n   */\n  static forEachDeep(\n    object, fn: (v: any, p?: string, o?: any) => any = (v) => v,\n    bottomUp = false, pointer = '', rootObject = object\n  ) {\n    if (typeof fn !== 'function') {\n      console.error(`forEachDeep error: Iterator is not a function:`, fn);\n      return;\n    }\n    if (!bottomUp) { fn(object, pointer, rootObject); }\n    if (isObject(object) || isArray(object)) {\n      for (const key of Object.keys(object)) {\n        const newPointer = pointer + '/' + this.escape(key);\n        this.forEachDeep(object[key], fn, bottomUp, newPointer, rootObject);\n      }\n    }\n    if (bottomUp) { fn(object, pointer, rootObject); }\n  }\n\n  /**\n   * 'forEachDeepCopy' function\n   *\n   * Similar to forEachDeep, but returns a copy of the original object, with\n   * the same keys and indexes, but with values replaced with the result of\n   * the iteratee function.\n   *\n   * @param  { object } object - the initial object or array\n   * @param  { (v: any, k?: string, o?: any, p?: any) => any } function - iteratee function\n   * @param  { boolean = false } bottomUp - optional, set to TRUE to reverse direction\n   * @param  { object = object } rootObject - optional, root object or array\n   * @param  { string = '' } pointer - optional, JSON Pointer to object within rootObject\n   * @return { object } - The copied object\n   */\n  static forEachDeepCopy(\n    object, fn: (v: any, p?: string, o?: any) => any = (v) => v,\n    bottomUp = false, pointer = '', rootObject = object\n  ) {\n    if (typeof fn !== 'function') {\n      console.error(`forEachDeepCopy error: Iterator is not a function:`, fn);\n      return null;\n    }\n    if (isObject(object) || isArray(object)) {\n      let newObject = isArray(object) ? [ ...object ] : { ...object };\n      if (!bottomUp) { newObject = fn(newObject, pointer, rootObject); }\n      for (const key of Object.keys(newObject)) {\n        const newPointer = pointer + '/' + this.escape(key);\n        newObject[key] = this.forEachDeepCopy(\n          newObject[key], fn, bottomUp, newPointer, rootObject\n        );\n      }\n      if (bottomUp) { newObject = fn(newObject, pointer, rootObject); }\n      return newObject;\n    } else {\n      return fn(object, pointer, rootObject);\n    }\n  }\n\n  /**\n   * 'escape' function\n   *\n   * Escapes a string reference key\n   *\n   * @param  { string } key - string key to escape\n   * @return { string } - escaped key\n   */\n  static escape(key) {\n    const escaped = key.toString().replace(/~/g, '~0').replace(/\\//g, '~1');\n    return escaped;\n  }\n\n  /**\n   * 'unescape' function\n   *\n   * Unescapes a string reference key\n   *\n   * @param  { string } key - string key to unescape\n   * @return { string } - unescaped key\n   */\n  static unescape(key) {\n    const unescaped = key.toString().replace(/~1/g, '/').replace(/~0/g, '~');\n    return unescaped;\n  }\n\n  /**\n   * 'parse' function\n   *\n   * Converts a string JSON Pointer into a array of keys\n   * (if input is already an an array of keys, it is returned unchanged)\n   *\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { boolean = false } errors - Show error if invalid pointer?\n   * @return { string[] } - JSON Pointer array of keys\n   */\n  static parse(pointer, errors = false) {\n    if (!this.isJsonPointer(pointer)) {\n      if (errors) { console.error(`parse error: Invalid JSON Pointer: ${pointer}`); }\n      return null;\n    }\n    if (isArray(pointer)) { return <string[]>pointer; }\n    if (typeof pointer === 'string') {\n      if ((<string>pointer)[0] === '#') { pointer = pointer.slice(1); }\n      if (<string>pointer === '' || <string>pointer === '/') { return []; }\n      return (<string>pointer).slice(1).split('/').map(this.unescape);\n    }\n  }\n\n  /**\n   * 'compile' function\n   *\n   * Converts an array of keys into a JSON Pointer string\n   * (if input is already a string, it is normalized and returned)\n   *\n   * The optional second parameter is a default which will replace any empty keys.\n   *\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { string | number = '' } defaultValue - Default value\n   * @param  { boolean = false } errors - Show error if invalid pointer?\n   * @return { string } - JSON Pointer string\n   */\n  static compile(pointer, defaultValue = '', errors = false) {\n    if (pointer === '#') { return ''; }\n    if (!this.isJsonPointer(pointer)) {\n      if (errors) { console.error(`compile error: Invalid JSON Pointer: ${pointer}`); }\n      return null;\n    }\n    if (isArray(pointer)) {\n      if ((<string[]>pointer).length === 0) { return ''; }\n      return '/' + (<string[]>pointer).map(\n        key => key === '' ? defaultValue : this.escape(key)\n      ).join('/');\n    }\n    if (typeof pointer === 'string') {\n      if (pointer[0] === '#') { pointer = pointer.slice(1); }\n      return pointer;\n    }\n  }\n\n  /**\n   * 'toKey' function\n   *\n   * Extracts name of the final key from a JSON Pointer.\n   *\n   * @param  { Pointer } pointer - JSON Pointer (string or array)\n   * @param  { boolean = false } errors - Show error if invalid pointer?\n   * @return { string } - the extracted key\n   */\n  static toKey(pointer, errors = false) {\n    const keyArray = this.parse(pointer, errors);\n    if (keyArray === null) { return null; }\n    if (!keyArray.length) { return ''; }\n    return keyArray[keyArray.length - 1];\n  }\n\n  /**\n   * 'isJsonPointer' function\n   *\n   * Checks a string or array value to determine if it is a valid JSON Pointer.\n   * Returns true if a string is empty, or starts with '/' or '#/'.\n   * Returns true if an array contains only string values.\n   *\n   * @param  { any } value - value to check\n   * @return { boolean } - true if value is a valid JSON Pointer, otherwise false\n   */\n  static isJsonPointer(value) {\n    if (isArray(value)) {\n      return value.every(key => typeof key === 'string');\n    } else if (isString(value)) {\n      if (value === '' || value === '#') { return true; }\n      if (value[0] === '/' || value.slice(0, 2) === '#/') {\n        return !/(~[^01]|~$)/g.test(value);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * 'isSubPointer' function\n   *\n   * Checks whether one JSON Pointer is a subset of another.\n   *\n   * @param  { Pointer } shortPointer - potential subset JSON Pointer\n   * @param  { Pointer } longPointer - potential superset JSON Pointer\n   * @param  { boolean = false } trueIfMatching - return true if pointers match?\n   * @param  { boolean = false } errors - Show error if invalid pointer?\n   * @return { boolean } - true if shortPointer is a subset of longPointer, false if not\n   */\n  static isSubPointer(\n    shortPointer, longPointer, trueIfMatching = false, errors = false\n  ) {\n    if (!this.isJsonPointer(shortPointer) || !this.isJsonPointer(longPointer)) {\n      if (errors) {\n        let invalid = '';\n        if (!this.isJsonPointer(shortPointer)) { invalid += ` 1: ${shortPointer}`; }\n        if (!this.isJsonPointer(longPointer)) { invalid += ` 2: ${longPointer}`; }\n        console.error(`isSubPointer error: Invalid JSON Pointer ${invalid}`);\n      }\n      return;\n    }\n    shortPointer = this.compile(shortPointer, '', errors);\n    longPointer = this.compile(longPointer, '', errors);\n    return shortPointer === longPointer ? trueIfMatching :\n      `${shortPointer}/` === longPointer.slice(0, shortPointer.length + 1);\n  }\n\n  /**\n   * 'toIndexedPointer' function\n   *\n   * Merges an array of numeric indexes and a generic pointer to create an\n   * indexed pointer for a specific item.\n   *\n   * For example, merging the generic pointer '/foo/-/bar/-/baz' and\n   * the array [4, 2] would result in the indexed pointer '/foo/4/bar/2/baz'\n   *\n   * @function\n   * @param  { Pointer } genericPointer - The generic pointer\n   * @param  { number[] } indexArray - The array of numeric indexes\n   * @param  { Map<string, number> } arrayMap - An optional array map\n   * @return { string } - The merged pointer with indexes\n   */\n  static toIndexedPointer(\n    genericPointer, indexArray, arrayMap: Map<string, number> = null\n  ) {\n    if (this.isJsonPointer(genericPointer) && isArray(indexArray)) {\n      let indexedPointer = this.compile(genericPointer);\n      if (isMap(arrayMap)) {\n        let arrayIndex = 0;\n        return indexedPointer.replace(/\\/\\-(?=\\/|$)/g, (key, stringIndex) =>\n          arrayMap.has((<string>indexedPointer).slice(0, stringIndex)) ?\n            '/' + indexArray[arrayIndex++] : key\n        );\n      } else {\n        for (const pointerIndex of indexArray) {\n          indexedPointer = indexedPointer.replace('/-', '/' + pointerIndex);\n        }\n        return indexedPointer;\n      }\n    }\n    if (!this.isJsonPointer(genericPointer)) {\n      console.error(`toIndexedPointer error: Invalid JSON Pointer: ${genericPointer}`);\n    }\n    if (!isArray(indexArray)) {\n      console.error(`toIndexedPointer error: Invalid indexArray: ${indexArray}`);\n    }\n  }\n\n  /**\n   * 'toGenericPointer' function\n   *\n   * Compares an indexed pointer to an array map and removes list array\n   * indexes (but leaves tuple arrray indexes and all object keys, including\n   * numeric keys) to create a generic pointer.\n   *\n   * For example, using the indexed pointer '/foo/1/bar/2/baz/3' and\n   * the arrayMap [['/foo', 0], ['/foo/-/bar', 3], ['/foo/-/bar/-/baz', 0]]\n   * would result in the generic pointer '/foo/-/bar/2/baz/-'\n   * Using the indexed pointer '/foo/1/bar/4/baz/3' and the same arrayMap\n   * would result in the generic pointer '/foo/-/bar/-/baz/-'\n   * (the bar array has 3 tuple items, so index 2 is retained, but 4 is removed)\n   *\n   * The structure of the arrayMap is: [['path to array', number of tuple items]...]\n   *\n   * @function\n   * @param  { Pointer } indexedPointer - The indexed pointer (array or string)\n   * @param  { Map<string, number> } arrayMap - The optional array map (for preserving tuple indexes)\n   * @return { string } - The generic pointer with indexes removed\n   */\n  static toGenericPointer(indexedPointer, arrayMap = new Map<string, number>()) {\n    if (this.isJsonPointer(indexedPointer) && isMap(arrayMap)) {\n      const pointerArray = this.parse(indexedPointer);\n      for (let i = 1; i < pointerArray.length; i++) {\n        const subPointer = this.compile(pointerArray.slice(0, i));\n        if (arrayMap.has(subPointer) &&\n          arrayMap.get(subPointer) <= +pointerArray[i]\n        ) {\n          pointerArray[i] = '-';\n        }\n      }\n      return this.compile(pointerArray);\n    }\n    if (!this.isJsonPointer(indexedPointer)) {\n      console.error(`toGenericPointer error: invalid JSON Pointer: ${indexedPointer}`);\n    }\n    if (!isMap(arrayMap)) {\n      console.error(`toGenericPointer error: invalid arrayMap: ${arrayMap}`);\n    }\n  }\n\n  /**\n   * 'toControlPointer' function\n   *\n   * Accepts a JSON Pointer for a data object and returns a JSON Pointer for the\n   * matching control in an Angular FormGroup.\n   *\n   * @param  { Pointer } dataPointer - JSON Pointer (string or array) to a data object\n   * @param  { FormGroup } formGroup - Angular FormGroup to get value from\n   * @param  { boolean = false } controlMustExist - Only return if control exists?\n   * @return { Pointer } - JSON Pointer (string) to the formGroup object\n   */\n  static toControlPointer(dataPointer, formGroup, controlMustExist = false) {\n    const dataPointerArray = this.parse(dataPointer);\n    const controlPointerArray: string[] = [];\n    let subGroup = formGroup;\n    if (dataPointerArray !== null) {\n      for (const key of dataPointerArray) {\n        if (hasOwn(subGroup, 'controls')) {\n          controlPointerArray.push('controls');\n          subGroup = subGroup.controls;\n        }\n        if (isArray(subGroup) && (key === '-')) {\n          controlPointerArray.push((subGroup.length - 1).toString());\n          subGroup = subGroup[subGroup.length - 1];\n        } else if (hasOwn(subGroup, key)) {\n          controlPointerArray.push(key);\n          subGroup = subGroup[key];\n        } else if (controlMustExist) {\n          console.error(`toControlPointer error: Unable to find \"${key}\" item in FormGroup.`);\n          console.error(dataPointer);\n          console.error(formGroup);\n          return;\n        } else {\n          controlPointerArray.push(key);\n          subGroup = { controls: {} };\n        }\n      }\n      return this.compile(controlPointerArray);\n    }\n    console.error(`toControlPointer error: Invalid JSON Pointer: ${dataPointer}`);\n  }\n\n  /**\n   * 'toSchemaPointer' function\n   *\n   * Accepts a JSON Pointer to a value inside a data object and a JSON schema\n   * for that object.\n   *\n   * Returns a Pointer to the sub-schema for the value inside the object's schema.\n   *\n   * @param  { Pointer } dataPointer - JSON Pointer (string or array) to an object\n   * @param  { any } schema - JSON schema for the object\n   * @return { Pointer } - JSON Pointer (string) to the object's schema\n   */\n  static toSchemaPointer(dataPointer, schema) {\n    if (this.isJsonPointer(dataPointer) && typeof schema === 'object') {\n      const pointerArray = this.parse(dataPointer);\n      if (!pointerArray.length) { return ''; }\n      const firstKey = pointerArray.shift();\n      if (schema.type === 'object' || schema.properties || schema.additionalProperties) {\n        if ((schema.properties || {})[firstKey]) {\n          return `/properties/${this.escape(firstKey)}` +\n            this.toSchemaPointer(pointerArray, schema.properties[firstKey]);\n        } else  if (schema.additionalProperties) {\n          return '/additionalProperties' +\n            this.toSchemaPointer(pointerArray, schema.additionalProperties);\n        }\n      }\n      if ((schema.type === 'array' || schema.items) &&\n        (isNumber(firstKey) || firstKey === '-' || firstKey === '')\n      ) {\n        const arrayItem = firstKey === '-' || firstKey === '' ? 0 : +firstKey;\n        if (isArray(schema.items)) {\n          if (arrayItem < schema.items.length) {\n            return '/items/' + arrayItem +\n              this.toSchemaPointer(pointerArray, schema.items[arrayItem]);\n          } else if (schema.additionalItems) {\n            return '/additionalItems' +\n              this.toSchemaPointer(pointerArray, schema.additionalItems);\n          }\n        } else if (isObject(schema.items)) {\n          return '/items' + this.toSchemaPointer(pointerArray, schema.items);\n        } else if (isObject(schema.additionalItems)) {\n          return '/additionalItems' +\n            this.toSchemaPointer(pointerArray, schema.additionalItems);\n        }\n      }\n      console.error(`toSchemaPointer error: Data pointer ${dataPointer} ` +\n        `not compatible with schema ${schema}`);\n      return null;\n    }\n    if (!this.isJsonPointer(dataPointer)) {\n      console.error(`toSchemaPointer error: Invalid JSON Pointer: ${dataPointer}`);\n    }\n    if (typeof schema !== 'object') {\n      console.error(`toSchemaPointer error: Invalid JSON Schema: ${schema}`);\n    }\n    return null;\n  }\n\n  /**\n   * 'toDataPointer' function\n   *\n   * Accepts a JSON Pointer to a sub-schema inside a JSON schema and the schema.\n   *\n   * If possible, returns a generic Pointer to the corresponding value inside\n   * the data object described by the JSON schema.\n   *\n   * Returns null if the sub-schema is in an ambiguous location (such as\n   * definitions or additionalProperties) where the corresponding value\n   * location cannot be determined.\n   *\n   * @param  { Pointer } schemaPointer - JSON Pointer (string or array) to a JSON schema\n   * @param  { any } schema - the JSON schema\n   * @param  { boolean = false } errors - Show errors?\n   * @return { Pointer } - JSON Pointer (string) to the value in the data object\n   */\n  static toDataPointer(schemaPointer, schema, errors = false) {\n    if (this.isJsonPointer(schemaPointer) && typeof schema === 'object' &&\n      this.has(schema, schemaPointer)\n    ) {\n      const pointerArray = this.parse(schemaPointer);\n      if (!pointerArray.length) { return ''; }\n      const dataPointer = '';\n      const firstKey = pointerArray.shift();\n      if (firstKey === 'properties' ||\n        (firstKey === 'items' && isArray(schema.items))\n      ) {\n        const secondKey = pointerArray.shift();\n        const pointerSuffix = this.toDataPointer(pointerArray, schema[firstKey][secondKey]);\n        return pointerSuffix === null ? null : '/' + secondKey + pointerSuffix;\n      } else if (firstKey === 'additionalItems' ||\n        (firstKey === 'items' && isObject(schema.items))\n      ) {\n        const pointerSuffix = this.toDataPointer(pointerArray, schema[firstKey]);\n        return pointerSuffix === null ? null : '/-' + pointerSuffix;\n      } else if (['allOf', 'anyOf', 'oneOf'].includes(firstKey)) {\n        const secondKey = pointerArray.shift();\n        return this.toDataPointer(pointerArray, schema[firstKey][secondKey]);\n      } else if (firstKey === 'not') {\n        return this.toDataPointer(pointerArray, schema[firstKey]);\n      } else if (['contains', 'definitions', 'dependencies', 'additionalItems',\n        'additionalProperties', 'patternProperties', 'propertyNames'].includes(firstKey)\n      ) {\n        if (errors) { console.error(`toDataPointer error: Ambiguous location`); }\n      }\n      return '';\n    }\n    if (errors) {\n      if (!this.isJsonPointer(schemaPointer)) {\n        console.error(`toDataPointer error: Invalid JSON Pointer: ${schemaPointer}`);\n      }\n      if (typeof schema !== 'object') {\n        console.error(`toDataPointer error: Invalid JSON Schema: ${schema}`);\n      }\n      if (typeof schema !== 'object') {\n        console.error(`toDataPointer error: Pointer ${schemaPointer} invalid for Schema: ${schema}`);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 'parseObjectPath' function\n   *\n   * Parses a JavaScript object path into an array of keys, which\n   * can then be passed to compile() to convert into a string JSON Pointer.\n   *\n   * Based on mike-marcacci's excellent objectpath parse function:\n   * https://github.com/mike-marcacci/objectpath\n   *\n   * @param  { Pointer } path - The object path to parse\n   * @return { string[] } - The resulting array of keys\n   */\n  static parseObjectPath(path) {\n    if (isArray(path)) { return <string[]>path; }\n    if (this.isJsonPointer(path)) { return this.parse(path); }\n    if (typeof path === 'string') {\n      let index = 0;\n      const parts: string[] = [];\n      while (index < path.length) {\n        const nextDot = path.indexOf('.', index);\n        const nextOB = path.indexOf('[', index); // next open bracket\n        if (nextDot === -1 && nextOB === -1) { // last item\n          parts.push(path.slice(index));\n          index = path.length;\n        } else if (nextDot !== -1 && (nextDot < nextOB || nextOB === -1)) { // dot notation\n          parts.push(path.slice(index, nextDot));\n          index = nextDot + 1;\n        } else { // bracket notation\n          if (nextOB > index) {\n            parts.push(path.slice(index, nextOB));\n            index = nextOB;\n          }\n          const quote = path.charAt(nextOB + 1);\n          if (quote === '\"' || quote === '\\'') { // enclosing quotes\n            let nextCB = path.indexOf(quote + ']', nextOB); // next close bracket\n            while (nextCB !== -1 && path.charAt(nextCB - 1) === '\\\\') {\n              nextCB = path.indexOf(quote + ']', nextCB + 2);\n            }\n            if (nextCB === -1) { nextCB = path.length; }\n            parts.push(path.slice(index + 2, nextCB)\n              .replace(new RegExp('\\\\' + quote, 'g'), quote));\n            index = nextCB + 2;\n          } else { // no enclosing quotes\n            let nextCB = path.indexOf(']', nextOB); // next close bracket\n            if (nextCB === -1) { nextCB = path.length; }\n            parts.push(path.slice(index + 1, nextCB));\n            index = nextCB + 1;\n          }\n          if (path.charAt(index) === '.') { index++; }\n        }\n      }\n      return parts;\n    }\n    console.error('parseObjectPath error: Input object path must be a string.');\n  }\n}\n",
    "import {\n  hasValue, inArray, isArray, isDefined, isObject, isEmpty, isMap, isSet,\n  isString, PlainObject\n} from './validator.functions';\n\n/**\n * Utility function library:\n *\n * addClasses, copy, forEach, forEachCopy, hasOwn, mergeFilteredObject,\n * uniqueItems, commonItems, fixTitle, toTitleCase\n*/\n\n/**\n * 'addClasses' function\n *\n * Merges two space-delimited lists of CSS classes and removes duplicates.\n *\n * @param {string | string[] | Set<string>} oldClasses\n * @param {string | string[] | Set<string>} newClasses\n * @return {string | string[] | Set<string>} - Combined classes\n */\nexport function addClasses(\n  oldClasses: string | string[] | Set<string>,\n  newClasses: string | string[] | Set<string>\n): string | string[] | Set<string> {\n  const badType = i => !isSet(i) && !isArray(i) && !isString(i);\n  if (badType(newClasses)) { return oldClasses; }\n  if (badType(oldClasses)) { oldClasses = ''; }\n  const toSet = i => isSet(i) ? i : isArray(i) ? new Set(i) : new Set(i.split(' '));\n  const combinedSet: Set<any> = toSet(oldClasses);\n  const newSet: Set<any> = toSet(newClasses);\n  newSet.forEach(c => combinedSet.add(c));\n  if (isSet(oldClasses)) { return combinedSet; }\n  if (isArray(oldClasses)) { return Array.from(combinedSet); }\n  return Array.from(combinedSet).join(' ');\n}\n\n/**\n * 'copy' function\n *\n * Makes a shallow copy of a JavaScript object, array, Map, or Set.\n * If passed a JavaScript primitive value (string, number, boolean, or null),\n * it returns the value.\n *\n * @param {Object|Array|string|number|boolean|null} object - The object to copy\n * @param {boolean = false} errors - Show errors?\n * @return {Object|Array|string|number|boolean|null} - The copied object\n */\nexport function copy(object: any, errors = false): any {\n  if (typeof object !== 'object' || object === null) { return object; }\n  if (isMap(object))    { return new Map(object); }\n  if (isSet(object))    { return new Set(object); }\n  if (isArray(object))  { return [ ...object ];   }\n  if (isObject(object)) { return { ...object };   }\n  if (errors) {\n    console.error('copy error: Object to copy must be a JavaScript object or value.');\n  }\n  return object;\n}\n\n/**\n * 'forEach' function\n *\n * Iterates over all items in the first level of an object or array\n * and calls an iterator funciton on each item.\n *\n * The iterator function is called with four values:\n * 1. The current item's value\n * 2. The current item's key\n * 3. The parent object, which contains the current item\n * 4. The root object\n *\n * Setting the optional third parameter to 'top-down' or 'bottom-up' will cause\n * it to also recursively iterate over items in sub-objects or sub-arrays in the\n * specified direction.\n *\n * @param {Object|Array} object - The object or array to iterate over\n * @param {function} fn - the iterator funciton to call on each item\n * @param {boolean = false} errors - Show errors?\n * @return {void}\n */\nexport function forEach(\n  object: any, fn: (v: any, k?: string | number, c?: any, rc?: any) => any,\n  recurse: boolean | string = false, rootObject: any = object, errors = false\n): void {\n  if (isEmpty(object)) { return; }\n  if ((isObject(object) || isArray(object)) && typeof fn === 'function') {\n    for (const key of Object.keys(object)) {\n      const value = object[key];\n      if (recurse === 'bottom-up' && (isObject(value) || isArray(value))) {\n        forEach(value, fn, recurse, rootObject);\n      }\n      fn(value, key, object, rootObject);\n      if (recurse === 'top-down' && (isObject(value) || isArray(value))) {\n        forEach(value, fn, recurse, rootObject);\n      }\n    }\n  }\n  if (errors) {\n    if (typeof fn !== 'function') {\n      console.error('forEach error: Iterator must be a function.');\n      console.error('function', fn);\n    }\n    if (!isObject(object) && !isArray(object)) {\n      console.error('forEach error: Input object must be an object or array.');\n      console.error('object', object);\n    }\n  }\n}\n\n/**\n * 'forEachCopy' function\n *\n * Iterates over all items in the first level of an object or array\n * and calls an iterator function on each item. Returns a new object or array\n * with the same keys or indexes as the original, and values set to the results\n * of the iterator function.\n *\n * Does NOT recursively iterate over items in sub-objects or sub-arrays.\n *\n * @param {Object | Array} object - The object or array to iterate over\n * @param {function} fn - The iterator funciton to call on each item\n * @param {boolean = false} errors - Show errors?\n * @return {Object | Array} - The resulting object or array\n */\nexport function forEachCopy(\n  object: any, fn: (v: any, k?: string | number, o?: any, p?: string) => any,\n  errors = false\n): any {\n  if (!hasValue(object)) { return; }\n  if ((isObject(object) || isArray(object)) && typeof object !== 'function') {\n    const newObject: any = isArray(object) ? [] : {};\n    for (const key of Object.keys(object)) {\n      newObject[key] = fn(object[key], key, object);\n    }\n    return newObject;\n  }\n  if (errors) {\n    if (typeof fn !== 'function') {\n      console.error('forEachCopy error: Iterator must be a function.');\n      console.error('function', fn);\n    }\n    if (!isObject(object) && !isArray(object)) {\n      console.error('forEachCopy error: Input object must be an object or array.');\n      console.error('object', object);\n    }\n  }\n}\n\n/**\n * 'hasOwn' utility function\n *\n * Checks whether an object or array has a particular property.\n *\n * @param {any} object - the object to check\n * @param {string} property - the property to look for\n * @return {boolean} - true if object has property, false if not\n */\nexport function hasOwn(object: any, property: string): boolean {\n  if (!object || !['number', 'string', 'symbol'].includes(typeof property) ||\n    (!isObject(object) && !isArray(object) && !isMap(object) && !isSet(object))\n  ) { return false; }\n  if (isMap(object) || isSet(object)) { return object.has(property); }\n  if (typeof property === 'number') {\n    if (isArray(object)) { return object[<number>property]; }\n    property = property + '';\n  }\n  return object.hasOwnProperty(property);\n}\n\n/**\n * 'mergeFilteredObject' utility function\n *\n * Shallowly merges two objects, setting key and values from source object\n * in target object, excluding specified keys.\n *\n * Optionally, it can also use functions to transform the key names and/or\n * the values of the merging object.\n *\n * @param {PlainObject} targetObject - Target object to add keys and values to\n * @param {PlainObject} sourceObject - Source object to copy keys and values from\n * @param {string[]} excludeKeys - Array of keys to exclude\n * @param {(string: string) => string = (k) => k} keyFn - Function to apply to keys\n * @param {(any: any) => any = (v) => v} valueFn - Function to apply to values\n * @return {PlainObject} - Returns targetObject\n */\nexport function mergeFilteredObject(\n  targetObject: PlainObject,\n  sourceObject: PlainObject,\n  excludeKeys = <string[]>[],\n  keyFn = (key: string): string => key,\n  valFn = (val: any): any => val\n): PlainObject {\n  if (!isObject(sourceObject)) { return targetObject; }\n  if (!isObject(targetObject)) { targetObject = {}; }\n  for (const key of Object.keys(sourceObject)) {\n    if (!inArray(key, excludeKeys) && isDefined(sourceObject[key])) {\n      targetObject[keyFn(key)] = valFn(sourceObject[key]);\n    }\n  }\n  return targetObject;\n}\n\n/**\n * 'uniqueItems' function\n *\n * Accepts any number of string value inputs,\n * and returns an array of all input vaues, excluding duplicates.\n *\n * @param {...string} ...items -\n * @return {string[]} -\n */\nexport function uniqueItems(...items): string[] {\n  const returnItems = [];\n  for (const item of items) {\n    if (!returnItems.includes(item)) { returnItems.push(item); }\n  }\n  return returnItems;\n}\n\n/**\n * 'commonItems' function\n *\n * Accepts any number of strings or arrays of string values,\n * and returns a single array containing only values present in all inputs.\n *\n * @param {...string|string[]} ...arrays -\n * @return {string[]} -\n */\nexport function commonItems(...arrays): string[] {\n  let returnItems = null;\n  for (let array of arrays) {\n    if (isString(array)) { array = [array]; }\n    returnItems = returnItems === null ? [ ...array ] :\n      returnItems.filter(item => array.includes(item));\n    if (!returnItems.length) { return []; }\n  }\n  return returnItems;\n}\n\n/**\n * 'fixTitle' function\n *\n *\n * @param {string} input -\n * @return {string} -\n */\nexport function fixTitle(name: string): string {\n  return name && toTitleCase(name.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/_/g, ' '));\n}\n\n/**\n * 'toTitleCase' function\n *\n * Intelligently converts an input string to Title Case.\n *\n * Accepts an optional second parameter with a list of additional\n * words and abbreviations to force into a particular case.\n *\n * This function is built on prior work by John Gruber and David Gouch:\n * http://daringfireball.net/2008/08/title_case_update\n * https://github.com/gouch/to-title-case\n *\n * @param {string} input -\n * @param {string|string[]} forceWords? -\n * @return {string} -\n */\nexport function toTitleCase(input: string, forceWords?: string|string[]): string {\n  if (!isString(input)) { return input; }\n  let forceArray: string[] = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'en',\n   'for', 'if', 'in', 'nor', 'of', 'on', 'or', 'per', 'the', 'to', 'v', 'v.',\n   'vs', 'vs.', 'via'];\n  if (isString(forceWords)) { forceWords = (<string>forceWords).split('|'); }\n  if (isArray(forceWords)) { forceArray = forceArray.concat(forceWords); }\n  const forceArrayLower: string[] = forceArray.map(w => w.toLowerCase());\n  const noInitialCase: boolean =\n    input === input.toUpperCase() || input === input.toLowerCase();\n  let prevLastChar = '';\n  input = input.trim();\n  return input.replace(/[A-Za-z0-9\\u00C0-\\u00FF]+[^\\s-]*/g, (word, idx) => {\n    if (!noInitialCase && word.slice(1).search(/[A-Z]|\\../) !== -1) {\n      return word;\n    } else {\n      let newWord: string;\n      const forceWord: string =\n        forceArray[forceArrayLower.indexOf(word.toLowerCase())];\n      if (!forceWord) {\n        if (noInitialCase) {\n          if (word.slice(1).search(/\\../) !== -1) {\n            newWord = word.toLowerCase();\n          } else {\n            newWord = word[0].toUpperCase() + word.slice(1).toLowerCase();\n          }\n        } else {\n          newWord = word[0].toUpperCase() + word.slice(1);\n        }\n      } else if (\n        forceWord === forceWord.toLowerCase() && (\n          idx === 0 || idx + word.length === input.length ||\n          prevLastChar === ':' || input[idx - 1].search(/[^\\s-]/) !== -1 ||\n          (input[idx - 1] !== '-' && input[idx + word.length] === '-')\n        )\n      ) {\n        newWord = forceWord[0].toUpperCase() + forceWord.slice(1);\n      } else {\n        newWord = forceWord;\n      }\n      prevLastChar = word.slice(-1);\n      return newWord;\n    }\n  });\n}\n",
    "import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable } from 'rxjs-compat/Observable';\nimport { fromPromise } from 'rxjs-compat/observable/fromPromise';\nimport { toPromise } from 'rxjs-compat/operator/toPromise';\n\n/**\n * Validator utility function library:\n *\n * Validator and error utilities:\n *   _executeValidators, _executeAsyncValidators, _mergeObjects, _mergeErrors\n *\n * Individual value checking:\n *   isDefined, hasValue, isEmpty\n *\n * Individual type checking:\n *   isString, isNumber, isInteger, isBoolean, isFunction, isObject, isArray,\n *   isMap, isSet, isPromise, isObservable\n *\n * Multiple type checking and fixing:\n *   getType, isType, isPrimitive, toJavaScriptType, toSchemaType,\n *   _toPromise, toObservable\n *\n * Utility functions:\n *   inArray, xor\n *\n * Typescript types and interfaces:\n *   SchemaPrimitiveType, SchemaType, JavaScriptPrimitiveType, JavaScriptType,\n *   PrimitiveValue, PlainObject, IValidatorFn, AsyncIValidatorFn\n *\n * Note: 'IValidatorFn' is short for 'invertable validator function',\n *   which is a validator functions that accepts an optional second\n *   argument which, if set to TRUE, causes the validator to perform\n *   the opposite of its original function.\n */\n\nexport type SchemaPrimitiveType =\n  'string' | 'number' | 'integer' | 'boolean' | 'null';\nexport type SchemaType =\n  'string' | 'number' | 'integer' | 'boolean' | 'null' | 'object' | 'array';\nexport type JavaScriptPrimitiveType =\n  'string' | 'number' | 'boolean' | 'null' | 'undefined';\nexport type JavaScriptType =\n  'string' | 'number' | 'boolean' | 'null' | 'undefined' | 'object' | 'array' |\n  'map' | 'set' | 'arguments' | 'date' | 'error' | 'function' | 'json' |\n  'math' | 'regexp'; // Note: this list is incomplete\nexport type PrimitiveValue = string | number | boolean | null | undefined;\nexport interface PlainObject { [k: string]: any; }\n\nexport type IValidatorFn = (c: AbstractControl, i?: boolean) => PlainObject;\nexport type AsyncIValidatorFn = (c: AbstractControl, i?: boolean) => any;\n\n/**\n * '_executeValidators' utility function\n *\n * Validates a control against an array of validators, and returns\n * an array of the same length containing a combination of error messages\n * (from invalid validators) and null values (from valid validators)\n *\n * @param  { AbstractControl } control - control to validate\n * @param  { IValidatorFn[] } validators - array of validators\n * @param  { boolean } invert - invert?\n * @return { PlainObject[] } - array of nulls and error message\n */\nexport function _executeValidators(control, validators, invert = false) {\n  return validators.map(validator => validator(control, invert));\n}\n\n/**\n * '_executeAsyncValidators' utility function\n *\n * Validates a control against an array of async validators, and returns\n * an array of observabe results of the same length containing a combination of\n * error messages (from invalid validators) and null values (from valid ones)\n *\n * @param  { AbstractControl } control - control to validate\n * @param  { AsyncIValidatorFn[] } validators - array of async validators\n * @param  { boolean } invert - invert?\n * @return { any[] } - array of observable nulls and error message\n */\nexport function _executeAsyncValidators(control, validators, invert = false) {\n  return validators.map(validator => validator(control, invert));\n}\n\n/**\n * '_mergeObjects' utility function\n *\n * Recursively Merges one or more objects into a single object with combined keys.\n * Automatically detects and ignores null and undefined inputs.\n * Also detects duplicated boolean 'not' keys and XORs their values.\n *\n * @param  { PlainObject[] } objects - one or more objects to merge\n * @return { PlainObject } - merged object\n */\nexport function _mergeObjects(...objects) {\n  const mergedObject: PlainObject = { };\n  for (const currentObject of objects) {\n    if (isObject(currentObject)) {\n      for (const key of Object.keys(currentObject)) {\n        const currentValue = currentObject[key];\n        const mergedValue = mergedObject[key];\n        mergedObject[key] = !isDefined(mergedValue) ? currentValue :\n          key === 'not' && isBoolean(mergedValue, 'strict') &&\n            isBoolean(currentValue, 'strict') ? xor(mergedValue, currentValue) :\n          getType(mergedValue) === 'object' && getType(currentValue) === 'object' ?\n            _mergeObjects(mergedValue, currentValue) :\n            currentValue;\n      }\n    }\n  }\n  return mergedObject;\n}\n\n/**\n * '_mergeErrors' utility function\n *\n * Merges an array of objects.\n * Used for combining the validator errors returned from 'executeValidators'\n *\n * @param  { PlainObject[] } arrayOfErrors - array of objects\n * @return { PlainObject } - merged object, or null if no usable input objectcs\n */\nexport function _mergeErrors(arrayOfErrors) {\n  const mergedErrors = _mergeObjects(...arrayOfErrors);\n  return isEmpty(mergedErrors) ? null : mergedErrors;\n}\n\n/**\n * 'isDefined' utility function\n *\n * Checks if a variable contains a value of any type.\n * Returns true even for otherwise 'falsey' values of 0, '', and false.\n *\n * @param  { any } value - the value to check\n * @return { boolean } - false if undefined or null, otherwise true\n */\nexport function isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\n/**\n * 'hasValue' utility function\n *\n * Checks if a variable contains a value.\n * Returs false for null, undefined, or a zero-length strng, '',\n * otherwise returns true.\n * (Stricter than 'isDefined' because it also returns false for '',\n * though it stil returns true for otherwise 'falsey' values 0 and false.)\n *\n * @param  { any } value - the value to check\n * @return { boolean } - false if undefined, null, or '', otherwise true\n */\nexport function hasValue(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\n/**\n * 'isEmpty' utility function\n *\n * Similar to !hasValue, but also returns true for empty arrays and objects.\n *\n * @param  { any } value - the value to check\n * @return { boolean } - false if undefined, null, or '', otherwise true\n */\nexport function isEmpty(value) {\n  if (isArray(value)) { return !value.length; }\n  if (isObject(value)) { return !Object.keys(value).length; }\n  return value === undefined || value === null || value === '';\n}\n\n/**\n * 'isString' utility function\n *\n * Checks if a value is a string.\n *\n * @param  { any } value - the value to check\n * @return { boolean } - true if string, false if not\n */\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * 'isNumber' utility function\n *\n * Checks if a value is a regular number, numeric string, or JavaScript Date.\n *\n * @param  { any } value - the value to check\n * @param  { any = false } strict - if truthy, also checks JavaScript tyoe\n * @return { boolean } - true if number, false if not\n */\nexport function isNumber(value, strict: any = false) {\n  if (strict && typeof value !== 'number') { return false; }\n  return !isNaN(value) && value !== value / 0;\n}\n\n/**\n * 'isInteger' utility function\n *\n * Checks if a value is an integer.\n *\n * @param  { any } value - the value to check\n * @param  { any = false } strict - if truthy, also checks JavaScript tyoe\n * @return {boolean } - true if number, false if not\n */\nexport function isInteger(value, strict: any = false) {\n  if (strict && typeof value !== 'number') { return false; }\n  return !isNaN(value) &&  value !== value / 0 && value % 1 === 0;\n}\n\n/**\n * 'isBoolean' utility function\n *\n * Checks if a value is a boolean.\n *\n * @param  { any } value - the value to check\n * @param  { any = null } option - if 'strict', also checks JavaScript type\n *                              if TRUE or FALSE, checks only for that value\n * @return { boolean } - true if boolean, false if not\n */\nexport function isBoolean(value, option: any = null) {\n  if (option === 'strict') { return value === true || value === false; }\n  if (option === true) {\n    return value === true || value === 1 || value === 'true' || value === '1';\n  }\n  if (option === false) {\n    return value === false || value === 0 || value === 'false' || value === '0';\n  }\n  return value === true || value === 1 || value === 'true' || value === '1' ||\n    value === false || value === 0 || value === 'false' || value === '0';\n}\n\nexport function isFunction(item: any): boolean {\n  return typeof item === 'function';\n}\n\nexport function isObject(item: any): boolean {\n  return item !== null && typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Object]';\n}\n\nexport function isArray(item: any): boolean {\n  return Array.isArray(item) ||\n    Object.prototype.toString.call(item) === '[object Array]';\n}\n\nexport function isDate(item: any): boolean {\n  return typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Date]';\n}\n\nexport function isMap(item: any): boolean {\n  return typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Map]';\n}\n\nexport function isSet(item: any): boolean {\n  return typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Set]';\n}\n\nexport function isSymbol(item: any): boolean {\n  return typeof item === 'symbol';\n}\n\n/**\n * 'getType' function\n *\n * Detects the JSON Schema Type of a value.\n * By default, detects numbers and integers even if formatted as strings.\n * (So all integers are also numbers, and any number may also be a string.)\n * However, it only detects true boolean values (to detect boolean values\n * in non-boolean formats, use isBoolean() instead).\n *\n * If passed a second optional parameter of 'strict', it will only detect\n * numbers and integers if they are formatted as JavaScript numbers.\n *\n * Examples:\n * getType('10.5') = 'number'\n * getType(10.5) = 'number'\n * getType('10') = 'integer'\n * getType(10) = 'integer'\n * getType('true') = 'string'\n * getType(true) = 'boolean'\n * getType(null) = 'null'\n * getType({ }) = 'object'\n * getType([]) = 'array'\n *\n * getType('10.5', 'strict') = 'string'\n * getType(10.5, 'strict') = 'number'\n * getType('10', 'strict') = 'string'\n * getType(10, 'strict') = 'integer'\n * getType('true', 'strict') = 'string'\n * getType(true, 'strict') = 'boolean'\n *\n * @param  { any } value - value to check\n * @param  { any = false } strict - if truthy, also checks JavaScript tyoe\n * @return { SchemaType }\n */\nexport function getType(value, strict: any = false) {\n  if (!isDefined(value)) { return 'null'; }\n  if (isArray(value)) { return 'array'; }\n  if (isObject(value)) { return 'object'; }\n  if (isBoolean(value, 'strict')) { return 'boolean'; }\n  if (isInteger(value, strict)) { return 'integer'; }\n  if (isNumber(value, strict)) { return 'number'; }\n  if (isString(value) || (!strict && isDate(value))) { return 'string'; }\n  return null;\n}\n\n/**\n * 'isType' function\n *\n * Checks wether an input (probably string) value contains data of\n * a specified JSON Schema type\n *\n * @param  { PrimitiveValue } value - value to check\n * @param  { SchemaPrimitiveType } type - type to check\n * @return { boolean }\n */\nexport function isType(value, type) {\n  switch (type) {\n    case 'string':\n      return isString(value) || isDate(value);\n    case 'number':\n      return isNumber(value);\n    case 'integer':\n      return isInteger(value);\n    case 'boolean':\n      return isBoolean(value);\n    case 'null':\n      return !hasValue(value);\n    default:\n      console.error(`isType error: \"${type}\" is not a recognized type.`);\n      return null;\n  }\n}\n\n/**\n * 'isPrimitive' function\n *\n * Checks wether an input value is a JavaScript primitive type:\n * string, number, boolean, or null.\n *\n * @param  { any } value - value to check\n * @return { boolean }\n */\nexport function isPrimitive(value) {\n  return (isString(value) || isNumber(value) ||\n    isBoolean(value, 'strict') || value === null);\n}\n\n/**\n * 'toJavaScriptType' function\n *\n * Converts an input (probably string) value to a JavaScript primitive type -\n * 'string', 'number', 'boolean', or 'null' - before storing in a JSON object.\n *\n * Does not coerce values (other than null), and only converts the types\n * of values that would otherwise be valid.\n *\n * If the optional third parameter 'strictIntegers' is TRUE, and the\n * JSON Schema type 'integer' is specified, it also verifies the input value\n * is an integer and, if it is, returns it as a JaveScript number.\n * If 'strictIntegers' is FALSE (or not set) the type 'integer' is treated\n * exactly the same as 'number', and allows decimals.\n *\n * Valid Examples:\n * toJavaScriptType('10',   'number' ) = 10   // '10'   is a number\n * toJavaScriptType('10',   'integer') = 10   // '10'   is also an integer\n * toJavaScriptType( 10,    'integer') = 10   //  10    is still an integer\n * toJavaScriptType( 10,    'string' ) = '10' //  10    can be made into a string\n * toJavaScriptType('10.5', 'number' ) = 10.5 // '10.5' is a number\n *\n * Invalid Examples:\n * toJavaScriptType('10.5', 'integer') = null // '10.5' is not an integer\n * toJavaScriptType( 10.5,  'integer') = null //  10.5  is still not an integer\n *\n * @param  { PrimitiveValue } value - value to convert\n * @param  { SchemaPrimitiveType | SchemaPrimitiveType[] } types - types to convert to\n * @param  { boolean = false } strictIntegers - if FALSE, treat integers as numbers\n * @return { PrimitiveValue }\n */\nexport function toJavaScriptType(value, types, strictIntegers = true)  {\n  if (!isDefined(value)) { return null; }\n  if (isString(types)) { types = [types]; }\n  if (strictIntegers && inArray('integer', types)) {\n    if (isInteger(value, 'strict')) { return value; }\n    if (isInteger(value)) { return parseInt(value, 10); }\n  }\n  if (inArray('number', types) || (!strictIntegers && inArray('integer', types))) {\n    if (isNumber(value, 'strict')) { return value; }\n    if (isNumber(value)) { return parseFloat(value); }\n  }\n  if (inArray('string', types)) {\n    if (isString(value)) { return value; }\n    // If value is a date, and types includes 'string',\n    // convert the date to a string\n    if (isDate(value)) { return value.toISOString().slice(0, 10); }\n    if (isNumber(value)) { return value.toString(); }\n  }\n  // If value is a date, and types includes 'integer' or 'number',\n  // but not 'string', convert the date to a number\n  if (isDate(value) && (inArray('integer', types) || inArray('number', types))) {\n    return value.getTime();\n  }\n  if (inArray('boolean', types)) {\n    if (isBoolean(value, true)) { return true; }\n    if (isBoolean(value, false)) { return false; }\n  }\n  return null;\n}\n\n/**\n * 'toSchemaType' function\n *\n * Converts an input (probably string) value to the \"best\" JavaScript\n * equivalent available from an allowed list of JSON Schema types, which may\n * contain 'string', 'number', 'integer', 'boolean', and/or 'null'.\n * If necssary, it does progressively agressive type coersion.\n * It will not return null unless null is in the list of allowed types.\n *\n * Number conversion examples:\n * toSchemaType('10', ['number','integer','string']) = 10 // integer\n * toSchemaType('10', ['number','string']) = 10 // number\n * toSchemaType('10', ['string']) = '10' // string\n * toSchemaType('10.5', ['number','integer','string']) = 10.5 // number\n * toSchemaType('10.5', ['integer','string']) = '10.5' // string\n * toSchemaType('10.5', ['integer']) = 10 // integer\n * toSchemaType(10.5, ['null','boolean','string']) = '10.5' // string\n * toSchemaType(10.5, ['null','boolean']) = true // boolean\n *\n * String conversion examples:\n * toSchemaType('1.5x', ['boolean','number','integer','string']) = '1.5x' // string\n * toSchemaType('1.5x', ['boolean','number','integer']) = '1.5' // number\n * toSchemaType('1.5x', ['boolean','integer']) = '1' // integer\n * toSchemaType('1.5x', ['boolean']) = true // boolean\n * toSchemaType('xyz', ['number','integer','boolean','null']) = true // boolean\n * toSchemaType('xyz', ['number','integer','null']) = null // null\n * toSchemaType('xyz', ['number','integer']) = 0 // number\n *\n * Boolean conversion examples:\n * toSchemaType('1', ['integer','number','string','boolean']) = 1 // integer\n * toSchemaType('1', ['number','string','boolean']) = 1 // number\n * toSchemaType('1', ['string','boolean']) = '1' // string\n * toSchemaType('1', ['boolean']) = true // boolean\n * toSchemaType('true', ['number','string','boolean']) = 'true' // string\n * toSchemaType('true', ['boolean']) = true // boolean\n * toSchemaType('true', ['number']) = 0 // number\n * toSchemaType(true, ['number','string','boolean']) = true // boolean\n * toSchemaType(true, ['number','string']) = 'true' // string\n * toSchemaType(true, ['number']) = 1 // number\n *\n * @param  { PrimitiveValue } value - value to convert\n * @param  { SchemaPrimitiveType | SchemaPrimitiveType[] } types - allowed types to convert to\n * @return { PrimitiveValue }\n */\nexport function toSchemaType(value, types) {\n  if (!isArray(<SchemaPrimitiveType>types)) {\n    types = <SchemaPrimitiveType[]>[types];\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('null') && !hasValue(value)) {\n    return null;\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('boolean') && !isBoolean(value, 'strict')) {\n    return value;\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('integer')) {\n    const testValue = toJavaScriptType(value, 'integer');\n    if (testValue !== null) { return +testValue; }\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('number')) {\n    const testValue = toJavaScriptType(value, 'number');\n    if (testValue !== null) { return +testValue; }\n  }\n  if (\n    (isString(value) || isNumber(value, 'strict')) &&\n    (<SchemaPrimitiveType[]>types).includes('string')\n  ) { // Convert number to string\n    return toJavaScriptType(value, 'string');\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('boolean') && isBoolean(value)) {\n    return toJavaScriptType(value, 'boolean');\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('string')) { // Convert null & boolean to string\n    if (value === null) { return ''; }\n    const testValue = toJavaScriptType(value, 'string');\n    if (testValue !== null) { return testValue; }\n  }\n  if ((\n    (<SchemaPrimitiveType[]>types).includes('number') ||\n    (<SchemaPrimitiveType[]>types).includes('integer'))\n  ) {\n    if (value === true) { return 1; } // Convert boolean & null to number\n    if (value === false || value === null || value === '') { return 0; }\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('number')) { // Convert mixed string to number\n    const testValue = parseFloat(<string>value);\n    if (!!testValue) { return testValue; }\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('integer')) { // Convert string or number to integer\n    const testValue = parseInt(<string>value, 10);\n    if (!!testValue) { return testValue; }\n  }\n  if ((<SchemaPrimitiveType[]>types).includes('boolean')) { // Convert anything to boolean\n    return !!value;\n  }\n  if ((\n      (<SchemaPrimitiveType[]>types).includes('number') ||\n      (<SchemaPrimitiveType[]>types).includes('integer')\n    ) && !(<SchemaPrimitiveType[]>types).includes('null')\n  ) {\n    return 0; // If null not allowed, return 0 for non-convertable values\n  }\n}\n\n/**\n * 'isPromise' function\n *\n * @param  { any } object\n * @return { boolean }\n */\nexport function isPromise(object): object is Promise<any> {\n  return !!object && typeof object.then === 'function';\n}\n\n/**\n * 'isObservable' function\n *\n * @param  { any } object\n * @return { boolean }\n */\nexport function isObservable(object): object is Observable<any> {\n  return !!object && typeof object.subscribe === 'function';\n}\n\n/**\n * '_toPromise' function\n *\n * @param  { object } object\n * @return { Promise<any> }\n */\nexport function _toPromise(object): Promise<any> {\n  return isPromise(object) ? object : toPromise.call(object);\n}\n\n/**\n * 'toObservable' function\n *\n * @param  { object } object\n * @return { Observable<any> }\n */\nexport function toObservable(object): Observable<any> {\n  const observable = isPromise(object) ? fromPromise(object) : object;\n  if (isObservable(observable)) { return observable; }\n  console.error('toObservable error: Expected validator to return Promise or Observable.');\n  return new Observable();\n}\n\n/**\n * 'inArray' function\n *\n * Searches an array for an item, or one of a list of items, and returns true\n * as soon as a match is found, or false if no match.\n *\n * If the optional third parameter allIn is set to TRUE, and the item to find\n * is an array, then the function returns true only if all elements from item\n * are found in the array list, and false if any element is not found. If the\n * item to find is not an array, setting allIn to TRUE has no effect.\n *\n * @param  { any|any[] } item - the item to search for\n * @param  { any[] } array - the array to search\n * @param  { boolean = false } allIn - if TRUE, all items must be in array\n * @return { boolean } - true if item(s) in array, false otherwise\n */\nexport function inArray(item, array, allIn = false) {\n  if (!isDefined(item) || !isArray(array)) { return false; }\n  return isArray(item) ?\n    item[allIn ? 'every' : 'some'](subItem => array.includes(subItem)) :\n    array.includes(item);\n}\n\n/**\n * 'xor' utility function - exclusive or\n *\n * Returns true if exactly one of two values is truthy.\n *\n * @param  { any } value1 - first value to check\n * @param  { any } value2 - second value to check\n * @return { boolean } - true if exactly one input value is truthy, false if not\n */\nexport function xor(value1, value2) {\n  return (!!value1 && !value2) || (!value1 && !!value2);\n}\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "tslib_1.__spread",
    "_.map",
    "_.cloneDeep",
    "FormsModule",
    "ReactiveFormsModule",
    "FlexLayoutModule",
    "AngularFontAwesomeModule",
    "MatStepperModule",
    "MatTabsModule",
    "MatTooltipModule",
    "MatRadioModule",
    "MatSelectModule",
    "MatSliderModule",
    "MatSlideToggleModule",
    "MatFormFieldModule",
    "MatIconModule",
    "MatInputModule",
    "MatNativeDateModule",
    "MatCheckboxModule",
    "MatChipsModule",
    "MatDatepickerModule",
    "MatExpansionModule",
    "MatAutocompleteModule",
    "MatButtonModule",
    "MatButtonToggleModule",
    "MatCardModule",
    "Component",
    "Input",
    "tslib_1.__values",
    "ChangeDetectionStrategy",
    "CKEditorModule",
    "DpDatePickerModule",
    "DomSanitizer",
    "ChangeDetectorRef",
    "_.isEqual",
    "EventEmitter",
    "forwardRef",
    "NgZone",
    "Subject",
    "_.uniqueId",
    "FormArray",
    "_.filter",
    "FormGroup",
    "tslib_1.__read",
    "isEqual",
    "hasValue",
    "toPromise"
  ],
  "mappings": "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"
}
